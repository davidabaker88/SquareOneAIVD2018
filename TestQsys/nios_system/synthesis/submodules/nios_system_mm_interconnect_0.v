// nios_system_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 17.0 602

`timescale 1 ps / 1 ps
module nios_system_mm_interconnect_0 (
		input  wire        clk_0_clk_clk,                                       //                                     clk_0_clk.clk
		input  wire        nios2_processor_reset_n_reset_bridge_in_reset_reset, // nios2_processor_reset_n_reset_bridge_in_reset.reset
		input  wire [18:0] nios2_processor_data_master_address,                 //                   nios2_processor_data_master.address
		output wire        nios2_processor_data_master_waitrequest,             //                                              .waitrequest
		input  wire [3:0]  nios2_processor_data_master_byteenable,              //                                              .byteenable
		input  wire        nios2_processor_data_master_read,                    //                                              .read
		output wire [31:0] nios2_processor_data_master_readdata,                //                                              .readdata
		input  wire        nios2_processor_data_master_write,                   //                                              .write
		input  wire [31:0] nios2_processor_data_master_writedata,               //                                              .writedata
		input  wire        nios2_processor_data_master_debugaccess,             //                                              .debugaccess
		input  wire [18:0] nios2_processor_instruction_master_address,          //            nios2_processor_instruction_master.address
		output wire        nios2_processor_instruction_master_waitrequest,      //                                              .waitrequest
		input  wire        nios2_processor_instruction_master_read,             //                                              .read
		output wire [31:0] nios2_processor_instruction_master_readdata,         //                                              .readdata
		output wire [1:0]  BLSensor_s1_address,                                 //                                   BLSensor_s1.address
		input  wire [31:0] BLSensor_s1_readdata,                                //                                              .readdata
		output wire [1:0]  BRSensor_s1_address,                                 //                                   BRSensor_s1.address
		input  wire [31:0] BRSensor_s1_readdata,                                //                                              .readdata
		output wire [1:0]  ChallengeSelect_s1_address,                          //                            ChallengeSelect_s1.address
		input  wire [31:0] ChallengeSelect_s1_readdata,                         //                                              .readdata
		output wire [1:0]  driveSpeed_s1_address,                               //                                 driveSpeed_s1.address
		output wire        driveSpeed_s1_write,                                 //                                              .write
		input  wire [31:0] driveSpeed_s1_readdata,                              //                                              .readdata
		output wire [31:0] driveSpeed_s1_writedata,                             //                                              .writedata
		output wire        driveSpeed_s1_chipselect,                            //                                              .chipselect
		output wire [1:0]  encoderInCM_s1_address,                              //                                encoderInCM_s1.address
		input  wire [31:0] encoderInCM_s1_readdata,                             //                                              .readdata
		output wire [1:0]  encoderreset_s1_address,                             //                               encoderreset_s1.address
		output wire        encoderreset_s1_write,                               //                                              .write
		input  wire [31:0] encoderreset_s1_readdata,                            //                                              .readdata
		output wire [31:0] encoderreset_s1_writedata,                           //                                              .writedata
		output wire        encoderreset_s1_chipselect,                          //                                              .chipselect
		output wire [1:0]  FLSensor_s1_address,                                 //                                   FLSensor_s1.address
		input  wire [31:0] FLSensor_s1_readdata,                                //                                              .readdata
		output wire [1:0]  FRSensor_s1_address,                                 //                                   FRSensor_s1.address
		input  wire [31:0] FRSensor_s1_readdata,                                //                                              .readdata
		output wire [1:0]  greenlight_s1_address,                               //                                 greenlight_s1.address
		input  wire [31:0] greenlight_s1_readdata,                              //                                              .readdata
		output wire [0:0]  jtag_uart_avalon_jtag_slave_address,                 //                   jtag_uart_avalon_jtag_slave.address
		output wire        jtag_uart_avalon_jtag_slave_write,                   //                                              .write
		output wire        jtag_uart_avalon_jtag_slave_read,                    //                                              .read
		input  wire [31:0] jtag_uart_avalon_jtag_slave_readdata,                //                                              .readdata
		output wire [31:0] jtag_uart_avalon_jtag_slave_writedata,               //                                              .writedata
		input  wire        jtag_uart_avalon_jtag_slave_waitrequest,             //                                              .waitrequest
		output wire        jtag_uart_avalon_jtag_slave_chipselect,              //                                              .chipselect
		output wire [1:0]  LEDs_s1_address,                                     //                                       LEDs_s1.address
		output wire        LEDs_s1_write,                                       //                                              .write
		input  wire [31:0] LEDs_s1_readdata,                                    //                                              .readdata
		output wire [31:0] LEDs_s1_writedata,                                   //                                              .writedata
		output wire        LEDs_s1_chipselect,                                  //                                              .chipselect
		output wire [1:0]  LSensor_s1_address,                                  //                                    LSensor_s1.address
		input  wire [31:0] LSensor_s1_readdata,                                 //                                              .readdata
		output wire [8:0]  nios2_processor_jtag_debug_module_address,           //             nios2_processor_jtag_debug_module.address
		output wire        nios2_processor_jtag_debug_module_write,             //                                              .write
		output wire        nios2_processor_jtag_debug_module_read,              //                                              .read
		input  wire [31:0] nios2_processor_jtag_debug_module_readdata,          //                                              .readdata
		output wire [31:0] nios2_processor_jtag_debug_module_writedata,         //                                              .writedata
		output wire [3:0]  nios2_processor_jtag_debug_module_byteenable,        //                                              .byteenable
		input  wire        nios2_processor_jtag_debug_module_waitrequest,       //                                              .waitrequest
		output wire        nios2_processor_jtag_debug_module_debugaccess,       //                                              .debugaccess
		output wire [15:0] onchip_memory_s1_address,                            //                              onchip_memory_s1.address
		output wire        onchip_memory_s1_write,                              //                                              .write
		input  wire [31:0] onchip_memory_s1_readdata,                           //                                              .readdata
		output wire [31:0] onchip_memory_s1_writedata,                          //                                              .writedata
		output wire [3:0]  onchip_memory_s1_byteenable,                         //                                              .byteenable
		output wire        onchip_memory_s1_chipselect,                         //                                              .chipselect
		output wire        onchip_memory_s1_clken,                              //                                              .clken
		output wire [1:0]  redlight_s1_address,                                 //                                   redlight_s1.address
		input  wire [31:0] redlight_s1_readdata,                                //                                              .readdata
		output wire [1:0]  reverse_s1_address,                                  //                                    reverse_s1.address
		output wire        reverse_s1_write,                                    //                                              .write
		input  wire [31:0] reverse_s1_readdata,                                 //                                              .readdata
		output wire [31:0] reverse_s1_writedata,                                //                                              .writedata
		output wire        reverse_s1_chipselect,                               //                                              .chipselect
		output wire [1:0]  RSensor_s1_address,                                  //                                    RSensor_s1.address
		input  wire [31:0] RSensor_s1_readdata,                                 //                                              .readdata
		output wire [1:0]  switches_s1_address,                                 //                                   switches_s1.address
		input  wire [31:0] switches_s1_readdata,                                //                                              .readdata
		output wire [1:0]  targetDirection_s1_address,                          //                            targetDirection_s1.address
		output wire        targetDirection_s1_write,                            //                                              .write
		input  wire [31:0] targetDirection_s1_readdata,                         //                                              .readdata
		output wire [31:0] targetDirection_s1_writedata,                        //                                              .writedata
		output wire        targetDirection_s1_chipselect,                       //                                              .chipselect
		output wire [1:0]  yellowlight_s1_address,                              //                                yellowlight_s1.address
		input  wire [31:0] yellowlight_s1_readdata                              //                                              .readdata
	);

	wire         nios2_processor_data_master_translator_avalon_universal_master_0_waitrequest;          // nios2_processor_data_master_agent:av_waitrequest -> nios2_processor_data_master_translator:uav_waitrequest
	wire  [31:0] nios2_processor_data_master_translator_avalon_universal_master_0_readdata;             // nios2_processor_data_master_agent:av_readdata -> nios2_processor_data_master_translator:uav_readdata
	wire         nios2_processor_data_master_translator_avalon_universal_master_0_debugaccess;          // nios2_processor_data_master_translator:uav_debugaccess -> nios2_processor_data_master_agent:av_debugaccess
	wire  [18:0] nios2_processor_data_master_translator_avalon_universal_master_0_address;              // nios2_processor_data_master_translator:uav_address -> nios2_processor_data_master_agent:av_address
	wire         nios2_processor_data_master_translator_avalon_universal_master_0_read;                 // nios2_processor_data_master_translator:uav_read -> nios2_processor_data_master_agent:av_read
	wire   [3:0] nios2_processor_data_master_translator_avalon_universal_master_0_byteenable;           // nios2_processor_data_master_translator:uav_byteenable -> nios2_processor_data_master_agent:av_byteenable
	wire         nios2_processor_data_master_translator_avalon_universal_master_0_readdatavalid;        // nios2_processor_data_master_agent:av_readdatavalid -> nios2_processor_data_master_translator:uav_readdatavalid
	wire         nios2_processor_data_master_translator_avalon_universal_master_0_lock;                 // nios2_processor_data_master_translator:uav_lock -> nios2_processor_data_master_agent:av_lock
	wire         nios2_processor_data_master_translator_avalon_universal_master_0_write;                // nios2_processor_data_master_translator:uav_write -> nios2_processor_data_master_agent:av_write
	wire  [31:0] nios2_processor_data_master_translator_avalon_universal_master_0_writedata;            // nios2_processor_data_master_translator:uav_writedata -> nios2_processor_data_master_agent:av_writedata
	wire   [2:0] nios2_processor_data_master_translator_avalon_universal_master_0_burstcount;           // nios2_processor_data_master_translator:uav_burstcount -> nios2_processor_data_master_agent:av_burstcount
	wire         rsp_mux_src_valid;                                                                     // rsp_mux:src_valid -> nios2_processor_data_master_agent:rp_valid
	wire  [98:0] rsp_mux_src_data;                                                                      // rsp_mux:src_data -> nios2_processor_data_master_agent:rp_data
	wire         rsp_mux_src_ready;                                                                     // nios2_processor_data_master_agent:rp_ready -> rsp_mux:src_ready
	wire  [19:0] rsp_mux_src_channel;                                                                   // rsp_mux:src_channel -> nios2_processor_data_master_agent:rp_channel
	wire         rsp_mux_src_startofpacket;                                                             // rsp_mux:src_startofpacket -> nios2_processor_data_master_agent:rp_startofpacket
	wire         rsp_mux_src_endofpacket;                                                               // rsp_mux:src_endofpacket -> nios2_processor_data_master_agent:rp_endofpacket
	wire         nios2_processor_instruction_master_translator_avalon_universal_master_0_waitrequest;   // nios2_processor_instruction_master_agent:av_waitrequest -> nios2_processor_instruction_master_translator:uav_waitrequest
	wire  [31:0] nios2_processor_instruction_master_translator_avalon_universal_master_0_readdata;      // nios2_processor_instruction_master_agent:av_readdata -> nios2_processor_instruction_master_translator:uav_readdata
	wire         nios2_processor_instruction_master_translator_avalon_universal_master_0_debugaccess;   // nios2_processor_instruction_master_translator:uav_debugaccess -> nios2_processor_instruction_master_agent:av_debugaccess
	wire  [18:0] nios2_processor_instruction_master_translator_avalon_universal_master_0_address;       // nios2_processor_instruction_master_translator:uav_address -> nios2_processor_instruction_master_agent:av_address
	wire         nios2_processor_instruction_master_translator_avalon_universal_master_0_read;          // nios2_processor_instruction_master_translator:uav_read -> nios2_processor_instruction_master_agent:av_read
	wire   [3:0] nios2_processor_instruction_master_translator_avalon_universal_master_0_byteenable;    // nios2_processor_instruction_master_translator:uav_byteenable -> nios2_processor_instruction_master_agent:av_byteenable
	wire         nios2_processor_instruction_master_translator_avalon_universal_master_0_readdatavalid; // nios2_processor_instruction_master_agent:av_readdatavalid -> nios2_processor_instruction_master_translator:uav_readdatavalid
	wire         nios2_processor_instruction_master_translator_avalon_universal_master_0_lock;          // nios2_processor_instruction_master_translator:uav_lock -> nios2_processor_instruction_master_agent:av_lock
	wire         nios2_processor_instruction_master_translator_avalon_universal_master_0_write;         // nios2_processor_instruction_master_translator:uav_write -> nios2_processor_instruction_master_agent:av_write
	wire  [31:0] nios2_processor_instruction_master_translator_avalon_universal_master_0_writedata;     // nios2_processor_instruction_master_translator:uav_writedata -> nios2_processor_instruction_master_agent:av_writedata
	wire   [2:0] nios2_processor_instruction_master_translator_avalon_universal_master_0_burstcount;    // nios2_processor_instruction_master_translator:uav_burstcount -> nios2_processor_instruction_master_agent:av_burstcount
	wire         rsp_mux_001_src_valid;                                                                 // rsp_mux_001:src_valid -> nios2_processor_instruction_master_agent:rp_valid
	wire  [98:0] rsp_mux_001_src_data;                                                                  // rsp_mux_001:src_data -> nios2_processor_instruction_master_agent:rp_data
	wire         rsp_mux_001_src_ready;                                                                 // nios2_processor_instruction_master_agent:rp_ready -> rsp_mux_001:src_ready
	wire  [19:0] rsp_mux_001_src_channel;                                                               // rsp_mux_001:src_channel -> nios2_processor_instruction_master_agent:rp_channel
	wire         rsp_mux_001_src_startofpacket;                                                         // rsp_mux_001:src_startofpacket -> nios2_processor_instruction_master_agent:rp_startofpacket
	wire         rsp_mux_001_src_endofpacket;                                                           // rsp_mux_001:src_endofpacket -> nios2_processor_instruction_master_agent:rp_endofpacket
	wire  [31:0] jtag_uart_avalon_jtag_slave_agent_m0_readdata;                                         // jtag_uart_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_avalon_jtag_slave_agent:m0_readdata
	wire         jtag_uart_avalon_jtag_slave_agent_m0_waitrequest;                                      // jtag_uart_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_avalon_jtag_slave_agent:m0_waitrequest
	wire         jtag_uart_avalon_jtag_slave_agent_m0_debugaccess;                                      // jtag_uart_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_avalon_jtag_slave_translator:uav_debugaccess
	wire  [18:0] jtag_uart_avalon_jtag_slave_agent_m0_address;                                          // jtag_uart_avalon_jtag_slave_agent:m0_address -> jtag_uart_avalon_jtag_slave_translator:uav_address
	wire   [3:0] jtag_uart_avalon_jtag_slave_agent_m0_byteenable;                                       // jtag_uart_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_avalon_jtag_slave_translator:uav_byteenable
	wire         jtag_uart_avalon_jtag_slave_agent_m0_read;                                             // jtag_uart_avalon_jtag_slave_agent:m0_read -> jtag_uart_avalon_jtag_slave_translator:uav_read
	wire         jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid;                                    // jtag_uart_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_avalon_jtag_slave_agent:m0_readdatavalid
	wire         jtag_uart_avalon_jtag_slave_agent_m0_lock;                                             // jtag_uart_avalon_jtag_slave_agent:m0_lock -> jtag_uart_avalon_jtag_slave_translator:uav_lock
	wire  [31:0] jtag_uart_avalon_jtag_slave_agent_m0_writedata;                                        // jtag_uart_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_avalon_jtag_slave_translator:uav_writedata
	wire         jtag_uart_avalon_jtag_slave_agent_m0_write;                                            // jtag_uart_avalon_jtag_slave_agent:m0_write -> jtag_uart_avalon_jtag_slave_translator:uav_write
	wire   [2:0] jtag_uart_avalon_jtag_slave_agent_m0_burstcount;                                       // jtag_uart_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_avalon_jtag_slave_translator:uav_burstcount
	wire         jtag_uart_avalon_jtag_slave_agent_rf_source_valid;                                     // jtag_uart_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [99:0] jtag_uart_avalon_jtag_slave_agent_rf_source_data;                                      // jtag_uart_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire         jtag_uart_avalon_jtag_slave_agent_rf_source_ready;                                     // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_avalon_jtag_slave_agent:rf_source_ready
	wire         jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket;                             // jtag_uart_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire         jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket;                               // jtag_uart_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire         jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid;                                  // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_avalon_jtag_slave_agent:rf_sink_valid
	wire  [99:0] jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data;                                   // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_avalon_jtag_slave_agent:rf_sink_data
	wire         jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready;                                  // jtag_uart_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire         jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                          // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire         jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                            // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire         cmd_mux_src_valid;                                                                     // cmd_mux:src_valid -> jtag_uart_avalon_jtag_slave_agent:cp_valid
	wire  [98:0] cmd_mux_src_data;                                                                      // cmd_mux:src_data -> jtag_uart_avalon_jtag_slave_agent:cp_data
	wire         cmd_mux_src_ready;                                                                     // jtag_uart_avalon_jtag_slave_agent:cp_ready -> cmd_mux:src_ready
	wire  [19:0] cmd_mux_src_channel;                                                                   // cmd_mux:src_channel -> jtag_uart_avalon_jtag_slave_agent:cp_channel
	wire         cmd_mux_src_startofpacket;                                                             // cmd_mux:src_startofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_startofpacket
	wire         cmd_mux_src_endofpacket;                                                               // cmd_mux:src_endofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_endofpacket
	wire  [31:0] nios2_processor_jtag_debug_module_agent_m0_readdata;                                   // nios2_processor_jtag_debug_module_translator:uav_readdata -> nios2_processor_jtag_debug_module_agent:m0_readdata
	wire         nios2_processor_jtag_debug_module_agent_m0_waitrequest;                                // nios2_processor_jtag_debug_module_translator:uav_waitrequest -> nios2_processor_jtag_debug_module_agent:m0_waitrequest
	wire         nios2_processor_jtag_debug_module_agent_m0_debugaccess;                                // nios2_processor_jtag_debug_module_agent:m0_debugaccess -> nios2_processor_jtag_debug_module_translator:uav_debugaccess
	wire  [18:0] nios2_processor_jtag_debug_module_agent_m0_address;                                    // nios2_processor_jtag_debug_module_agent:m0_address -> nios2_processor_jtag_debug_module_translator:uav_address
	wire   [3:0] nios2_processor_jtag_debug_module_agent_m0_byteenable;                                 // nios2_processor_jtag_debug_module_agent:m0_byteenable -> nios2_processor_jtag_debug_module_translator:uav_byteenable
	wire         nios2_processor_jtag_debug_module_agent_m0_read;                                       // nios2_processor_jtag_debug_module_agent:m0_read -> nios2_processor_jtag_debug_module_translator:uav_read
	wire         nios2_processor_jtag_debug_module_agent_m0_readdatavalid;                              // nios2_processor_jtag_debug_module_translator:uav_readdatavalid -> nios2_processor_jtag_debug_module_agent:m0_readdatavalid
	wire         nios2_processor_jtag_debug_module_agent_m0_lock;                                       // nios2_processor_jtag_debug_module_agent:m0_lock -> nios2_processor_jtag_debug_module_translator:uav_lock
	wire  [31:0] nios2_processor_jtag_debug_module_agent_m0_writedata;                                  // nios2_processor_jtag_debug_module_agent:m0_writedata -> nios2_processor_jtag_debug_module_translator:uav_writedata
	wire         nios2_processor_jtag_debug_module_agent_m0_write;                                      // nios2_processor_jtag_debug_module_agent:m0_write -> nios2_processor_jtag_debug_module_translator:uav_write
	wire   [2:0] nios2_processor_jtag_debug_module_agent_m0_burstcount;                                 // nios2_processor_jtag_debug_module_agent:m0_burstcount -> nios2_processor_jtag_debug_module_translator:uav_burstcount
	wire         nios2_processor_jtag_debug_module_agent_rf_source_valid;                               // nios2_processor_jtag_debug_module_agent:rf_source_valid -> nios2_processor_jtag_debug_module_agent_rsp_fifo:in_valid
	wire  [99:0] nios2_processor_jtag_debug_module_agent_rf_source_data;                                // nios2_processor_jtag_debug_module_agent:rf_source_data -> nios2_processor_jtag_debug_module_agent_rsp_fifo:in_data
	wire         nios2_processor_jtag_debug_module_agent_rf_source_ready;                               // nios2_processor_jtag_debug_module_agent_rsp_fifo:in_ready -> nios2_processor_jtag_debug_module_agent:rf_source_ready
	wire         nios2_processor_jtag_debug_module_agent_rf_source_startofpacket;                       // nios2_processor_jtag_debug_module_agent:rf_source_startofpacket -> nios2_processor_jtag_debug_module_agent_rsp_fifo:in_startofpacket
	wire         nios2_processor_jtag_debug_module_agent_rf_source_endofpacket;                         // nios2_processor_jtag_debug_module_agent:rf_source_endofpacket -> nios2_processor_jtag_debug_module_agent_rsp_fifo:in_endofpacket
	wire         nios2_processor_jtag_debug_module_agent_rsp_fifo_out_valid;                            // nios2_processor_jtag_debug_module_agent_rsp_fifo:out_valid -> nios2_processor_jtag_debug_module_agent:rf_sink_valid
	wire  [99:0] nios2_processor_jtag_debug_module_agent_rsp_fifo_out_data;                             // nios2_processor_jtag_debug_module_agent_rsp_fifo:out_data -> nios2_processor_jtag_debug_module_agent:rf_sink_data
	wire         nios2_processor_jtag_debug_module_agent_rsp_fifo_out_ready;                            // nios2_processor_jtag_debug_module_agent:rf_sink_ready -> nios2_processor_jtag_debug_module_agent_rsp_fifo:out_ready
	wire         nios2_processor_jtag_debug_module_agent_rsp_fifo_out_startofpacket;                    // nios2_processor_jtag_debug_module_agent_rsp_fifo:out_startofpacket -> nios2_processor_jtag_debug_module_agent:rf_sink_startofpacket
	wire         nios2_processor_jtag_debug_module_agent_rsp_fifo_out_endofpacket;                      // nios2_processor_jtag_debug_module_agent_rsp_fifo:out_endofpacket -> nios2_processor_jtag_debug_module_agent:rf_sink_endofpacket
	wire         cmd_mux_001_src_valid;                                                                 // cmd_mux_001:src_valid -> nios2_processor_jtag_debug_module_agent:cp_valid
	wire  [98:0] cmd_mux_001_src_data;                                                                  // cmd_mux_001:src_data -> nios2_processor_jtag_debug_module_agent:cp_data
	wire         cmd_mux_001_src_ready;                                                                 // nios2_processor_jtag_debug_module_agent:cp_ready -> cmd_mux_001:src_ready
	wire  [19:0] cmd_mux_001_src_channel;                                                               // cmd_mux_001:src_channel -> nios2_processor_jtag_debug_module_agent:cp_channel
	wire         cmd_mux_001_src_startofpacket;                                                         // cmd_mux_001:src_startofpacket -> nios2_processor_jtag_debug_module_agent:cp_startofpacket
	wire         cmd_mux_001_src_endofpacket;                                                           // cmd_mux_001:src_endofpacket -> nios2_processor_jtag_debug_module_agent:cp_endofpacket
	wire  [31:0] onchip_memory_s1_agent_m0_readdata;                                                    // onchip_memory_s1_translator:uav_readdata -> onchip_memory_s1_agent:m0_readdata
	wire         onchip_memory_s1_agent_m0_waitrequest;                                                 // onchip_memory_s1_translator:uav_waitrequest -> onchip_memory_s1_agent:m0_waitrequest
	wire         onchip_memory_s1_agent_m0_debugaccess;                                                 // onchip_memory_s1_agent:m0_debugaccess -> onchip_memory_s1_translator:uav_debugaccess
	wire  [18:0] onchip_memory_s1_agent_m0_address;                                                     // onchip_memory_s1_agent:m0_address -> onchip_memory_s1_translator:uav_address
	wire   [3:0] onchip_memory_s1_agent_m0_byteenable;                                                  // onchip_memory_s1_agent:m0_byteenable -> onchip_memory_s1_translator:uav_byteenable
	wire         onchip_memory_s1_agent_m0_read;                                                        // onchip_memory_s1_agent:m0_read -> onchip_memory_s1_translator:uav_read
	wire         onchip_memory_s1_agent_m0_readdatavalid;                                               // onchip_memory_s1_translator:uav_readdatavalid -> onchip_memory_s1_agent:m0_readdatavalid
	wire         onchip_memory_s1_agent_m0_lock;                                                        // onchip_memory_s1_agent:m0_lock -> onchip_memory_s1_translator:uav_lock
	wire  [31:0] onchip_memory_s1_agent_m0_writedata;                                                   // onchip_memory_s1_agent:m0_writedata -> onchip_memory_s1_translator:uav_writedata
	wire         onchip_memory_s1_agent_m0_write;                                                       // onchip_memory_s1_agent:m0_write -> onchip_memory_s1_translator:uav_write
	wire   [2:0] onchip_memory_s1_agent_m0_burstcount;                                                  // onchip_memory_s1_agent:m0_burstcount -> onchip_memory_s1_translator:uav_burstcount
	wire         onchip_memory_s1_agent_rf_source_valid;                                                // onchip_memory_s1_agent:rf_source_valid -> onchip_memory_s1_agent_rsp_fifo:in_valid
	wire  [99:0] onchip_memory_s1_agent_rf_source_data;                                                 // onchip_memory_s1_agent:rf_source_data -> onchip_memory_s1_agent_rsp_fifo:in_data
	wire         onchip_memory_s1_agent_rf_source_ready;                                                // onchip_memory_s1_agent_rsp_fifo:in_ready -> onchip_memory_s1_agent:rf_source_ready
	wire         onchip_memory_s1_agent_rf_source_startofpacket;                                        // onchip_memory_s1_agent:rf_source_startofpacket -> onchip_memory_s1_agent_rsp_fifo:in_startofpacket
	wire         onchip_memory_s1_agent_rf_source_endofpacket;                                          // onchip_memory_s1_agent:rf_source_endofpacket -> onchip_memory_s1_agent_rsp_fifo:in_endofpacket
	wire         onchip_memory_s1_agent_rsp_fifo_out_valid;                                             // onchip_memory_s1_agent_rsp_fifo:out_valid -> onchip_memory_s1_agent:rf_sink_valid
	wire  [99:0] onchip_memory_s1_agent_rsp_fifo_out_data;                                              // onchip_memory_s1_agent_rsp_fifo:out_data -> onchip_memory_s1_agent:rf_sink_data
	wire         onchip_memory_s1_agent_rsp_fifo_out_ready;                                             // onchip_memory_s1_agent:rf_sink_ready -> onchip_memory_s1_agent_rsp_fifo:out_ready
	wire         onchip_memory_s1_agent_rsp_fifo_out_startofpacket;                                     // onchip_memory_s1_agent_rsp_fifo:out_startofpacket -> onchip_memory_s1_agent:rf_sink_startofpacket
	wire         onchip_memory_s1_agent_rsp_fifo_out_endofpacket;                                       // onchip_memory_s1_agent_rsp_fifo:out_endofpacket -> onchip_memory_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_002_src_valid;                                                                 // cmd_mux_002:src_valid -> onchip_memory_s1_agent:cp_valid
	wire  [98:0] cmd_mux_002_src_data;                                                                  // cmd_mux_002:src_data -> onchip_memory_s1_agent:cp_data
	wire         cmd_mux_002_src_ready;                                                                 // onchip_memory_s1_agent:cp_ready -> cmd_mux_002:src_ready
	wire  [19:0] cmd_mux_002_src_channel;                                                               // cmd_mux_002:src_channel -> onchip_memory_s1_agent:cp_channel
	wire         cmd_mux_002_src_startofpacket;                                                         // cmd_mux_002:src_startofpacket -> onchip_memory_s1_agent:cp_startofpacket
	wire         cmd_mux_002_src_endofpacket;                                                           // cmd_mux_002:src_endofpacket -> onchip_memory_s1_agent:cp_endofpacket
	wire  [31:0] switches_s1_agent_m0_readdata;                                                         // switches_s1_translator:uav_readdata -> switches_s1_agent:m0_readdata
	wire         switches_s1_agent_m0_waitrequest;                                                      // switches_s1_translator:uav_waitrequest -> switches_s1_agent:m0_waitrequest
	wire         switches_s1_agent_m0_debugaccess;                                                      // switches_s1_agent:m0_debugaccess -> switches_s1_translator:uav_debugaccess
	wire  [18:0] switches_s1_agent_m0_address;                                                          // switches_s1_agent:m0_address -> switches_s1_translator:uav_address
	wire   [3:0] switches_s1_agent_m0_byteenable;                                                       // switches_s1_agent:m0_byteenable -> switches_s1_translator:uav_byteenable
	wire         switches_s1_agent_m0_read;                                                             // switches_s1_agent:m0_read -> switches_s1_translator:uav_read
	wire         switches_s1_agent_m0_readdatavalid;                                                    // switches_s1_translator:uav_readdatavalid -> switches_s1_agent:m0_readdatavalid
	wire         switches_s1_agent_m0_lock;                                                             // switches_s1_agent:m0_lock -> switches_s1_translator:uav_lock
	wire  [31:0] switches_s1_agent_m0_writedata;                                                        // switches_s1_agent:m0_writedata -> switches_s1_translator:uav_writedata
	wire         switches_s1_agent_m0_write;                                                            // switches_s1_agent:m0_write -> switches_s1_translator:uav_write
	wire   [2:0] switches_s1_agent_m0_burstcount;                                                       // switches_s1_agent:m0_burstcount -> switches_s1_translator:uav_burstcount
	wire         switches_s1_agent_rf_source_valid;                                                     // switches_s1_agent:rf_source_valid -> switches_s1_agent_rsp_fifo:in_valid
	wire  [99:0] switches_s1_agent_rf_source_data;                                                      // switches_s1_agent:rf_source_data -> switches_s1_agent_rsp_fifo:in_data
	wire         switches_s1_agent_rf_source_ready;                                                     // switches_s1_agent_rsp_fifo:in_ready -> switches_s1_agent:rf_source_ready
	wire         switches_s1_agent_rf_source_startofpacket;                                             // switches_s1_agent:rf_source_startofpacket -> switches_s1_agent_rsp_fifo:in_startofpacket
	wire         switches_s1_agent_rf_source_endofpacket;                                               // switches_s1_agent:rf_source_endofpacket -> switches_s1_agent_rsp_fifo:in_endofpacket
	wire         switches_s1_agent_rsp_fifo_out_valid;                                                  // switches_s1_agent_rsp_fifo:out_valid -> switches_s1_agent:rf_sink_valid
	wire  [99:0] switches_s1_agent_rsp_fifo_out_data;                                                   // switches_s1_agent_rsp_fifo:out_data -> switches_s1_agent:rf_sink_data
	wire         switches_s1_agent_rsp_fifo_out_ready;                                                  // switches_s1_agent:rf_sink_ready -> switches_s1_agent_rsp_fifo:out_ready
	wire         switches_s1_agent_rsp_fifo_out_startofpacket;                                          // switches_s1_agent_rsp_fifo:out_startofpacket -> switches_s1_agent:rf_sink_startofpacket
	wire         switches_s1_agent_rsp_fifo_out_endofpacket;                                            // switches_s1_agent_rsp_fifo:out_endofpacket -> switches_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_003_src_valid;                                                                 // cmd_mux_003:src_valid -> switches_s1_agent:cp_valid
	wire  [98:0] cmd_mux_003_src_data;                                                                  // cmd_mux_003:src_data -> switches_s1_agent:cp_data
	wire         cmd_mux_003_src_ready;                                                                 // switches_s1_agent:cp_ready -> cmd_mux_003:src_ready
	wire  [19:0] cmd_mux_003_src_channel;                                                               // cmd_mux_003:src_channel -> switches_s1_agent:cp_channel
	wire         cmd_mux_003_src_startofpacket;                                                         // cmd_mux_003:src_startofpacket -> switches_s1_agent:cp_startofpacket
	wire         cmd_mux_003_src_endofpacket;                                                           // cmd_mux_003:src_endofpacket -> switches_s1_agent:cp_endofpacket
	wire  [31:0] leds_s1_agent_m0_readdata;                                                             // LEDs_s1_translator:uav_readdata -> LEDs_s1_agent:m0_readdata
	wire         leds_s1_agent_m0_waitrequest;                                                          // LEDs_s1_translator:uav_waitrequest -> LEDs_s1_agent:m0_waitrequest
	wire         leds_s1_agent_m0_debugaccess;                                                          // LEDs_s1_agent:m0_debugaccess -> LEDs_s1_translator:uav_debugaccess
	wire  [18:0] leds_s1_agent_m0_address;                                                              // LEDs_s1_agent:m0_address -> LEDs_s1_translator:uav_address
	wire   [3:0] leds_s1_agent_m0_byteenable;                                                           // LEDs_s1_agent:m0_byteenable -> LEDs_s1_translator:uav_byteenable
	wire         leds_s1_agent_m0_read;                                                                 // LEDs_s1_agent:m0_read -> LEDs_s1_translator:uav_read
	wire         leds_s1_agent_m0_readdatavalid;                                                        // LEDs_s1_translator:uav_readdatavalid -> LEDs_s1_agent:m0_readdatavalid
	wire         leds_s1_agent_m0_lock;                                                                 // LEDs_s1_agent:m0_lock -> LEDs_s1_translator:uav_lock
	wire  [31:0] leds_s1_agent_m0_writedata;                                                            // LEDs_s1_agent:m0_writedata -> LEDs_s1_translator:uav_writedata
	wire         leds_s1_agent_m0_write;                                                                // LEDs_s1_agent:m0_write -> LEDs_s1_translator:uav_write
	wire   [2:0] leds_s1_agent_m0_burstcount;                                                           // LEDs_s1_agent:m0_burstcount -> LEDs_s1_translator:uav_burstcount
	wire         leds_s1_agent_rf_source_valid;                                                         // LEDs_s1_agent:rf_source_valid -> LEDs_s1_agent_rsp_fifo:in_valid
	wire  [99:0] leds_s1_agent_rf_source_data;                                                          // LEDs_s1_agent:rf_source_data -> LEDs_s1_agent_rsp_fifo:in_data
	wire         leds_s1_agent_rf_source_ready;                                                         // LEDs_s1_agent_rsp_fifo:in_ready -> LEDs_s1_agent:rf_source_ready
	wire         leds_s1_agent_rf_source_startofpacket;                                                 // LEDs_s1_agent:rf_source_startofpacket -> LEDs_s1_agent_rsp_fifo:in_startofpacket
	wire         leds_s1_agent_rf_source_endofpacket;                                                   // LEDs_s1_agent:rf_source_endofpacket -> LEDs_s1_agent_rsp_fifo:in_endofpacket
	wire         leds_s1_agent_rsp_fifo_out_valid;                                                      // LEDs_s1_agent_rsp_fifo:out_valid -> LEDs_s1_agent:rf_sink_valid
	wire  [99:0] leds_s1_agent_rsp_fifo_out_data;                                                       // LEDs_s1_agent_rsp_fifo:out_data -> LEDs_s1_agent:rf_sink_data
	wire         leds_s1_agent_rsp_fifo_out_ready;                                                      // LEDs_s1_agent:rf_sink_ready -> LEDs_s1_agent_rsp_fifo:out_ready
	wire         leds_s1_agent_rsp_fifo_out_startofpacket;                                              // LEDs_s1_agent_rsp_fifo:out_startofpacket -> LEDs_s1_agent:rf_sink_startofpacket
	wire         leds_s1_agent_rsp_fifo_out_endofpacket;                                                // LEDs_s1_agent_rsp_fifo:out_endofpacket -> LEDs_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_004_src_valid;                                                                 // cmd_mux_004:src_valid -> LEDs_s1_agent:cp_valid
	wire  [98:0] cmd_mux_004_src_data;                                                                  // cmd_mux_004:src_data -> LEDs_s1_agent:cp_data
	wire         cmd_mux_004_src_ready;                                                                 // LEDs_s1_agent:cp_ready -> cmd_mux_004:src_ready
	wire  [19:0] cmd_mux_004_src_channel;                                                               // cmd_mux_004:src_channel -> LEDs_s1_agent:cp_channel
	wire         cmd_mux_004_src_startofpacket;                                                         // cmd_mux_004:src_startofpacket -> LEDs_s1_agent:cp_startofpacket
	wire         cmd_mux_004_src_endofpacket;                                                           // cmd_mux_004:src_endofpacket -> LEDs_s1_agent:cp_endofpacket
	wire  [31:0] encoderincm_s1_agent_m0_readdata;                                                      // encoderInCM_s1_translator:uav_readdata -> encoderInCM_s1_agent:m0_readdata
	wire         encoderincm_s1_agent_m0_waitrequest;                                                   // encoderInCM_s1_translator:uav_waitrequest -> encoderInCM_s1_agent:m0_waitrequest
	wire         encoderincm_s1_agent_m0_debugaccess;                                                   // encoderInCM_s1_agent:m0_debugaccess -> encoderInCM_s1_translator:uav_debugaccess
	wire  [18:0] encoderincm_s1_agent_m0_address;                                                       // encoderInCM_s1_agent:m0_address -> encoderInCM_s1_translator:uav_address
	wire   [3:0] encoderincm_s1_agent_m0_byteenable;                                                    // encoderInCM_s1_agent:m0_byteenable -> encoderInCM_s1_translator:uav_byteenable
	wire         encoderincm_s1_agent_m0_read;                                                          // encoderInCM_s1_agent:m0_read -> encoderInCM_s1_translator:uav_read
	wire         encoderincm_s1_agent_m0_readdatavalid;                                                 // encoderInCM_s1_translator:uav_readdatavalid -> encoderInCM_s1_agent:m0_readdatavalid
	wire         encoderincm_s1_agent_m0_lock;                                                          // encoderInCM_s1_agent:m0_lock -> encoderInCM_s1_translator:uav_lock
	wire  [31:0] encoderincm_s1_agent_m0_writedata;                                                     // encoderInCM_s1_agent:m0_writedata -> encoderInCM_s1_translator:uav_writedata
	wire         encoderincm_s1_agent_m0_write;                                                         // encoderInCM_s1_agent:m0_write -> encoderInCM_s1_translator:uav_write
	wire   [2:0] encoderincm_s1_agent_m0_burstcount;                                                    // encoderInCM_s1_agent:m0_burstcount -> encoderInCM_s1_translator:uav_burstcount
	wire         encoderincm_s1_agent_rf_source_valid;                                                  // encoderInCM_s1_agent:rf_source_valid -> encoderInCM_s1_agent_rsp_fifo:in_valid
	wire  [99:0] encoderincm_s1_agent_rf_source_data;                                                   // encoderInCM_s1_agent:rf_source_data -> encoderInCM_s1_agent_rsp_fifo:in_data
	wire         encoderincm_s1_agent_rf_source_ready;                                                  // encoderInCM_s1_agent_rsp_fifo:in_ready -> encoderInCM_s1_agent:rf_source_ready
	wire         encoderincm_s1_agent_rf_source_startofpacket;                                          // encoderInCM_s1_agent:rf_source_startofpacket -> encoderInCM_s1_agent_rsp_fifo:in_startofpacket
	wire         encoderincm_s1_agent_rf_source_endofpacket;                                            // encoderInCM_s1_agent:rf_source_endofpacket -> encoderInCM_s1_agent_rsp_fifo:in_endofpacket
	wire         encoderincm_s1_agent_rsp_fifo_out_valid;                                               // encoderInCM_s1_agent_rsp_fifo:out_valid -> encoderInCM_s1_agent:rf_sink_valid
	wire  [99:0] encoderincm_s1_agent_rsp_fifo_out_data;                                                // encoderInCM_s1_agent_rsp_fifo:out_data -> encoderInCM_s1_agent:rf_sink_data
	wire         encoderincm_s1_agent_rsp_fifo_out_ready;                                               // encoderInCM_s1_agent:rf_sink_ready -> encoderInCM_s1_agent_rsp_fifo:out_ready
	wire         encoderincm_s1_agent_rsp_fifo_out_startofpacket;                                       // encoderInCM_s1_agent_rsp_fifo:out_startofpacket -> encoderInCM_s1_agent:rf_sink_startofpacket
	wire         encoderincm_s1_agent_rsp_fifo_out_endofpacket;                                         // encoderInCM_s1_agent_rsp_fifo:out_endofpacket -> encoderInCM_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_005_src_valid;                                                                 // cmd_mux_005:src_valid -> encoderInCM_s1_agent:cp_valid
	wire  [98:0] cmd_mux_005_src_data;                                                                  // cmd_mux_005:src_data -> encoderInCM_s1_agent:cp_data
	wire         cmd_mux_005_src_ready;                                                                 // encoderInCM_s1_agent:cp_ready -> cmd_mux_005:src_ready
	wire  [19:0] cmd_mux_005_src_channel;                                                               // cmd_mux_005:src_channel -> encoderInCM_s1_agent:cp_channel
	wire         cmd_mux_005_src_startofpacket;                                                         // cmd_mux_005:src_startofpacket -> encoderInCM_s1_agent:cp_startofpacket
	wire         cmd_mux_005_src_endofpacket;                                                           // cmd_mux_005:src_endofpacket -> encoderInCM_s1_agent:cp_endofpacket
	wire  [31:0] frsensor_s1_agent_m0_readdata;                                                         // FRSensor_s1_translator:uav_readdata -> FRSensor_s1_agent:m0_readdata
	wire         frsensor_s1_agent_m0_waitrequest;                                                      // FRSensor_s1_translator:uav_waitrequest -> FRSensor_s1_agent:m0_waitrequest
	wire         frsensor_s1_agent_m0_debugaccess;                                                      // FRSensor_s1_agent:m0_debugaccess -> FRSensor_s1_translator:uav_debugaccess
	wire  [18:0] frsensor_s1_agent_m0_address;                                                          // FRSensor_s1_agent:m0_address -> FRSensor_s1_translator:uav_address
	wire   [3:0] frsensor_s1_agent_m0_byteenable;                                                       // FRSensor_s1_agent:m0_byteenable -> FRSensor_s1_translator:uav_byteenable
	wire         frsensor_s1_agent_m0_read;                                                             // FRSensor_s1_agent:m0_read -> FRSensor_s1_translator:uav_read
	wire         frsensor_s1_agent_m0_readdatavalid;                                                    // FRSensor_s1_translator:uav_readdatavalid -> FRSensor_s1_agent:m0_readdatavalid
	wire         frsensor_s1_agent_m0_lock;                                                             // FRSensor_s1_agent:m0_lock -> FRSensor_s1_translator:uav_lock
	wire  [31:0] frsensor_s1_agent_m0_writedata;                                                        // FRSensor_s1_agent:m0_writedata -> FRSensor_s1_translator:uav_writedata
	wire         frsensor_s1_agent_m0_write;                                                            // FRSensor_s1_agent:m0_write -> FRSensor_s1_translator:uav_write
	wire   [2:0] frsensor_s1_agent_m0_burstcount;                                                       // FRSensor_s1_agent:m0_burstcount -> FRSensor_s1_translator:uav_burstcount
	wire         frsensor_s1_agent_rf_source_valid;                                                     // FRSensor_s1_agent:rf_source_valid -> FRSensor_s1_agent_rsp_fifo:in_valid
	wire  [99:0] frsensor_s1_agent_rf_source_data;                                                      // FRSensor_s1_agent:rf_source_data -> FRSensor_s1_agent_rsp_fifo:in_data
	wire         frsensor_s1_agent_rf_source_ready;                                                     // FRSensor_s1_agent_rsp_fifo:in_ready -> FRSensor_s1_agent:rf_source_ready
	wire         frsensor_s1_agent_rf_source_startofpacket;                                             // FRSensor_s1_agent:rf_source_startofpacket -> FRSensor_s1_agent_rsp_fifo:in_startofpacket
	wire         frsensor_s1_agent_rf_source_endofpacket;                                               // FRSensor_s1_agent:rf_source_endofpacket -> FRSensor_s1_agent_rsp_fifo:in_endofpacket
	wire         frsensor_s1_agent_rsp_fifo_out_valid;                                                  // FRSensor_s1_agent_rsp_fifo:out_valid -> FRSensor_s1_agent:rf_sink_valid
	wire  [99:0] frsensor_s1_agent_rsp_fifo_out_data;                                                   // FRSensor_s1_agent_rsp_fifo:out_data -> FRSensor_s1_agent:rf_sink_data
	wire         frsensor_s1_agent_rsp_fifo_out_ready;                                                  // FRSensor_s1_agent:rf_sink_ready -> FRSensor_s1_agent_rsp_fifo:out_ready
	wire         frsensor_s1_agent_rsp_fifo_out_startofpacket;                                          // FRSensor_s1_agent_rsp_fifo:out_startofpacket -> FRSensor_s1_agent:rf_sink_startofpacket
	wire         frsensor_s1_agent_rsp_fifo_out_endofpacket;                                            // FRSensor_s1_agent_rsp_fifo:out_endofpacket -> FRSensor_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_006_src_valid;                                                                 // cmd_mux_006:src_valid -> FRSensor_s1_agent:cp_valid
	wire  [98:0] cmd_mux_006_src_data;                                                                  // cmd_mux_006:src_data -> FRSensor_s1_agent:cp_data
	wire         cmd_mux_006_src_ready;                                                                 // FRSensor_s1_agent:cp_ready -> cmd_mux_006:src_ready
	wire  [19:0] cmd_mux_006_src_channel;                                                               // cmd_mux_006:src_channel -> FRSensor_s1_agent:cp_channel
	wire         cmd_mux_006_src_startofpacket;                                                         // cmd_mux_006:src_startofpacket -> FRSensor_s1_agent:cp_startofpacket
	wire         cmd_mux_006_src_endofpacket;                                                           // cmd_mux_006:src_endofpacket -> FRSensor_s1_agent:cp_endofpacket
	wire  [31:0] flsensor_s1_agent_m0_readdata;                                                         // FLSensor_s1_translator:uav_readdata -> FLSensor_s1_agent:m0_readdata
	wire         flsensor_s1_agent_m0_waitrequest;                                                      // FLSensor_s1_translator:uav_waitrequest -> FLSensor_s1_agent:m0_waitrequest
	wire         flsensor_s1_agent_m0_debugaccess;                                                      // FLSensor_s1_agent:m0_debugaccess -> FLSensor_s1_translator:uav_debugaccess
	wire  [18:0] flsensor_s1_agent_m0_address;                                                          // FLSensor_s1_agent:m0_address -> FLSensor_s1_translator:uav_address
	wire   [3:0] flsensor_s1_agent_m0_byteenable;                                                       // FLSensor_s1_agent:m0_byteenable -> FLSensor_s1_translator:uav_byteenable
	wire         flsensor_s1_agent_m0_read;                                                             // FLSensor_s1_agent:m0_read -> FLSensor_s1_translator:uav_read
	wire         flsensor_s1_agent_m0_readdatavalid;                                                    // FLSensor_s1_translator:uav_readdatavalid -> FLSensor_s1_agent:m0_readdatavalid
	wire         flsensor_s1_agent_m0_lock;                                                             // FLSensor_s1_agent:m0_lock -> FLSensor_s1_translator:uav_lock
	wire  [31:0] flsensor_s1_agent_m0_writedata;                                                        // FLSensor_s1_agent:m0_writedata -> FLSensor_s1_translator:uav_writedata
	wire         flsensor_s1_agent_m0_write;                                                            // FLSensor_s1_agent:m0_write -> FLSensor_s1_translator:uav_write
	wire   [2:0] flsensor_s1_agent_m0_burstcount;                                                       // FLSensor_s1_agent:m0_burstcount -> FLSensor_s1_translator:uav_burstcount
	wire         flsensor_s1_agent_rf_source_valid;                                                     // FLSensor_s1_agent:rf_source_valid -> FLSensor_s1_agent_rsp_fifo:in_valid
	wire  [99:0] flsensor_s1_agent_rf_source_data;                                                      // FLSensor_s1_agent:rf_source_data -> FLSensor_s1_agent_rsp_fifo:in_data
	wire         flsensor_s1_agent_rf_source_ready;                                                     // FLSensor_s1_agent_rsp_fifo:in_ready -> FLSensor_s1_agent:rf_source_ready
	wire         flsensor_s1_agent_rf_source_startofpacket;                                             // FLSensor_s1_agent:rf_source_startofpacket -> FLSensor_s1_agent_rsp_fifo:in_startofpacket
	wire         flsensor_s1_agent_rf_source_endofpacket;                                               // FLSensor_s1_agent:rf_source_endofpacket -> FLSensor_s1_agent_rsp_fifo:in_endofpacket
	wire         flsensor_s1_agent_rsp_fifo_out_valid;                                                  // FLSensor_s1_agent_rsp_fifo:out_valid -> FLSensor_s1_agent:rf_sink_valid
	wire  [99:0] flsensor_s1_agent_rsp_fifo_out_data;                                                   // FLSensor_s1_agent_rsp_fifo:out_data -> FLSensor_s1_agent:rf_sink_data
	wire         flsensor_s1_agent_rsp_fifo_out_ready;                                                  // FLSensor_s1_agent:rf_sink_ready -> FLSensor_s1_agent_rsp_fifo:out_ready
	wire         flsensor_s1_agent_rsp_fifo_out_startofpacket;                                          // FLSensor_s1_agent_rsp_fifo:out_startofpacket -> FLSensor_s1_agent:rf_sink_startofpacket
	wire         flsensor_s1_agent_rsp_fifo_out_endofpacket;                                            // FLSensor_s1_agent_rsp_fifo:out_endofpacket -> FLSensor_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_007_src_valid;                                                                 // cmd_mux_007:src_valid -> FLSensor_s1_agent:cp_valid
	wire  [98:0] cmd_mux_007_src_data;                                                                  // cmd_mux_007:src_data -> FLSensor_s1_agent:cp_data
	wire         cmd_mux_007_src_ready;                                                                 // FLSensor_s1_agent:cp_ready -> cmd_mux_007:src_ready
	wire  [19:0] cmd_mux_007_src_channel;                                                               // cmd_mux_007:src_channel -> FLSensor_s1_agent:cp_channel
	wire         cmd_mux_007_src_startofpacket;                                                         // cmd_mux_007:src_startofpacket -> FLSensor_s1_agent:cp_startofpacket
	wire         cmd_mux_007_src_endofpacket;                                                           // cmd_mux_007:src_endofpacket -> FLSensor_s1_agent:cp_endofpacket
	wire  [31:0] lsensor_s1_agent_m0_readdata;                                                          // LSensor_s1_translator:uav_readdata -> LSensor_s1_agent:m0_readdata
	wire         lsensor_s1_agent_m0_waitrequest;                                                       // LSensor_s1_translator:uav_waitrequest -> LSensor_s1_agent:m0_waitrequest
	wire         lsensor_s1_agent_m0_debugaccess;                                                       // LSensor_s1_agent:m0_debugaccess -> LSensor_s1_translator:uav_debugaccess
	wire  [18:0] lsensor_s1_agent_m0_address;                                                           // LSensor_s1_agent:m0_address -> LSensor_s1_translator:uav_address
	wire   [3:0] lsensor_s1_agent_m0_byteenable;                                                        // LSensor_s1_agent:m0_byteenable -> LSensor_s1_translator:uav_byteenable
	wire         lsensor_s1_agent_m0_read;                                                              // LSensor_s1_agent:m0_read -> LSensor_s1_translator:uav_read
	wire         lsensor_s1_agent_m0_readdatavalid;                                                     // LSensor_s1_translator:uav_readdatavalid -> LSensor_s1_agent:m0_readdatavalid
	wire         lsensor_s1_agent_m0_lock;                                                              // LSensor_s1_agent:m0_lock -> LSensor_s1_translator:uav_lock
	wire  [31:0] lsensor_s1_agent_m0_writedata;                                                         // LSensor_s1_agent:m0_writedata -> LSensor_s1_translator:uav_writedata
	wire         lsensor_s1_agent_m0_write;                                                             // LSensor_s1_agent:m0_write -> LSensor_s1_translator:uav_write
	wire   [2:0] lsensor_s1_agent_m0_burstcount;                                                        // LSensor_s1_agent:m0_burstcount -> LSensor_s1_translator:uav_burstcount
	wire         lsensor_s1_agent_rf_source_valid;                                                      // LSensor_s1_agent:rf_source_valid -> LSensor_s1_agent_rsp_fifo:in_valid
	wire  [99:0] lsensor_s1_agent_rf_source_data;                                                       // LSensor_s1_agent:rf_source_data -> LSensor_s1_agent_rsp_fifo:in_data
	wire         lsensor_s1_agent_rf_source_ready;                                                      // LSensor_s1_agent_rsp_fifo:in_ready -> LSensor_s1_agent:rf_source_ready
	wire         lsensor_s1_agent_rf_source_startofpacket;                                              // LSensor_s1_agent:rf_source_startofpacket -> LSensor_s1_agent_rsp_fifo:in_startofpacket
	wire         lsensor_s1_agent_rf_source_endofpacket;                                                // LSensor_s1_agent:rf_source_endofpacket -> LSensor_s1_agent_rsp_fifo:in_endofpacket
	wire         lsensor_s1_agent_rsp_fifo_out_valid;                                                   // LSensor_s1_agent_rsp_fifo:out_valid -> LSensor_s1_agent:rf_sink_valid
	wire  [99:0] lsensor_s1_agent_rsp_fifo_out_data;                                                    // LSensor_s1_agent_rsp_fifo:out_data -> LSensor_s1_agent:rf_sink_data
	wire         lsensor_s1_agent_rsp_fifo_out_ready;                                                   // LSensor_s1_agent:rf_sink_ready -> LSensor_s1_agent_rsp_fifo:out_ready
	wire         lsensor_s1_agent_rsp_fifo_out_startofpacket;                                           // LSensor_s1_agent_rsp_fifo:out_startofpacket -> LSensor_s1_agent:rf_sink_startofpacket
	wire         lsensor_s1_agent_rsp_fifo_out_endofpacket;                                             // LSensor_s1_agent_rsp_fifo:out_endofpacket -> LSensor_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_008_src_valid;                                                                 // cmd_mux_008:src_valid -> LSensor_s1_agent:cp_valid
	wire  [98:0] cmd_mux_008_src_data;                                                                  // cmd_mux_008:src_data -> LSensor_s1_agent:cp_data
	wire         cmd_mux_008_src_ready;                                                                 // LSensor_s1_agent:cp_ready -> cmd_mux_008:src_ready
	wire  [19:0] cmd_mux_008_src_channel;                                                               // cmd_mux_008:src_channel -> LSensor_s1_agent:cp_channel
	wire         cmd_mux_008_src_startofpacket;                                                         // cmd_mux_008:src_startofpacket -> LSensor_s1_agent:cp_startofpacket
	wire         cmd_mux_008_src_endofpacket;                                                           // cmd_mux_008:src_endofpacket -> LSensor_s1_agent:cp_endofpacket
	wire  [31:0] rsensor_s1_agent_m0_readdata;                                                          // RSensor_s1_translator:uav_readdata -> RSensor_s1_agent:m0_readdata
	wire         rsensor_s1_agent_m0_waitrequest;                                                       // RSensor_s1_translator:uav_waitrequest -> RSensor_s1_agent:m0_waitrequest
	wire         rsensor_s1_agent_m0_debugaccess;                                                       // RSensor_s1_agent:m0_debugaccess -> RSensor_s1_translator:uav_debugaccess
	wire  [18:0] rsensor_s1_agent_m0_address;                                                           // RSensor_s1_agent:m0_address -> RSensor_s1_translator:uav_address
	wire   [3:0] rsensor_s1_agent_m0_byteenable;                                                        // RSensor_s1_agent:m0_byteenable -> RSensor_s1_translator:uav_byteenable
	wire         rsensor_s1_agent_m0_read;                                                              // RSensor_s1_agent:m0_read -> RSensor_s1_translator:uav_read
	wire         rsensor_s1_agent_m0_readdatavalid;                                                     // RSensor_s1_translator:uav_readdatavalid -> RSensor_s1_agent:m0_readdatavalid
	wire         rsensor_s1_agent_m0_lock;                                                              // RSensor_s1_agent:m0_lock -> RSensor_s1_translator:uav_lock
	wire  [31:0] rsensor_s1_agent_m0_writedata;                                                         // RSensor_s1_agent:m0_writedata -> RSensor_s1_translator:uav_writedata
	wire         rsensor_s1_agent_m0_write;                                                             // RSensor_s1_agent:m0_write -> RSensor_s1_translator:uav_write
	wire   [2:0] rsensor_s1_agent_m0_burstcount;                                                        // RSensor_s1_agent:m0_burstcount -> RSensor_s1_translator:uav_burstcount
	wire         rsensor_s1_agent_rf_source_valid;                                                      // RSensor_s1_agent:rf_source_valid -> RSensor_s1_agent_rsp_fifo:in_valid
	wire  [99:0] rsensor_s1_agent_rf_source_data;                                                       // RSensor_s1_agent:rf_source_data -> RSensor_s1_agent_rsp_fifo:in_data
	wire         rsensor_s1_agent_rf_source_ready;                                                      // RSensor_s1_agent_rsp_fifo:in_ready -> RSensor_s1_agent:rf_source_ready
	wire         rsensor_s1_agent_rf_source_startofpacket;                                              // RSensor_s1_agent:rf_source_startofpacket -> RSensor_s1_agent_rsp_fifo:in_startofpacket
	wire         rsensor_s1_agent_rf_source_endofpacket;                                                // RSensor_s1_agent:rf_source_endofpacket -> RSensor_s1_agent_rsp_fifo:in_endofpacket
	wire         rsensor_s1_agent_rsp_fifo_out_valid;                                                   // RSensor_s1_agent_rsp_fifo:out_valid -> RSensor_s1_agent:rf_sink_valid
	wire  [99:0] rsensor_s1_agent_rsp_fifo_out_data;                                                    // RSensor_s1_agent_rsp_fifo:out_data -> RSensor_s1_agent:rf_sink_data
	wire         rsensor_s1_agent_rsp_fifo_out_ready;                                                   // RSensor_s1_agent:rf_sink_ready -> RSensor_s1_agent_rsp_fifo:out_ready
	wire         rsensor_s1_agent_rsp_fifo_out_startofpacket;                                           // RSensor_s1_agent_rsp_fifo:out_startofpacket -> RSensor_s1_agent:rf_sink_startofpacket
	wire         rsensor_s1_agent_rsp_fifo_out_endofpacket;                                             // RSensor_s1_agent_rsp_fifo:out_endofpacket -> RSensor_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_009_src_valid;                                                                 // cmd_mux_009:src_valid -> RSensor_s1_agent:cp_valid
	wire  [98:0] cmd_mux_009_src_data;                                                                  // cmd_mux_009:src_data -> RSensor_s1_agent:cp_data
	wire         cmd_mux_009_src_ready;                                                                 // RSensor_s1_agent:cp_ready -> cmd_mux_009:src_ready
	wire  [19:0] cmd_mux_009_src_channel;                                                               // cmd_mux_009:src_channel -> RSensor_s1_agent:cp_channel
	wire         cmd_mux_009_src_startofpacket;                                                         // cmd_mux_009:src_startofpacket -> RSensor_s1_agent:cp_startofpacket
	wire         cmd_mux_009_src_endofpacket;                                                           // cmd_mux_009:src_endofpacket -> RSensor_s1_agent:cp_endofpacket
	wire  [31:0] blsensor_s1_agent_m0_readdata;                                                         // BLSensor_s1_translator:uav_readdata -> BLSensor_s1_agent:m0_readdata
	wire         blsensor_s1_agent_m0_waitrequest;                                                      // BLSensor_s1_translator:uav_waitrequest -> BLSensor_s1_agent:m0_waitrequest
	wire         blsensor_s1_agent_m0_debugaccess;                                                      // BLSensor_s1_agent:m0_debugaccess -> BLSensor_s1_translator:uav_debugaccess
	wire  [18:0] blsensor_s1_agent_m0_address;                                                          // BLSensor_s1_agent:m0_address -> BLSensor_s1_translator:uav_address
	wire   [3:0] blsensor_s1_agent_m0_byteenable;                                                       // BLSensor_s1_agent:m0_byteenable -> BLSensor_s1_translator:uav_byteenable
	wire         blsensor_s1_agent_m0_read;                                                             // BLSensor_s1_agent:m0_read -> BLSensor_s1_translator:uav_read
	wire         blsensor_s1_agent_m0_readdatavalid;                                                    // BLSensor_s1_translator:uav_readdatavalid -> BLSensor_s1_agent:m0_readdatavalid
	wire         blsensor_s1_agent_m0_lock;                                                             // BLSensor_s1_agent:m0_lock -> BLSensor_s1_translator:uav_lock
	wire  [31:0] blsensor_s1_agent_m0_writedata;                                                        // BLSensor_s1_agent:m0_writedata -> BLSensor_s1_translator:uav_writedata
	wire         blsensor_s1_agent_m0_write;                                                            // BLSensor_s1_agent:m0_write -> BLSensor_s1_translator:uav_write
	wire   [2:0] blsensor_s1_agent_m0_burstcount;                                                       // BLSensor_s1_agent:m0_burstcount -> BLSensor_s1_translator:uav_burstcount
	wire         blsensor_s1_agent_rf_source_valid;                                                     // BLSensor_s1_agent:rf_source_valid -> BLSensor_s1_agent_rsp_fifo:in_valid
	wire  [99:0] blsensor_s1_agent_rf_source_data;                                                      // BLSensor_s1_agent:rf_source_data -> BLSensor_s1_agent_rsp_fifo:in_data
	wire         blsensor_s1_agent_rf_source_ready;                                                     // BLSensor_s1_agent_rsp_fifo:in_ready -> BLSensor_s1_agent:rf_source_ready
	wire         blsensor_s1_agent_rf_source_startofpacket;                                             // BLSensor_s1_agent:rf_source_startofpacket -> BLSensor_s1_agent_rsp_fifo:in_startofpacket
	wire         blsensor_s1_agent_rf_source_endofpacket;                                               // BLSensor_s1_agent:rf_source_endofpacket -> BLSensor_s1_agent_rsp_fifo:in_endofpacket
	wire         blsensor_s1_agent_rsp_fifo_out_valid;                                                  // BLSensor_s1_agent_rsp_fifo:out_valid -> BLSensor_s1_agent:rf_sink_valid
	wire  [99:0] blsensor_s1_agent_rsp_fifo_out_data;                                                   // BLSensor_s1_agent_rsp_fifo:out_data -> BLSensor_s1_agent:rf_sink_data
	wire         blsensor_s1_agent_rsp_fifo_out_ready;                                                  // BLSensor_s1_agent:rf_sink_ready -> BLSensor_s1_agent_rsp_fifo:out_ready
	wire         blsensor_s1_agent_rsp_fifo_out_startofpacket;                                          // BLSensor_s1_agent_rsp_fifo:out_startofpacket -> BLSensor_s1_agent:rf_sink_startofpacket
	wire         blsensor_s1_agent_rsp_fifo_out_endofpacket;                                            // BLSensor_s1_agent_rsp_fifo:out_endofpacket -> BLSensor_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_010_src_valid;                                                                 // cmd_mux_010:src_valid -> BLSensor_s1_agent:cp_valid
	wire  [98:0] cmd_mux_010_src_data;                                                                  // cmd_mux_010:src_data -> BLSensor_s1_agent:cp_data
	wire         cmd_mux_010_src_ready;                                                                 // BLSensor_s1_agent:cp_ready -> cmd_mux_010:src_ready
	wire  [19:0] cmd_mux_010_src_channel;                                                               // cmd_mux_010:src_channel -> BLSensor_s1_agent:cp_channel
	wire         cmd_mux_010_src_startofpacket;                                                         // cmd_mux_010:src_startofpacket -> BLSensor_s1_agent:cp_startofpacket
	wire         cmd_mux_010_src_endofpacket;                                                           // cmd_mux_010:src_endofpacket -> BLSensor_s1_agent:cp_endofpacket
	wire  [31:0] drivespeed_s1_agent_m0_readdata;                                                       // driveSpeed_s1_translator:uav_readdata -> driveSpeed_s1_agent:m0_readdata
	wire         drivespeed_s1_agent_m0_waitrequest;                                                    // driveSpeed_s1_translator:uav_waitrequest -> driveSpeed_s1_agent:m0_waitrequest
	wire         drivespeed_s1_agent_m0_debugaccess;                                                    // driveSpeed_s1_agent:m0_debugaccess -> driveSpeed_s1_translator:uav_debugaccess
	wire  [18:0] drivespeed_s1_agent_m0_address;                                                        // driveSpeed_s1_agent:m0_address -> driveSpeed_s1_translator:uav_address
	wire   [3:0] drivespeed_s1_agent_m0_byteenable;                                                     // driveSpeed_s1_agent:m0_byteenable -> driveSpeed_s1_translator:uav_byteenable
	wire         drivespeed_s1_agent_m0_read;                                                           // driveSpeed_s1_agent:m0_read -> driveSpeed_s1_translator:uav_read
	wire         drivespeed_s1_agent_m0_readdatavalid;                                                  // driveSpeed_s1_translator:uav_readdatavalid -> driveSpeed_s1_agent:m0_readdatavalid
	wire         drivespeed_s1_agent_m0_lock;                                                           // driveSpeed_s1_agent:m0_lock -> driveSpeed_s1_translator:uav_lock
	wire  [31:0] drivespeed_s1_agent_m0_writedata;                                                      // driveSpeed_s1_agent:m0_writedata -> driveSpeed_s1_translator:uav_writedata
	wire         drivespeed_s1_agent_m0_write;                                                          // driveSpeed_s1_agent:m0_write -> driveSpeed_s1_translator:uav_write
	wire   [2:0] drivespeed_s1_agent_m0_burstcount;                                                     // driveSpeed_s1_agent:m0_burstcount -> driveSpeed_s1_translator:uav_burstcount
	wire         drivespeed_s1_agent_rf_source_valid;                                                   // driveSpeed_s1_agent:rf_source_valid -> driveSpeed_s1_agent_rsp_fifo:in_valid
	wire  [99:0] drivespeed_s1_agent_rf_source_data;                                                    // driveSpeed_s1_agent:rf_source_data -> driveSpeed_s1_agent_rsp_fifo:in_data
	wire         drivespeed_s1_agent_rf_source_ready;                                                   // driveSpeed_s1_agent_rsp_fifo:in_ready -> driveSpeed_s1_agent:rf_source_ready
	wire         drivespeed_s1_agent_rf_source_startofpacket;                                           // driveSpeed_s1_agent:rf_source_startofpacket -> driveSpeed_s1_agent_rsp_fifo:in_startofpacket
	wire         drivespeed_s1_agent_rf_source_endofpacket;                                             // driveSpeed_s1_agent:rf_source_endofpacket -> driveSpeed_s1_agent_rsp_fifo:in_endofpacket
	wire         drivespeed_s1_agent_rsp_fifo_out_valid;                                                // driveSpeed_s1_agent_rsp_fifo:out_valid -> driveSpeed_s1_agent:rf_sink_valid
	wire  [99:0] drivespeed_s1_agent_rsp_fifo_out_data;                                                 // driveSpeed_s1_agent_rsp_fifo:out_data -> driveSpeed_s1_agent:rf_sink_data
	wire         drivespeed_s1_agent_rsp_fifo_out_ready;                                                // driveSpeed_s1_agent:rf_sink_ready -> driveSpeed_s1_agent_rsp_fifo:out_ready
	wire         drivespeed_s1_agent_rsp_fifo_out_startofpacket;                                        // driveSpeed_s1_agent_rsp_fifo:out_startofpacket -> driveSpeed_s1_agent:rf_sink_startofpacket
	wire         drivespeed_s1_agent_rsp_fifo_out_endofpacket;                                          // driveSpeed_s1_agent_rsp_fifo:out_endofpacket -> driveSpeed_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_011_src_valid;                                                                 // cmd_mux_011:src_valid -> driveSpeed_s1_agent:cp_valid
	wire  [98:0] cmd_mux_011_src_data;                                                                  // cmd_mux_011:src_data -> driveSpeed_s1_agent:cp_data
	wire         cmd_mux_011_src_ready;                                                                 // driveSpeed_s1_agent:cp_ready -> cmd_mux_011:src_ready
	wire  [19:0] cmd_mux_011_src_channel;                                                               // cmd_mux_011:src_channel -> driveSpeed_s1_agent:cp_channel
	wire         cmd_mux_011_src_startofpacket;                                                         // cmd_mux_011:src_startofpacket -> driveSpeed_s1_agent:cp_startofpacket
	wire         cmd_mux_011_src_endofpacket;                                                           // cmd_mux_011:src_endofpacket -> driveSpeed_s1_agent:cp_endofpacket
	wire  [31:0] brsensor_s1_agent_m0_readdata;                                                         // BRSensor_s1_translator:uav_readdata -> BRSensor_s1_agent:m0_readdata
	wire         brsensor_s1_agent_m0_waitrequest;                                                      // BRSensor_s1_translator:uav_waitrequest -> BRSensor_s1_agent:m0_waitrequest
	wire         brsensor_s1_agent_m0_debugaccess;                                                      // BRSensor_s1_agent:m0_debugaccess -> BRSensor_s1_translator:uav_debugaccess
	wire  [18:0] brsensor_s1_agent_m0_address;                                                          // BRSensor_s1_agent:m0_address -> BRSensor_s1_translator:uav_address
	wire   [3:0] brsensor_s1_agent_m0_byteenable;                                                       // BRSensor_s1_agent:m0_byteenable -> BRSensor_s1_translator:uav_byteenable
	wire         brsensor_s1_agent_m0_read;                                                             // BRSensor_s1_agent:m0_read -> BRSensor_s1_translator:uav_read
	wire         brsensor_s1_agent_m0_readdatavalid;                                                    // BRSensor_s1_translator:uav_readdatavalid -> BRSensor_s1_agent:m0_readdatavalid
	wire         brsensor_s1_agent_m0_lock;                                                             // BRSensor_s1_agent:m0_lock -> BRSensor_s1_translator:uav_lock
	wire  [31:0] brsensor_s1_agent_m0_writedata;                                                        // BRSensor_s1_agent:m0_writedata -> BRSensor_s1_translator:uav_writedata
	wire         brsensor_s1_agent_m0_write;                                                            // BRSensor_s1_agent:m0_write -> BRSensor_s1_translator:uav_write
	wire   [2:0] brsensor_s1_agent_m0_burstcount;                                                       // BRSensor_s1_agent:m0_burstcount -> BRSensor_s1_translator:uav_burstcount
	wire         brsensor_s1_agent_rf_source_valid;                                                     // BRSensor_s1_agent:rf_source_valid -> BRSensor_s1_agent_rsp_fifo:in_valid
	wire  [99:0] brsensor_s1_agent_rf_source_data;                                                      // BRSensor_s1_agent:rf_source_data -> BRSensor_s1_agent_rsp_fifo:in_data
	wire         brsensor_s1_agent_rf_source_ready;                                                     // BRSensor_s1_agent_rsp_fifo:in_ready -> BRSensor_s1_agent:rf_source_ready
	wire         brsensor_s1_agent_rf_source_startofpacket;                                             // BRSensor_s1_agent:rf_source_startofpacket -> BRSensor_s1_agent_rsp_fifo:in_startofpacket
	wire         brsensor_s1_agent_rf_source_endofpacket;                                               // BRSensor_s1_agent:rf_source_endofpacket -> BRSensor_s1_agent_rsp_fifo:in_endofpacket
	wire         brsensor_s1_agent_rsp_fifo_out_valid;                                                  // BRSensor_s1_agent_rsp_fifo:out_valid -> BRSensor_s1_agent:rf_sink_valid
	wire  [99:0] brsensor_s1_agent_rsp_fifo_out_data;                                                   // BRSensor_s1_agent_rsp_fifo:out_data -> BRSensor_s1_agent:rf_sink_data
	wire         brsensor_s1_agent_rsp_fifo_out_ready;                                                  // BRSensor_s1_agent:rf_sink_ready -> BRSensor_s1_agent_rsp_fifo:out_ready
	wire         brsensor_s1_agent_rsp_fifo_out_startofpacket;                                          // BRSensor_s1_agent_rsp_fifo:out_startofpacket -> BRSensor_s1_agent:rf_sink_startofpacket
	wire         brsensor_s1_agent_rsp_fifo_out_endofpacket;                                            // BRSensor_s1_agent_rsp_fifo:out_endofpacket -> BRSensor_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_012_src_valid;                                                                 // cmd_mux_012:src_valid -> BRSensor_s1_agent:cp_valid
	wire  [98:0] cmd_mux_012_src_data;                                                                  // cmd_mux_012:src_data -> BRSensor_s1_agent:cp_data
	wire         cmd_mux_012_src_ready;                                                                 // BRSensor_s1_agent:cp_ready -> cmd_mux_012:src_ready
	wire  [19:0] cmd_mux_012_src_channel;                                                               // cmd_mux_012:src_channel -> BRSensor_s1_agent:cp_channel
	wire         cmd_mux_012_src_startofpacket;                                                         // cmd_mux_012:src_startofpacket -> BRSensor_s1_agent:cp_startofpacket
	wire         cmd_mux_012_src_endofpacket;                                                           // cmd_mux_012:src_endofpacket -> BRSensor_s1_agent:cp_endofpacket
	wire  [31:0] targetdirection_s1_agent_m0_readdata;                                                  // targetDirection_s1_translator:uav_readdata -> targetDirection_s1_agent:m0_readdata
	wire         targetdirection_s1_agent_m0_waitrequest;                                               // targetDirection_s1_translator:uav_waitrequest -> targetDirection_s1_agent:m0_waitrequest
	wire         targetdirection_s1_agent_m0_debugaccess;                                               // targetDirection_s1_agent:m0_debugaccess -> targetDirection_s1_translator:uav_debugaccess
	wire  [18:0] targetdirection_s1_agent_m0_address;                                                   // targetDirection_s1_agent:m0_address -> targetDirection_s1_translator:uav_address
	wire   [3:0] targetdirection_s1_agent_m0_byteenable;                                                // targetDirection_s1_agent:m0_byteenable -> targetDirection_s1_translator:uav_byteenable
	wire         targetdirection_s1_agent_m0_read;                                                      // targetDirection_s1_agent:m0_read -> targetDirection_s1_translator:uav_read
	wire         targetdirection_s1_agent_m0_readdatavalid;                                             // targetDirection_s1_translator:uav_readdatavalid -> targetDirection_s1_agent:m0_readdatavalid
	wire         targetdirection_s1_agent_m0_lock;                                                      // targetDirection_s1_agent:m0_lock -> targetDirection_s1_translator:uav_lock
	wire  [31:0] targetdirection_s1_agent_m0_writedata;                                                 // targetDirection_s1_agent:m0_writedata -> targetDirection_s1_translator:uav_writedata
	wire         targetdirection_s1_agent_m0_write;                                                     // targetDirection_s1_agent:m0_write -> targetDirection_s1_translator:uav_write
	wire   [2:0] targetdirection_s1_agent_m0_burstcount;                                                // targetDirection_s1_agent:m0_burstcount -> targetDirection_s1_translator:uav_burstcount
	wire         targetdirection_s1_agent_rf_source_valid;                                              // targetDirection_s1_agent:rf_source_valid -> targetDirection_s1_agent_rsp_fifo:in_valid
	wire  [99:0] targetdirection_s1_agent_rf_source_data;                                               // targetDirection_s1_agent:rf_source_data -> targetDirection_s1_agent_rsp_fifo:in_data
	wire         targetdirection_s1_agent_rf_source_ready;                                              // targetDirection_s1_agent_rsp_fifo:in_ready -> targetDirection_s1_agent:rf_source_ready
	wire         targetdirection_s1_agent_rf_source_startofpacket;                                      // targetDirection_s1_agent:rf_source_startofpacket -> targetDirection_s1_agent_rsp_fifo:in_startofpacket
	wire         targetdirection_s1_agent_rf_source_endofpacket;                                        // targetDirection_s1_agent:rf_source_endofpacket -> targetDirection_s1_agent_rsp_fifo:in_endofpacket
	wire         targetdirection_s1_agent_rsp_fifo_out_valid;                                           // targetDirection_s1_agent_rsp_fifo:out_valid -> targetDirection_s1_agent:rf_sink_valid
	wire  [99:0] targetdirection_s1_agent_rsp_fifo_out_data;                                            // targetDirection_s1_agent_rsp_fifo:out_data -> targetDirection_s1_agent:rf_sink_data
	wire         targetdirection_s1_agent_rsp_fifo_out_ready;                                           // targetDirection_s1_agent:rf_sink_ready -> targetDirection_s1_agent_rsp_fifo:out_ready
	wire         targetdirection_s1_agent_rsp_fifo_out_startofpacket;                                   // targetDirection_s1_agent_rsp_fifo:out_startofpacket -> targetDirection_s1_agent:rf_sink_startofpacket
	wire         targetdirection_s1_agent_rsp_fifo_out_endofpacket;                                     // targetDirection_s1_agent_rsp_fifo:out_endofpacket -> targetDirection_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_013_src_valid;                                                                 // cmd_mux_013:src_valid -> targetDirection_s1_agent:cp_valid
	wire  [98:0] cmd_mux_013_src_data;                                                                  // cmd_mux_013:src_data -> targetDirection_s1_agent:cp_data
	wire         cmd_mux_013_src_ready;                                                                 // targetDirection_s1_agent:cp_ready -> cmd_mux_013:src_ready
	wire  [19:0] cmd_mux_013_src_channel;                                                               // cmd_mux_013:src_channel -> targetDirection_s1_agent:cp_channel
	wire         cmd_mux_013_src_startofpacket;                                                         // cmd_mux_013:src_startofpacket -> targetDirection_s1_agent:cp_startofpacket
	wire         cmd_mux_013_src_endofpacket;                                                           // cmd_mux_013:src_endofpacket -> targetDirection_s1_agent:cp_endofpacket
	wire  [31:0] redlight_s1_agent_m0_readdata;                                                         // redlight_s1_translator:uav_readdata -> redlight_s1_agent:m0_readdata
	wire         redlight_s1_agent_m0_waitrequest;                                                      // redlight_s1_translator:uav_waitrequest -> redlight_s1_agent:m0_waitrequest
	wire         redlight_s1_agent_m0_debugaccess;                                                      // redlight_s1_agent:m0_debugaccess -> redlight_s1_translator:uav_debugaccess
	wire  [18:0] redlight_s1_agent_m0_address;                                                          // redlight_s1_agent:m0_address -> redlight_s1_translator:uav_address
	wire   [3:0] redlight_s1_agent_m0_byteenable;                                                       // redlight_s1_agent:m0_byteenable -> redlight_s1_translator:uav_byteenable
	wire         redlight_s1_agent_m0_read;                                                             // redlight_s1_agent:m0_read -> redlight_s1_translator:uav_read
	wire         redlight_s1_agent_m0_readdatavalid;                                                    // redlight_s1_translator:uav_readdatavalid -> redlight_s1_agent:m0_readdatavalid
	wire         redlight_s1_agent_m0_lock;                                                             // redlight_s1_agent:m0_lock -> redlight_s1_translator:uav_lock
	wire  [31:0] redlight_s1_agent_m0_writedata;                                                        // redlight_s1_agent:m0_writedata -> redlight_s1_translator:uav_writedata
	wire         redlight_s1_agent_m0_write;                                                            // redlight_s1_agent:m0_write -> redlight_s1_translator:uav_write
	wire   [2:0] redlight_s1_agent_m0_burstcount;                                                       // redlight_s1_agent:m0_burstcount -> redlight_s1_translator:uav_burstcount
	wire         redlight_s1_agent_rf_source_valid;                                                     // redlight_s1_agent:rf_source_valid -> redlight_s1_agent_rsp_fifo:in_valid
	wire  [99:0] redlight_s1_agent_rf_source_data;                                                      // redlight_s1_agent:rf_source_data -> redlight_s1_agent_rsp_fifo:in_data
	wire         redlight_s1_agent_rf_source_ready;                                                     // redlight_s1_agent_rsp_fifo:in_ready -> redlight_s1_agent:rf_source_ready
	wire         redlight_s1_agent_rf_source_startofpacket;                                             // redlight_s1_agent:rf_source_startofpacket -> redlight_s1_agent_rsp_fifo:in_startofpacket
	wire         redlight_s1_agent_rf_source_endofpacket;                                               // redlight_s1_agent:rf_source_endofpacket -> redlight_s1_agent_rsp_fifo:in_endofpacket
	wire         redlight_s1_agent_rsp_fifo_out_valid;                                                  // redlight_s1_agent_rsp_fifo:out_valid -> redlight_s1_agent:rf_sink_valid
	wire  [99:0] redlight_s1_agent_rsp_fifo_out_data;                                                   // redlight_s1_agent_rsp_fifo:out_data -> redlight_s1_agent:rf_sink_data
	wire         redlight_s1_agent_rsp_fifo_out_ready;                                                  // redlight_s1_agent:rf_sink_ready -> redlight_s1_agent_rsp_fifo:out_ready
	wire         redlight_s1_agent_rsp_fifo_out_startofpacket;                                          // redlight_s1_agent_rsp_fifo:out_startofpacket -> redlight_s1_agent:rf_sink_startofpacket
	wire         redlight_s1_agent_rsp_fifo_out_endofpacket;                                            // redlight_s1_agent_rsp_fifo:out_endofpacket -> redlight_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_014_src_valid;                                                                 // cmd_mux_014:src_valid -> redlight_s1_agent:cp_valid
	wire  [98:0] cmd_mux_014_src_data;                                                                  // cmd_mux_014:src_data -> redlight_s1_agent:cp_data
	wire         cmd_mux_014_src_ready;                                                                 // redlight_s1_agent:cp_ready -> cmd_mux_014:src_ready
	wire  [19:0] cmd_mux_014_src_channel;                                                               // cmd_mux_014:src_channel -> redlight_s1_agent:cp_channel
	wire         cmd_mux_014_src_startofpacket;                                                         // cmd_mux_014:src_startofpacket -> redlight_s1_agent:cp_startofpacket
	wire         cmd_mux_014_src_endofpacket;                                                           // cmd_mux_014:src_endofpacket -> redlight_s1_agent:cp_endofpacket
	wire  [31:0] yellowlight_s1_agent_m0_readdata;                                                      // yellowlight_s1_translator:uav_readdata -> yellowlight_s1_agent:m0_readdata
	wire         yellowlight_s1_agent_m0_waitrequest;                                                   // yellowlight_s1_translator:uav_waitrequest -> yellowlight_s1_agent:m0_waitrequest
	wire         yellowlight_s1_agent_m0_debugaccess;                                                   // yellowlight_s1_agent:m0_debugaccess -> yellowlight_s1_translator:uav_debugaccess
	wire  [18:0] yellowlight_s1_agent_m0_address;                                                       // yellowlight_s1_agent:m0_address -> yellowlight_s1_translator:uav_address
	wire   [3:0] yellowlight_s1_agent_m0_byteenable;                                                    // yellowlight_s1_agent:m0_byteenable -> yellowlight_s1_translator:uav_byteenable
	wire         yellowlight_s1_agent_m0_read;                                                          // yellowlight_s1_agent:m0_read -> yellowlight_s1_translator:uav_read
	wire         yellowlight_s1_agent_m0_readdatavalid;                                                 // yellowlight_s1_translator:uav_readdatavalid -> yellowlight_s1_agent:m0_readdatavalid
	wire         yellowlight_s1_agent_m0_lock;                                                          // yellowlight_s1_agent:m0_lock -> yellowlight_s1_translator:uav_lock
	wire  [31:0] yellowlight_s1_agent_m0_writedata;                                                     // yellowlight_s1_agent:m0_writedata -> yellowlight_s1_translator:uav_writedata
	wire         yellowlight_s1_agent_m0_write;                                                         // yellowlight_s1_agent:m0_write -> yellowlight_s1_translator:uav_write
	wire   [2:0] yellowlight_s1_agent_m0_burstcount;                                                    // yellowlight_s1_agent:m0_burstcount -> yellowlight_s1_translator:uav_burstcount
	wire         yellowlight_s1_agent_rf_source_valid;                                                  // yellowlight_s1_agent:rf_source_valid -> yellowlight_s1_agent_rsp_fifo:in_valid
	wire  [99:0] yellowlight_s1_agent_rf_source_data;                                                   // yellowlight_s1_agent:rf_source_data -> yellowlight_s1_agent_rsp_fifo:in_data
	wire         yellowlight_s1_agent_rf_source_ready;                                                  // yellowlight_s1_agent_rsp_fifo:in_ready -> yellowlight_s1_agent:rf_source_ready
	wire         yellowlight_s1_agent_rf_source_startofpacket;                                          // yellowlight_s1_agent:rf_source_startofpacket -> yellowlight_s1_agent_rsp_fifo:in_startofpacket
	wire         yellowlight_s1_agent_rf_source_endofpacket;                                            // yellowlight_s1_agent:rf_source_endofpacket -> yellowlight_s1_agent_rsp_fifo:in_endofpacket
	wire         yellowlight_s1_agent_rsp_fifo_out_valid;                                               // yellowlight_s1_agent_rsp_fifo:out_valid -> yellowlight_s1_agent:rf_sink_valid
	wire  [99:0] yellowlight_s1_agent_rsp_fifo_out_data;                                                // yellowlight_s1_agent_rsp_fifo:out_data -> yellowlight_s1_agent:rf_sink_data
	wire         yellowlight_s1_agent_rsp_fifo_out_ready;                                               // yellowlight_s1_agent:rf_sink_ready -> yellowlight_s1_agent_rsp_fifo:out_ready
	wire         yellowlight_s1_agent_rsp_fifo_out_startofpacket;                                       // yellowlight_s1_agent_rsp_fifo:out_startofpacket -> yellowlight_s1_agent:rf_sink_startofpacket
	wire         yellowlight_s1_agent_rsp_fifo_out_endofpacket;                                         // yellowlight_s1_agent_rsp_fifo:out_endofpacket -> yellowlight_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_015_src_valid;                                                                 // cmd_mux_015:src_valid -> yellowlight_s1_agent:cp_valid
	wire  [98:0] cmd_mux_015_src_data;                                                                  // cmd_mux_015:src_data -> yellowlight_s1_agent:cp_data
	wire         cmd_mux_015_src_ready;                                                                 // yellowlight_s1_agent:cp_ready -> cmd_mux_015:src_ready
	wire  [19:0] cmd_mux_015_src_channel;                                                               // cmd_mux_015:src_channel -> yellowlight_s1_agent:cp_channel
	wire         cmd_mux_015_src_startofpacket;                                                         // cmd_mux_015:src_startofpacket -> yellowlight_s1_agent:cp_startofpacket
	wire         cmd_mux_015_src_endofpacket;                                                           // cmd_mux_015:src_endofpacket -> yellowlight_s1_agent:cp_endofpacket
	wire  [31:0] greenlight_s1_agent_m0_readdata;                                                       // greenlight_s1_translator:uav_readdata -> greenlight_s1_agent:m0_readdata
	wire         greenlight_s1_agent_m0_waitrequest;                                                    // greenlight_s1_translator:uav_waitrequest -> greenlight_s1_agent:m0_waitrequest
	wire         greenlight_s1_agent_m0_debugaccess;                                                    // greenlight_s1_agent:m0_debugaccess -> greenlight_s1_translator:uav_debugaccess
	wire  [18:0] greenlight_s1_agent_m0_address;                                                        // greenlight_s1_agent:m0_address -> greenlight_s1_translator:uav_address
	wire   [3:0] greenlight_s1_agent_m0_byteenable;                                                     // greenlight_s1_agent:m0_byteenable -> greenlight_s1_translator:uav_byteenable
	wire         greenlight_s1_agent_m0_read;                                                           // greenlight_s1_agent:m0_read -> greenlight_s1_translator:uav_read
	wire         greenlight_s1_agent_m0_readdatavalid;                                                  // greenlight_s1_translator:uav_readdatavalid -> greenlight_s1_agent:m0_readdatavalid
	wire         greenlight_s1_agent_m0_lock;                                                           // greenlight_s1_agent:m0_lock -> greenlight_s1_translator:uav_lock
	wire  [31:0] greenlight_s1_agent_m0_writedata;                                                      // greenlight_s1_agent:m0_writedata -> greenlight_s1_translator:uav_writedata
	wire         greenlight_s1_agent_m0_write;                                                          // greenlight_s1_agent:m0_write -> greenlight_s1_translator:uav_write
	wire   [2:0] greenlight_s1_agent_m0_burstcount;                                                     // greenlight_s1_agent:m0_burstcount -> greenlight_s1_translator:uav_burstcount
	wire         greenlight_s1_agent_rf_source_valid;                                                   // greenlight_s1_agent:rf_source_valid -> greenlight_s1_agent_rsp_fifo:in_valid
	wire  [99:0] greenlight_s1_agent_rf_source_data;                                                    // greenlight_s1_agent:rf_source_data -> greenlight_s1_agent_rsp_fifo:in_data
	wire         greenlight_s1_agent_rf_source_ready;                                                   // greenlight_s1_agent_rsp_fifo:in_ready -> greenlight_s1_agent:rf_source_ready
	wire         greenlight_s1_agent_rf_source_startofpacket;                                           // greenlight_s1_agent:rf_source_startofpacket -> greenlight_s1_agent_rsp_fifo:in_startofpacket
	wire         greenlight_s1_agent_rf_source_endofpacket;                                             // greenlight_s1_agent:rf_source_endofpacket -> greenlight_s1_agent_rsp_fifo:in_endofpacket
	wire         greenlight_s1_agent_rsp_fifo_out_valid;                                                // greenlight_s1_agent_rsp_fifo:out_valid -> greenlight_s1_agent:rf_sink_valid
	wire  [99:0] greenlight_s1_agent_rsp_fifo_out_data;                                                 // greenlight_s1_agent_rsp_fifo:out_data -> greenlight_s1_agent:rf_sink_data
	wire         greenlight_s1_agent_rsp_fifo_out_ready;                                                // greenlight_s1_agent:rf_sink_ready -> greenlight_s1_agent_rsp_fifo:out_ready
	wire         greenlight_s1_agent_rsp_fifo_out_startofpacket;                                        // greenlight_s1_agent_rsp_fifo:out_startofpacket -> greenlight_s1_agent:rf_sink_startofpacket
	wire         greenlight_s1_agent_rsp_fifo_out_endofpacket;                                          // greenlight_s1_agent_rsp_fifo:out_endofpacket -> greenlight_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_016_src_valid;                                                                 // cmd_mux_016:src_valid -> greenlight_s1_agent:cp_valid
	wire  [98:0] cmd_mux_016_src_data;                                                                  // cmd_mux_016:src_data -> greenlight_s1_agent:cp_data
	wire         cmd_mux_016_src_ready;                                                                 // greenlight_s1_agent:cp_ready -> cmd_mux_016:src_ready
	wire  [19:0] cmd_mux_016_src_channel;                                                               // cmd_mux_016:src_channel -> greenlight_s1_agent:cp_channel
	wire         cmd_mux_016_src_startofpacket;                                                         // cmd_mux_016:src_startofpacket -> greenlight_s1_agent:cp_startofpacket
	wire         cmd_mux_016_src_endofpacket;                                                           // cmd_mux_016:src_endofpacket -> greenlight_s1_agent:cp_endofpacket
	wire  [31:0] reverse_s1_agent_m0_readdata;                                                          // reverse_s1_translator:uav_readdata -> reverse_s1_agent:m0_readdata
	wire         reverse_s1_agent_m0_waitrequest;                                                       // reverse_s1_translator:uav_waitrequest -> reverse_s1_agent:m0_waitrequest
	wire         reverse_s1_agent_m0_debugaccess;                                                       // reverse_s1_agent:m0_debugaccess -> reverse_s1_translator:uav_debugaccess
	wire  [18:0] reverse_s1_agent_m0_address;                                                           // reverse_s1_agent:m0_address -> reverse_s1_translator:uav_address
	wire   [3:0] reverse_s1_agent_m0_byteenable;                                                        // reverse_s1_agent:m0_byteenable -> reverse_s1_translator:uav_byteenable
	wire         reverse_s1_agent_m0_read;                                                              // reverse_s1_agent:m0_read -> reverse_s1_translator:uav_read
	wire         reverse_s1_agent_m0_readdatavalid;                                                     // reverse_s1_translator:uav_readdatavalid -> reverse_s1_agent:m0_readdatavalid
	wire         reverse_s1_agent_m0_lock;                                                              // reverse_s1_agent:m0_lock -> reverse_s1_translator:uav_lock
	wire  [31:0] reverse_s1_agent_m0_writedata;                                                         // reverse_s1_agent:m0_writedata -> reverse_s1_translator:uav_writedata
	wire         reverse_s1_agent_m0_write;                                                             // reverse_s1_agent:m0_write -> reverse_s1_translator:uav_write
	wire   [2:0] reverse_s1_agent_m0_burstcount;                                                        // reverse_s1_agent:m0_burstcount -> reverse_s1_translator:uav_burstcount
	wire         reverse_s1_agent_rf_source_valid;                                                      // reverse_s1_agent:rf_source_valid -> reverse_s1_agent_rsp_fifo:in_valid
	wire  [99:0] reverse_s1_agent_rf_source_data;                                                       // reverse_s1_agent:rf_source_data -> reverse_s1_agent_rsp_fifo:in_data
	wire         reverse_s1_agent_rf_source_ready;                                                      // reverse_s1_agent_rsp_fifo:in_ready -> reverse_s1_agent:rf_source_ready
	wire         reverse_s1_agent_rf_source_startofpacket;                                              // reverse_s1_agent:rf_source_startofpacket -> reverse_s1_agent_rsp_fifo:in_startofpacket
	wire         reverse_s1_agent_rf_source_endofpacket;                                                // reverse_s1_agent:rf_source_endofpacket -> reverse_s1_agent_rsp_fifo:in_endofpacket
	wire         reverse_s1_agent_rsp_fifo_out_valid;                                                   // reverse_s1_agent_rsp_fifo:out_valid -> reverse_s1_agent:rf_sink_valid
	wire  [99:0] reverse_s1_agent_rsp_fifo_out_data;                                                    // reverse_s1_agent_rsp_fifo:out_data -> reverse_s1_agent:rf_sink_data
	wire         reverse_s1_agent_rsp_fifo_out_ready;                                                   // reverse_s1_agent:rf_sink_ready -> reverse_s1_agent_rsp_fifo:out_ready
	wire         reverse_s1_agent_rsp_fifo_out_startofpacket;                                           // reverse_s1_agent_rsp_fifo:out_startofpacket -> reverse_s1_agent:rf_sink_startofpacket
	wire         reverse_s1_agent_rsp_fifo_out_endofpacket;                                             // reverse_s1_agent_rsp_fifo:out_endofpacket -> reverse_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_017_src_valid;                                                                 // cmd_mux_017:src_valid -> reverse_s1_agent:cp_valid
	wire  [98:0] cmd_mux_017_src_data;                                                                  // cmd_mux_017:src_data -> reverse_s1_agent:cp_data
	wire         cmd_mux_017_src_ready;                                                                 // reverse_s1_agent:cp_ready -> cmd_mux_017:src_ready
	wire  [19:0] cmd_mux_017_src_channel;                                                               // cmd_mux_017:src_channel -> reverse_s1_agent:cp_channel
	wire         cmd_mux_017_src_startofpacket;                                                         // cmd_mux_017:src_startofpacket -> reverse_s1_agent:cp_startofpacket
	wire         cmd_mux_017_src_endofpacket;                                                           // cmd_mux_017:src_endofpacket -> reverse_s1_agent:cp_endofpacket
	wire  [31:0] encoderreset_s1_agent_m0_readdata;                                                     // encoderreset_s1_translator:uav_readdata -> encoderreset_s1_agent:m0_readdata
	wire         encoderreset_s1_agent_m0_waitrequest;                                                  // encoderreset_s1_translator:uav_waitrequest -> encoderreset_s1_agent:m0_waitrequest
	wire         encoderreset_s1_agent_m0_debugaccess;                                                  // encoderreset_s1_agent:m0_debugaccess -> encoderreset_s1_translator:uav_debugaccess
	wire  [18:0] encoderreset_s1_agent_m0_address;                                                      // encoderreset_s1_agent:m0_address -> encoderreset_s1_translator:uav_address
	wire   [3:0] encoderreset_s1_agent_m0_byteenable;                                                   // encoderreset_s1_agent:m0_byteenable -> encoderreset_s1_translator:uav_byteenable
	wire         encoderreset_s1_agent_m0_read;                                                         // encoderreset_s1_agent:m0_read -> encoderreset_s1_translator:uav_read
	wire         encoderreset_s1_agent_m0_readdatavalid;                                                // encoderreset_s1_translator:uav_readdatavalid -> encoderreset_s1_agent:m0_readdatavalid
	wire         encoderreset_s1_agent_m0_lock;                                                         // encoderreset_s1_agent:m0_lock -> encoderreset_s1_translator:uav_lock
	wire  [31:0] encoderreset_s1_agent_m0_writedata;                                                    // encoderreset_s1_agent:m0_writedata -> encoderreset_s1_translator:uav_writedata
	wire         encoderreset_s1_agent_m0_write;                                                        // encoderreset_s1_agent:m0_write -> encoderreset_s1_translator:uav_write
	wire   [2:0] encoderreset_s1_agent_m0_burstcount;                                                   // encoderreset_s1_agent:m0_burstcount -> encoderreset_s1_translator:uav_burstcount
	wire         encoderreset_s1_agent_rf_source_valid;                                                 // encoderreset_s1_agent:rf_source_valid -> encoderreset_s1_agent_rsp_fifo:in_valid
	wire  [99:0] encoderreset_s1_agent_rf_source_data;                                                  // encoderreset_s1_agent:rf_source_data -> encoderreset_s1_agent_rsp_fifo:in_data
	wire         encoderreset_s1_agent_rf_source_ready;                                                 // encoderreset_s1_agent_rsp_fifo:in_ready -> encoderreset_s1_agent:rf_source_ready
	wire         encoderreset_s1_agent_rf_source_startofpacket;                                         // encoderreset_s1_agent:rf_source_startofpacket -> encoderreset_s1_agent_rsp_fifo:in_startofpacket
	wire         encoderreset_s1_agent_rf_source_endofpacket;                                           // encoderreset_s1_agent:rf_source_endofpacket -> encoderreset_s1_agent_rsp_fifo:in_endofpacket
	wire         encoderreset_s1_agent_rsp_fifo_out_valid;                                              // encoderreset_s1_agent_rsp_fifo:out_valid -> encoderreset_s1_agent:rf_sink_valid
	wire  [99:0] encoderreset_s1_agent_rsp_fifo_out_data;                                               // encoderreset_s1_agent_rsp_fifo:out_data -> encoderreset_s1_agent:rf_sink_data
	wire         encoderreset_s1_agent_rsp_fifo_out_ready;                                              // encoderreset_s1_agent:rf_sink_ready -> encoderreset_s1_agent_rsp_fifo:out_ready
	wire         encoderreset_s1_agent_rsp_fifo_out_startofpacket;                                      // encoderreset_s1_agent_rsp_fifo:out_startofpacket -> encoderreset_s1_agent:rf_sink_startofpacket
	wire         encoderreset_s1_agent_rsp_fifo_out_endofpacket;                                        // encoderreset_s1_agent_rsp_fifo:out_endofpacket -> encoderreset_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_018_src_valid;                                                                 // cmd_mux_018:src_valid -> encoderreset_s1_agent:cp_valid
	wire  [98:0] cmd_mux_018_src_data;                                                                  // cmd_mux_018:src_data -> encoderreset_s1_agent:cp_data
	wire         cmd_mux_018_src_ready;                                                                 // encoderreset_s1_agent:cp_ready -> cmd_mux_018:src_ready
	wire  [19:0] cmd_mux_018_src_channel;                                                               // cmd_mux_018:src_channel -> encoderreset_s1_agent:cp_channel
	wire         cmd_mux_018_src_startofpacket;                                                         // cmd_mux_018:src_startofpacket -> encoderreset_s1_agent:cp_startofpacket
	wire         cmd_mux_018_src_endofpacket;                                                           // cmd_mux_018:src_endofpacket -> encoderreset_s1_agent:cp_endofpacket
	wire  [31:0] challengeselect_s1_agent_m0_readdata;                                                  // ChallengeSelect_s1_translator:uav_readdata -> ChallengeSelect_s1_agent:m0_readdata
	wire         challengeselect_s1_agent_m0_waitrequest;                                               // ChallengeSelect_s1_translator:uav_waitrequest -> ChallengeSelect_s1_agent:m0_waitrequest
	wire         challengeselect_s1_agent_m0_debugaccess;                                               // ChallengeSelect_s1_agent:m0_debugaccess -> ChallengeSelect_s1_translator:uav_debugaccess
	wire  [18:0] challengeselect_s1_agent_m0_address;                                                   // ChallengeSelect_s1_agent:m0_address -> ChallengeSelect_s1_translator:uav_address
	wire   [3:0] challengeselect_s1_agent_m0_byteenable;                                                // ChallengeSelect_s1_agent:m0_byteenable -> ChallengeSelect_s1_translator:uav_byteenable
	wire         challengeselect_s1_agent_m0_read;                                                      // ChallengeSelect_s1_agent:m0_read -> ChallengeSelect_s1_translator:uav_read
	wire         challengeselect_s1_agent_m0_readdatavalid;                                             // ChallengeSelect_s1_translator:uav_readdatavalid -> ChallengeSelect_s1_agent:m0_readdatavalid
	wire         challengeselect_s1_agent_m0_lock;                                                      // ChallengeSelect_s1_agent:m0_lock -> ChallengeSelect_s1_translator:uav_lock
	wire  [31:0] challengeselect_s1_agent_m0_writedata;                                                 // ChallengeSelect_s1_agent:m0_writedata -> ChallengeSelect_s1_translator:uav_writedata
	wire         challengeselect_s1_agent_m0_write;                                                     // ChallengeSelect_s1_agent:m0_write -> ChallengeSelect_s1_translator:uav_write
	wire   [2:0] challengeselect_s1_agent_m0_burstcount;                                                // ChallengeSelect_s1_agent:m0_burstcount -> ChallengeSelect_s1_translator:uav_burstcount
	wire         challengeselect_s1_agent_rf_source_valid;                                              // ChallengeSelect_s1_agent:rf_source_valid -> ChallengeSelect_s1_agent_rsp_fifo:in_valid
	wire  [99:0] challengeselect_s1_agent_rf_source_data;                                               // ChallengeSelect_s1_agent:rf_source_data -> ChallengeSelect_s1_agent_rsp_fifo:in_data
	wire         challengeselect_s1_agent_rf_source_ready;                                              // ChallengeSelect_s1_agent_rsp_fifo:in_ready -> ChallengeSelect_s1_agent:rf_source_ready
	wire         challengeselect_s1_agent_rf_source_startofpacket;                                      // ChallengeSelect_s1_agent:rf_source_startofpacket -> ChallengeSelect_s1_agent_rsp_fifo:in_startofpacket
	wire         challengeselect_s1_agent_rf_source_endofpacket;                                        // ChallengeSelect_s1_agent:rf_source_endofpacket -> ChallengeSelect_s1_agent_rsp_fifo:in_endofpacket
	wire         challengeselect_s1_agent_rsp_fifo_out_valid;                                           // ChallengeSelect_s1_agent_rsp_fifo:out_valid -> ChallengeSelect_s1_agent:rf_sink_valid
	wire  [99:0] challengeselect_s1_agent_rsp_fifo_out_data;                                            // ChallengeSelect_s1_agent_rsp_fifo:out_data -> ChallengeSelect_s1_agent:rf_sink_data
	wire         challengeselect_s1_agent_rsp_fifo_out_ready;                                           // ChallengeSelect_s1_agent:rf_sink_ready -> ChallengeSelect_s1_agent_rsp_fifo:out_ready
	wire         challengeselect_s1_agent_rsp_fifo_out_startofpacket;                                   // ChallengeSelect_s1_agent_rsp_fifo:out_startofpacket -> ChallengeSelect_s1_agent:rf_sink_startofpacket
	wire         challengeselect_s1_agent_rsp_fifo_out_endofpacket;                                     // ChallengeSelect_s1_agent_rsp_fifo:out_endofpacket -> ChallengeSelect_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_019_src_valid;                                                                 // cmd_mux_019:src_valid -> ChallengeSelect_s1_agent:cp_valid
	wire  [98:0] cmd_mux_019_src_data;                                                                  // cmd_mux_019:src_data -> ChallengeSelect_s1_agent:cp_data
	wire         cmd_mux_019_src_ready;                                                                 // ChallengeSelect_s1_agent:cp_ready -> cmd_mux_019:src_ready
	wire  [19:0] cmd_mux_019_src_channel;                                                               // cmd_mux_019:src_channel -> ChallengeSelect_s1_agent:cp_channel
	wire         cmd_mux_019_src_startofpacket;                                                         // cmd_mux_019:src_startofpacket -> ChallengeSelect_s1_agent:cp_startofpacket
	wire         cmd_mux_019_src_endofpacket;                                                           // cmd_mux_019:src_endofpacket -> ChallengeSelect_s1_agent:cp_endofpacket
	wire         nios2_processor_data_master_agent_cp_valid;                                            // nios2_processor_data_master_agent:cp_valid -> router:sink_valid
	wire  [98:0] nios2_processor_data_master_agent_cp_data;                                             // nios2_processor_data_master_agent:cp_data -> router:sink_data
	wire         nios2_processor_data_master_agent_cp_ready;                                            // router:sink_ready -> nios2_processor_data_master_agent:cp_ready
	wire         nios2_processor_data_master_agent_cp_startofpacket;                                    // nios2_processor_data_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire         nios2_processor_data_master_agent_cp_endofpacket;                                      // nios2_processor_data_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire         router_src_valid;                                                                      // router:src_valid -> cmd_demux:sink_valid
	wire  [98:0] router_src_data;                                                                       // router:src_data -> cmd_demux:sink_data
	wire         router_src_ready;                                                                      // cmd_demux:sink_ready -> router:src_ready
	wire  [19:0] router_src_channel;                                                                    // router:src_channel -> cmd_demux:sink_channel
	wire         router_src_startofpacket;                                                              // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire         router_src_endofpacket;                                                                // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire         nios2_processor_instruction_master_agent_cp_valid;                                     // nios2_processor_instruction_master_agent:cp_valid -> router_001:sink_valid
	wire  [98:0] nios2_processor_instruction_master_agent_cp_data;                                      // nios2_processor_instruction_master_agent:cp_data -> router_001:sink_data
	wire         nios2_processor_instruction_master_agent_cp_ready;                                     // router_001:sink_ready -> nios2_processor_instruction_master_agent:cp_ready
	wire         nios2_processor_instruction_master_agent_cp_startofpacket;                             // nios2_processor_instruction_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire         nios2_processor_instruction_master_agent_cp_endofpacket;                               // nios2_processor_instruction_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire         router_001_src_valid;                                                                  // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [98:0] router_001_src_data;                                                                   // router_001:src_data -> cmd_demux_001:sink_data
	wire         router_001_src_ready;                                                                  // cmd_demux_001:sink_ready -> router_001:src_ready
	wire  [19:0] router_001_src_channel;                                                                // router_001:src_channel -> cmd_demux_001:sink_channel
	wire         router_001_src_startofpacket;                                                          // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire         router_001_src_endofpacket;                                                            // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire         jtag_uart_avalon_jtag_slave_agent_rp_valid;                                            // jtag_uart_avalon_jtag_slave_agent:rp_valid -> router_002:sink_valid
	wire  [98:0] jtag_uart_avalon_jtag_slave_agent_rp_data;                                             // jtag_uart_avalon_jtag_slave_agent:rp_data -> router_002:sink_data
	wire         jtag_uart_avalon_jtag_slave_agent_rp_ready;                                            // router_002:sink_ready -> jtag_uart_avalon_jtag_slave_agent:rp_ready
	wire         jtag_uart_avalon_jtag_slave_agent_rp_startofpacket;                                    // jtag_uart_avalon_jtag_slave_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire         jtag_uart_avalon_jtag_slave_agent_rp_endofpacket;                                      // jtag_uart_avalon_jtag_slave_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire         router_002_src_valid;                                                                  // router_002:src_valid -> rsp_demux:sink_valid
	wire  [98:0] router_002_src_data;                                                                   // router_002:src_data -> rsp_demux:sink_data
	wire         router_002_src_ready;                                                                  // rsp_demux:sink_ready -> router_002:src_ready
	wire  [19:0] router_002_src_channel;                                                                // router_002:src_channel -> rsp_demux:sink_channel
	wire         router_002_src_startofpacket;                                                          // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire         router_002_src_endofpacket;                                                            // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire         nios2_processor_jtag_debug_module_agent_rp_valid;                                      // nios2_processor_jtag_debug_module_agent:rp_valid -> router_003:sink_valid
	wire  [98:0] nios2_processor_jtag_debug_module_agent_rp_data;                                       // nios2_processor_jtag_debug_module_agent:rp_data -> router_003:sink_data
	wire         nios2_processor_jtag_debug_module_agent_rp_ready;                                      // router_003:sink_ready -> nios2_processor_jtag_debug_module_agent:rp_ready
	wire         nios2_processor_jtag_debug_module_agent_rp_startofpacket;                              // nios2_processor_jtag_debug_module_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire         nios2_processor_jtag_debug_module_agent_rp_endofpacket;                                // nios2_processor_jtag_debug_module_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire         router_003_src_valid;                                                                  // router_003:src_valid -> rsp_demux_001:sink_valid
	wire  [98:0] router_003_src_data;                                                                   // router_003:src_data -> rsp_demux_001:sink_data
	wire         router_003_src_ready;                                                                  // rsp_demux_001:sink_ready -> router_003:src_ready
	wire  [19:0] router_003_src_channel;                                                                // router_003:src_channel -> rsp_demux_001:sink_channel
	wire         router_003_src_startofpacket;                                                          // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire         router_003_src_endofpacket;                                                            // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire         onchip_memory_s1_agent_rp_valid;                                                       // onchip_memory_s1_agent:rp_valid -> router_004:sink_valid
	wire  [98:0] onchip_memory_s1_agent_rp_data;                                                        // onchip_memory_s1_agent:rp_data -> router_004:sink_data
	wire         onchip_memory_s1_agent_rp_ready;                                                       // router_004:sink_ready -> onchip_memory_s1_agent:rp_ready
	wire         onchip_memory_s1_agent_rp_startofpacket;                                               // onchip_memory_s1_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire         onchip_memory_s1_agent_rp_endofpacket;                                                 // onchip_memory_s1_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire         router_004_src_valid;                                                                  // router_004:src_valid -> rsp_demux_002:sink_valid
	wire  [98:0] router_004_src_data;                                                                   // router_004:src_data -> rsp_demux_002:sink_data
	wire         router_004_src_ready;                                                                  // rsp_demux_002:sink_ready -> router_004:src_ready
	wire  [19:0] router_004_src_channel;                                                                // router_004:src_channel -> rsp_demux_002:sink_channel
	wire         router_004_src_startofpacket;                                                          // router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire         router_004_src_endofpacket;                                                            // router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire         switches_s1_agent_rp_valid;                                                            // switches_s1_agent:rp_valid -> router_005:sink_valid
	wire  [98:0] switches_s1_agent_rp_data;                                                             // switches_s1_agent:rp_data -> router_005:sink_data
	wire         switches_s1_agent_rp_ready;                                                            // router_005:sink_ready -> switches_s1_agent:rp_ready
	wire         switches_s1_agent_rp_startofpacket;                                                    // switches_s1_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire         switches_s1_agent_rp_endofpacket;                                                      // switches_s1_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire         router_005_src_valid;                                                                  // router_005:src_valid -> rsp_demux_003:sink_valid
	wire  [98:0] router_005_src_data;                                                                   // router_005:src_data -> rsp_demux_003:sink_data
	wire         router_005_src_ready;                                                                  // rsp_demux_003:sink_ready -> router_005:src_ready
	wire  [19:0] router_005_src_channel;                                                                // router_005:src_channel -> rsp_demux_003:sink_channel
	wire         router_005_src_startofpacket;                                                          // router_005:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire         router_005_src_endofpacket;                                                            // router_005:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire         leds_s1_agent_rp_valid;                                                                // LEDs_s1_agent:rp_valid -> router_006:sink_valid
	wire  [98:0] leds_s1_agent_rp_data;                                                                 // LEDs_s1_agent:rp_data -> router_006:sink_data
	wire         leds_s1_agent_rp_ready;                                                                // router_006:sink_ready -> LEDs_s1_agent:rp_ready
	wire         leds_s1_agent_rp_startofpacket;                                                        // LEDs_s1_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire         leds_s1_agent_rp_endofpacket;                                                          // LEDs_s1_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire         router_006_src_valid;                                                                  // router_006:src_valid -> rsp_demux_004:sink_valid
	wire  [98:0] router_006_src_data;                                                                   // router_006:src_data -> rsp_demux_004:sink_data
	wire         router_006_src_ready;                                                                  // rsp_demux_004:sink_ready -> router_006:src_ready
	wire  [19:0] router_006_src_channel;                                                                // router_006:src_channel -> rsp_demux_004:sink_channel
	wire         router_006_src_startofpacket;                                                          // router_006:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire         router_006_src_endofpacket;                                                            // router_006:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire         encoderincm_s1_agent_rp_valid;                                                         // encoderInCM_s1_agent:rp_valid -> router_007:sink_valid
	wire  [98:0] encoderincm_s1_agent_rp_data;                                                          // encoderInCM_s1_agent:rp_data -> router_007:sink_data
	wire         encoderincm_s1_agent_rp_ready;                                                         // router_007:sink_ready -> encoderInCM_s1_agent:rp_ready
	wire         encoderincm_s1_agent_rp_startofpacket;                                                 // encoderInCM_s1_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire         encoderincm_s1_agent_rp_endofpacket;                                                   // encoderInCM_s1_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire         router_007_src_valid;                                                                  // router_007:src_valid -> rsp_demux_005:sink_valid
	wire  [98:0] router_007_src_data;                                                                   // router_007:src_data -> rsp_demux_005:sink_data
	wire         router_007_src_ready;                                                                  // rsp_demux_005:sink_ready -> router_007:src_ready
	wire  [19:0] router_007_src_channel;                                                                // router_007:src_channel -> rsp_demux_005:sink_channel
	wire         router_007_src_startofpacket;                                                          // router_007:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire         router_007_src_endofpacket;                                                            // router_007:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire         frsensor_s1_agent_rp_valid;                                                            // FRSensor_s1_agent:rp_valid -> router_008:sink_valid
	wire  [98:0] frsensor_s1_agent_rp_data;                                                             // FRSensor_s1_agent:rp_data -> router_008:sink_data
	wire         frsensor_s1_agent_rp_ready;                                                            // router_008:sink_ready -> FRSensor_s1_agent:rp_ready
	wire         frsensor_s1_agent_rp_startofpacket;                                                    // FRSensor_s1_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire         frsensor_s1_agent_rp_endofpacket;                                                      // FRSensor_s1_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire         router_008_src_valid;                                                                  // router_008:src_valid -> rsp_demux_006:sink_valid
	wire  [98:0] router_008_src_data;                                                                   // router_008:src_data -> rsp_demux_006:sink_data
	wire         router_008_src_ready;                                                                  // rsp_demux_006:sink_ready -> router_008:src_ready
	wire  [19:0] router_008_src_channel;                                                                // router_008:src_channel -> rsp_demux_006:sink_channel
	wire         router_008_src_startofpacket;                                                          // router_008:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire         router_008_src_endofpacket;                                                            // router_008:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire         flsensor_s1_agent_rp_valid;                                                            // FLSensor_s1_agent:rp_valid -> router_009:sink_valid
	wire  [98:0] flsensor_s1_agent_rp_data;                                                             // FLSensor_s1_agent:rp_data -> router_009:sink_data
	wire         flsensor_s1_agent_rp_ready;                                                            // router_009:sink_ready -> FLSensor_s1_agent:rp_ready
	wire         flsensor_s1_agent_rp_startofpacket;                                                    // FLSensor_s1_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire         flsensor_s1_agent_rp_endofpacket;                                                      // FLSensor_s1_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire         router_009_src_valid;                                                                  // router_009:src_valid -> rsp_demux_007:sink_valid
	wire  [98:0] router_009_src_data;                                                                   // router_009:src_data -> rsp_demux_007:sink_data
	wire         router_009_src_ready;                                                                  // rsp_demux_007:sink_ready -> router_009:src_ready
	wire  [19:0] router_009_src_channel;                                                                // router_009:src_channel -> rsp_demux_007:sink_channel
	wire         router_009_src_startofpacket;                                                          // router_009:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire         router_009_src_endofpacket;                                                            // router_009:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire         lsensor_s1_agent_rp_valid;                                                             // LSensor_s1_agent:rp_valid -> router_010:sink_valid
	wire  [98:0] lsensor_s1_agent_rp_data;                                                              // LSensor_s1_agent:rp_data -> router_010:sink_data
	wire         lsensor_s1_agent_rp_ready;                                                             // router_010:sink_ready -> LSensor_s1_agent:rp_ready
	wire         lsensor_s1_agent_rp_startofpacket;                                                     // LSensor_s1_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire         lsensor_s1_agent_rp_endofpacket;                                                       // LSensor_s1_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire         router_010_src_valid;                                                                  // router_010:src_valid -> rsp_demux_008:sink_valid
	wire  [98:0] router_010_src_data;                                                                   // router_010:src_data -> rsp_demux_008:sink_data
	wire         router_010_src_ready;                                                                  // rsp_demux_008:sink_ready -> router_010:src_ready
	wire  [19:0] router_010_src_channel;                                                                // router_010:src_channel -> rsp_demux_008:sink_channel
	wire         router_010_src_startofpacket;                                                          // router_010:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire         router_010_src_endofpacket;                                                            // router_010:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire         rsensor_s1_agent_rp_valid;                                                             // RSensor_s1_agent:rp_valid -> router_011:sink_valid
	wire  [98:0] rsensor_s1_agent_rp_data;                                                              // RSensor_s1_agent:rp_data -> router_011:sink_data
	wire         rsensor_s1_agent_rp_ready;                                                             // router_011:sink_ready -> RSensor_s1_agent:rp_ready
	wire         rsensor_s1_agent_rp_startofpacket;                                                     // RSensor_s1_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire         rsensor_s1_agent_rp_endofpacket;                                                       // RSensor_s1_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire         router_011_src_valid;                                                                  // router_011:src_valid -> rsp_demux_009:sink_valid
	wire  [98:0] router_011_src_data;                                                                   // router_011:src_data -> rsp_demux_009:sink_data
	wire         router_011_src_ready;                                                                  // rsp_demux_009:sink_ready -> router_011:src_ready
	wire  [19:0] router_011_src_channel;                                                                // router_011:src_channel -> rsp_demux_009:sink_channel
	wire         router_011_src_startofpacket;                                                          // router_011:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire         router_011_src_endofpacket;                                                            // router_011:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire         blsensor_s1_agent_rp_valid;                                                            // BLSensor_s1_agent:rp_valid -> router_012:sink_valid
	wire  [98:0] blsensor_s1_agent_rp_data;                                                             // BLSensor_s1_agent:rp_data -> router_012:sink_data
	wire         blsensor_s1_agent_rp_ready;                                                            // router_012:sink_ready -> BLSensor_s1_agent:rp_ready
	wire         blsensor_s1_agent_rp_startofpacket;                                                    // BLSensor_s1_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire         blsensor_s1_agent_rp_endofpacket;                                                      // BLSensor_s1_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire         router_012_src_valid;                                                                  // router_012:src_valid -> rsp_demux_010:sink_valid
	wire  [98:0] router_012_src_data;                                                                   // router_012:src_data -> rsp_demux_010:sink_data
	wire         router_012_src_ready;                                                                  // rsp_demux_010:sink_ready -> router_012:src_ready
	wire  [19:0] router_012_src_channel;                                                                // router_012:src_channel -> rsp_demux_010:sink_channel
	wire         router_012_src_startofpacket;                                                          // router_012:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire         router_012_src_endofpacket;                                                            // router_012:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire         drivespeed_s1_agent_rp_valid;                                                          // driveSpeed_s1_agent:rp_valid -> router_013:sink_valid
	wire  [98:0] drivespeed_s1_agent_rp_data;                                                           // driveSpeed_s1_agent:rp_data -> router_013:sink_data
	wire         drivespeed_s1_agent_rp_ready;                                                          // router_013:sink_ready -> driveSpeed_s1_agent:rp_ready
	wire         drivespeed_s1_agent_rp_startofpacket;                                                  // driveSpeed_s1_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire         drivespeed_s1_agent_rp_endofpacket;                                                    // driveSpeed_s1_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire         router_013_src_valid;                                                                  // router_013:src_valid -> rsp_demux_011:sink_valid
	wire  [98:0] router_013_src_data;                                                                   // router_013:src_data -> rsp_demux_011:sink_data
	wire         router_013_src_ready;                                                                  // rsp_demux_011:sink_ready -> router_013:src_ready
	wire  [19:0] router_013_src_channel;                                                                // router_013:src_channel -> rsp_demux_011:sink_channel
	wire         router_013_src_startofpacket;                                                          // router_013:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire         router_013_src_endofpacket;                                                            // router_013:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire         brsensor_s1_agent_rp_valid;                                                            // BRSensor_s1_agent:rp_valid -> router_014:sink_valid
	wire  [98:0] brsensor_s1_agent_rp_data;                                                             // BRSensor_s1_agent:rp_data -> router_014:sink_data
	wire         brsensor_s1_agent_rp_ready;                                                            // router_014:sink_ready -> BRSensor_s1_agent:rp_ready
	wire         brsensor_s1_agent_rp_startofpacket;                                                    // BRSensor_s1_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire         brsensor_s1_agent_rp_endofpacket;                                                      // BRSensor_s1_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire         router_014_src_valid;                                                                  // router_014:src_valid -> rsp_demux_012:sink_valid
	wire  [98:0] router_014_src_data;                                                                   // router_014:src_data -> rsp_demux_012:sink_data
	wire         router_014_src_ready;                                                                  // rsp_demux_012:sink_ready -> router_014:src_ready
	wire  [19:0] router_014_src_channel;                                                                // router_014:src_channel -> rsp_demux_012:sink_channel
	wire         router_014_src_startofpacket;                                                          // router_014:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire         router_014_src_endofpacket;                                                            // router_014:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire         targetdirection_s1_agent_rp_valid;                                                     // targetDirection_s1_agent:rp_valid -> router_015:sink_valid
	wire  [98:0] targetdirection_s1_agent_rp_data;                                                      // targetDirection_s1_agent:rp_data -> router_015:sink_data
	wire         targetdirection_s1_agent_rp_ready;                                                     // router_015:sink_ready -> targetDirection_s1_agent:rp_ready
	wire         targetdirection_s1_agent_rp_startofpacket;                                             // targetDirection_s1_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire         targetdirection_s1_agent_rp_endofpacket;                                               // targetDirection_s1_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire         router_015_src_valid;                                                                  // router_015:src_valid -> rsp_demux_013:sink_valid
	wire  [98:0] router_015_src_data;                                                                   // router_015:src_data -> rsp_demux_013:sink_data
	wire         router_015_src_ready;                                                                  // rsp_demux_013:sink_ready -> router_015:src_ready
	wire  [19:0] router_015_src_channel;                                                                // router_015:src_channel -> rsp_demux_013:sink_channel
	wire         router_015_src_startofpacket;                                                          // router_015:src_startofpacket -> rsp_demux_013:sink_startofpacket
	wire         router_015_src_endofpacket;                                                            // router_015:src_endofpacket -> rsp_demux_013:sink_endofpacket
	wire         redlight_s1_agent_rp_valid;                                                            // redlight_s1_agent:rp_valid -> router_016:sink_valid
	wire  [98:0] redlight_s1_agent_rp_data;                                                             // redlight_s1_agent:rp_data -> router_016:sink_data
	wire         redlight_s1_agent_rp_ready;                                                            // router_016:sink_ready -> redlight_s1_agent:rp_ready
	wire         redlight_s1_agent_rp_startofpacket;                                                    // redlight_s1_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire         redlight_s1_agent_rp_endofpacket;                                                      // redlight_s1_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire         router_016_src_valid;                                                                  // router_016:src_valid -> rsp_demux_014:sink_valid
	wire  [98:0] router_016_src_data;                                                                   // router_016:src_data -> rsp_demux_014:sink_data
	wire         router_016_src_ready;                                                                  // rsp_demux_014:sink_ready -> router_016:src_ready
	wire  [19:0] router_016_src_channel;                                                                // router_016:src_channel -> rsp_demux_014:sink_channel
	wire         router_016_src_startofpacket;                                                          // router_016:src_startofpacket -> rsp_demux_014:sink_startofpacket
	wire         router_016_src_endofpacket;                                                            // router_016:src_endofpacket -> rsp_demux_014:sink_endofpacket
	wire         yellowlight_s1_agent_rp_valid;                                                         // yellowlight_s1_agent:rp_valid -> router_017:sink_valid
	wire  [98:0] yellowlight_s1_agent_rp_data;                                                          // yellowlight_s1_agent:rp_data -> router_017:sink_data
	wire         yellowlight_s1_agent_rp_ready;                                                         // router_017:sink_ready -> yellowlight_s1_agent:rp_ready
	wire         yellowlight_s1_agent_rp_startofpacket;                                                 // yellowlight_s1_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire         yellowlight_s1_agent_rp_endofpacket;                                                   // yellowlight_s1_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire         router_017_src_valid;                                                                  // router_017:src_valid -> rsp_demux_015:sink_valid
	wire  [98:0] router_017_src_data;                                                                   // router_017:src_data -> rsp_demux_015:sink_data
	wire         router_017_src_ready;                                                                  // rsp_demux_015:sink_ready -> router_017:src_ready
	wire  [19:0] router_017_src_channel;                                                                // router_017:src_channel -> rsp_demux_015:sink_channel
	wire         router_017_src_startofpacket;                                                          // router_017:src_startofpacket -> rsp_demux_015:sink_startofpacket
	wire         router_017_src_endofpacket;                                                            // router_017:src_endofpacket -> rsp_demux_015:sink_endofpacket
	wire         greenlight_s1_agent_rp_valid;                                                          // greenlight_s1_agent:rp_valid -> router_018:sink_valid
	wire  [98:0] greenlight_s1_agent_rp_data;                                                           // greenlight_s1_agent:rp_data -> router_018:sink_data
	wire         greenlight_s1_agent_rp_ready;                                                          // router_018:sink_ready -> greenlight_s1_agent:rp_ready
	wire         greenlight_s1_agent_rp_startofpacket;                                                  // greenlight_s1_agent:rp_startofpacket -> router_018:sink_startofpacket
	wire         greenlight_s1_agent_rp_endofpacket;                                                    // greenlight_s1_agent:rp_endofpacket -> router_018:sink_endofpacket
	wire         router_018_src_valid;                                                                  // router_018:src_valid -> rsp_demux_016:sink_valid
	wire  [98:0] router_018_src_data;                                                                   // router_018:src_data -> rsp_demux_016:sink_data
	wire         router_018_src_ready;                                                                  // rsp_demux_016:sink_ready -> router_018:src_ready
	wire  [19:0] router_018_src_channel;                                                                // router_018:src_channel -> rsp_demux_016:sink_channel
	wire         router_018_src_startofpacket;                                                          // router_018:src_startofpacket -> rsp_demux_016:sink_startofpacket
	wire         router_018_src_endofpacket;                                                            // router_018:src_endofpacket -> rsp_demux_016:sink_endofpacket
	wire         reverse_s1_agent_rp_valid;                                                             // reverse_s1_agent:rp_valid -> router_019:sink_valid
	wire  [98:0] reverse_s1_agent_rp_data;                                                              // reverse_s1_agent:rp_data -> router_019:sink_data
	wire         reverse_s1_agent_rp_ready;                                                             // router_019:sink_ready -> reverse_s1_agent:rp_ready
	wire         reverse_s1_agent_rp_startofpacket;                                                     // reverse_s1_agent:rp_startofpacket -> router_019:sink_startofpacket
	wire         reverse_s1_agent_rp_endofpacket;                                                       // reverse_s1_agent:rp_endofpacket -> router_019:sink_endofpacket
	wire         router_019_src_valid;                                                                  // router_019:src_valid -> rsp_demux_017:sink_valid
	wire  [98:0] router_019_src_data;                                                                   // router_019:src_data -> rsp_demux_017:sink_data
	wire         router_019_src_ready;                                                                  // rsp_demux_017:sink_ready -> router_019:src_ready
	wire  [19:0] router_019_src_channel;                                                                // router_019:src_channel -> rsp_demux_017:sink_channel
	wire         router_019_src_startofpacket;                                                          // router_019:src_startofpacket -> rsp_demux_017:sink_startofpacket
	wire         router_019_src_endofpacket;                                                            // router_019:src_endofpacket -> rsp_demux_017:sink_endofpacket
	wire         encoderreset_s1_agent_rp_valid;                                                        // encoderreset_s1_agent:rp_valid -> router_020:sink_valid
	wire  [98:0] encoderreset_s1_agent_rp_data;                                                         // encoderreset_s1_agent:rp_data -> router_020:sink_data
	wire         encoderreset_s1_agent_rp_ready;                                                        // router_020:sink_ready -> encoderreset_s1_agent:rp_ready
	wire         encoderreset_s1_agent_rp_startofpacket;                                                // encoderreset_s1_agent:rp_startofpacket -> router_020:sink_startofpacket
	wire         encoderreset_s1_agent_rp_endofpacket;                                                  // encoderreset_s1_agent:rp_endofpacket -> router_020:sink_endofpacket
	wire         router_020_src_valid;                                                                  // router_020:src_valid -> rsp_demux_018:sink_valid
	wire  [98:0] router_020_src_data;                                                                   // router_020:src_data -> rsp_demux_018:sink_data
	wire         router_020_src_ready;                                                                  // rsp_demux_018:sink_ready -> router_020:src_ready
	wire  [19:0] router_020_src_channel;                                                                // router_020:src_channel -> rsp_demux_018:sink_channel
	wire         router_020_src_startofpacket;                                                          // router_020:src_startofpacket -> rsp_demux_018:sink_startofpacket
	wire         router_020_src_endofpacket;                                                            // router_020:src_endofpacket -> rsp_demux_018:sink_endofpacket
	wire         challengeselect_s1_agent_rp_valid;                                                     // ChallengeSelect_s1_agent:rp_valid -> router_021:sink_valid
	wire  [98:0] challengeselect_s1_agent_rp_data;                                                      // ChallengeSelect_s1_agent:rp_data -> router_021:sink_data
	wire         challengeselect_s1_agent_rp_ready;                                                     // router_021:sink_ready -> ChallengeSelect_s1_agent:rp_ready
	wire         challengeselect_s1_agent_rp_startofpacket;                                             // ChallengeSelect_s1_agent:rp_startofpacket -> router_021:sink_startofpacket
	wire         challengeselect_s1_agent_rp_endofpacket;                                               // ChallengeSelect_s1_agent:rp_endofpacket -> router_021:sink_endofpacket
	wire         router_021_src_valid;                                                                  // router_021:src_valid -> rsp_demux_019:sink_valid
	wire  [98:0] router_021_src_data;                                                                   // router_021:src_data -> rsp_demux_019:sink_data
	wire         router_021_src_ready;                                                                  // rsp_demux_019:sink_ready -> router_021:src_ready
	wire  [19:0] router_021_src_channel;                                                                // router_021:src_channel -> rsp_demux_019:sink_channel
	wire         router_021_src_startofpacket;                                                          // router_021:src_startofpacket -> rsp_demux_019:sink_startofpacket
	wire         router_021_src_endofpacket;                                                            // router_021:src_endofpacket -> rsp_demux_019:sink_endofpacket
	wire         cmd_demux_src0_valid;                                                                  // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [98:0] cmd_demux_src0_data;                                                                   // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire         cmd_demux_src0_ready;                                                                  // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire  [19:0] cmd_demux_src0_channel;                                                                // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire         cmd_demux_src0_startofpacket;                                                          // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire         cmd_demux_src0_endofpacket;                                                            // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire         cmd_demux_src1_valid;                                                                  // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [98:0] cmd_demux_src1_data;                                                                   // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire         cmd_demux_src1_ready;                                                                  // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire  [19:0] cmd_demux_src1_channel;                                                                // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire         cmd_demux_src1_startofpacket;                                                          // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire         cmd_demux_src1_endofpacket;                                                            // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire         cmd_demux_src2_valid;                                                                  // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [98:0] cmd_demux_src2_data;                                                                   // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire         cmd_demux_src2_ready;                                                                  // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire  [19:0] cmd_demux_src2_channel;                                                                // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire         cmd_demux_src2_startofpacket;                                                          // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire         cmd_demux_src2_endofpacket;                                                            // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire         cmd_demux_src3_valid;                                                                  // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [98:0] cmd_demux_src3_data;                                                                   // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire         cmd_demux_src3_ready;                                                                  // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire  [19:0] cmd_demux_src3_channel;                                                                // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire         cmd_demux_src3_startofpacket;                                                          // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire         cmd_demux_src3_endofpacket;                                                            // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire         cmd_demux_src4_valid;                                                                  // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [98:0] cmd_demux_src4_data;                                                                   // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire         cmd_demux_src4_ready;                                                                  // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire  [19:0] cmd_demux_src4_channel;                                                                // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire         cmd_demux_src4_startofpacket;                                                          // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire         cmd_demux_src4_endofpacket;                                                            // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire         cmd_demux_src5_valid;                                                                  // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [98:0] cmd_demux_src5_data;                                                                   // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire         cmd_demux_src5_ready;                                                                  // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire  [19:0] cmd_demux_src5_channel;                                                                // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire         cmd_demux_src5_startofpacket;                                                          // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire         cmd_demux_src5_endofpacket;                                                            // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire         cmd_demux_src6_valid;                                                                  // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [98:0] cmd_demux_src6_data;                                                                   // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire         cmd_demux_src6_ready;                                                                  // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire  [19:0] cmd_demux_src6_channel;                                                                // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire         cmd_demux_src6_startofpacket;                                                          // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire         cmd_demux_src6_endofpacket;                                                            // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire         cmd_demux_src7_valid;                                                                  // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [98:0] cmd_demux_src7_data;                                                                   // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire         cmd_demux_src7_ready;                                                                  // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire  [19:0] cmd_demux_src7_channel;                                                                // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire         cmd_demux_src7_startofpacket;                                                          // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire         cmd_demux_src7_endofpacket;                                                            // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire         cmd_demux_src8_valid;                                                                  // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire  [98:0] cmd_demux_src8_data;                                                                   // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire         cmd_demux_src8_ready;                                                                  // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire  [19:0] cmd_demux_src8_channel;                                                                // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire         cmd_demux_src8_startofpacket;                                                          // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire         cmd_demux_src8_endofpacket;                                                            // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire         cmd_demux_src9_valid;                                                                  // cmd_demux:src9_valid -> cmd_mux_009:sink0_valid
	wire  [98:0] cmd_demux_src9_data;                                                                   // cmd_demux:src9_data -> cmd_mux_009:sink0_data
	wire         cmd_demux_src9_ready;                                                                  // cmd_mux_009:sink0_ready -> cmd_demux:src9_ready
	wire  [19:0] cmd_demux_src9_channel;                                                                // cmd_demux:src9_channel -> cmd_mux_009:sink0_channel
	wire         cmd_demux_src9_startofpacket;                                                          // cmd_demux:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire         cmd_demux_src9_endofpacket;                                                            // cmd_demux:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire         cmd_demux_src10_valid;                                                                 // cmd_demux:src10_valid -> cmd_mux_010:sink0_valid
	wire  [98:0] cmd_demux_src10_data;                                                                  // cmd_demux:src10_data -> cmd_mux_010:sink0_data
	wire         cmd_demux_src10_ready;                                                                 // cmd_mux_010:sink0_ready -> cmd_demux:src10_ready
	wire  [19:0] cmd_demux_src10_channel;                                                               // cmd_demux:src10_channel -> cmd_mux_010:sink0_channel
	wire         cmd_demux_src10_startofpacket;                                                         // cmd_demux:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire         cmd_demux_src10_endofpacket;                                                           // cmd_demux:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire         cmd_demux_src11_valid;                                                                 // cmd_demux:src11_valid -> cmd_mux_011:sink0_valid
	wire  [98:0] cmd_demux_src11_data;                                                                  // cmd_demux:src11_data -> cmd_mux_011:sink0_data
	wire         cmd_demux_src11_ready;                                                                 // cmd_mux_011:sink0_ready -> cmd_demux:src11_ready
	wire  [19:0] cmd_demux_src11_channel;                                                               // cmd_demux:src11_channel -> cmd_mux_011:sink0_channel
	wire         cmd_demux_src11_startofpacket;                                                         // cmd_demux:src11_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire         cmd_demux_src11_endofpacket;                                                           // cmd_demux:src11_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire         cmd_demux_src12_valid;                                                                 // cmd_demux:src12_valid -> cmd_mux_012:sink0_valid
	wire  [98:0] cmd_demux_src12_data;                                                                  // cmd_demux:src12_data -> cmd_mux_012:sink0_data
	wire         cmd_demux_src12_ready;                                                                 // cmd_mux_012:sink0_ready -> cmd_demux:src12_ready
	wire  [19:0] cmd_demux_src12_channel;                                                               // cmd_demux:src12_channel -> cmd_mux_012:sink0_channel
	wire         cmd_demux_src12_startofpacket;                                                         // cmd_demux:src12_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire         cmd_demux_src12_endofpacket;                                                           // cmd_demux:src12_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire         cmd_demux_src13_valid;                                                                 // cmd_demux:src13_valid -> cmd_mux_013:sink0_valid
	wire  [98:0] cmd_demux_src13_data;                                                                  // cmd_demux:src13_data -> cmd_mux_013:sink0_data
	wire         cmd_demux_src13_ready;                                                                 // cmd_mux_013:sink0_ready -> cmd_demux:src13_ready
	wire  [19:0] cmd_demux_src13_channel;                                                               // cmd_demux:src13_channel -> cmd_mux_013:sink0_channel
	wire         cmd_demux_src13_startofpacket;                                                         // cmd_demux:src13_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire         cmd_demux_src13_endofpacket;                                                           // cmd_demux:src13_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire         cmd_demux_src14_valid;                                                                 // cmd_demux:src14_valid -> cmd_mux_014:sink0_valid
	wire  [98:0] cmd_demux_src14_data;                                                                  // cmd_demux:src14_data -> cmd_mux_014:sink0_data
	wire         cmd_demux_src14_ready;                                                                 // cmd_mux_014:sink0_ready -> cmd_demux:src14_ready
	wire  [19:0] cmd_demux_src14_channel;                                                               // cmd_demux:src14_channel -> cmd_mux_014:sink0_channel
	wire         cmd_demux_src14_startofpacket;                                                         // cmd_demux:src14_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire         cmd_demux_src14_endofpacket;                                                           // cmd_demux:src14_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire         cmd_demux_src15_valid;                                                                 // cmd_demux:src15_valid -> cmd_mux_015:sink0_valid
	wire  [98:0] cmd_demux_src15_data;                                                                  // cmd_demux:src15_data -> cmd_mux_015:sink0_data
	wire         cmd_demux_src15_ready;                                                                 // cmd_mux_015:sink0_ready -> cmd_demux:src15_ready
	wire  [19:0] cmd_demux_src15_channel;                                                               // cmd_demux:src15_channel -> cmd_mux_015:sink0_channel
	wire         cmd_demux_src15_startofpacket;                                                         // cmd_demux:src15_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire         cmd_demux_src15_endofpacket;                                                           // cmd_demux:src15_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire         cmd_demux_src16_valid;                                                                 // cmd_demux:src16_valid -> cmd_mux_016:sink0_valid
	wire  [98:0] cmd_demux_src16_data;                                                                  // cmd_demux:src16_data -> cmd_mux_016:sink0_data
	wire         cmd_demux_src16_ready;                                                                 // cmd_mux_016:sink0_ready -> cmd_demux:src16_ready
	wire  [19:0] cmd_demux_src16_channel;                                                               // cmd_demux:src16_channel -> cmd_mux_016:sink0_channel
	wire         cmd_demux_src16_startofpacket;                                                         // cmd_demux:src16_startofpacket -> cmd_mux_016:sink0_startofpacket
	wire         cmd_demux_src16_endofpacket;                                                           // cmd_demux:src16_endofpacket -> cmd_mux_016:sink0_endofpacket
	wire         cmd_demux_src17_valid;                                                                 // cmd_demux:src17_valid -> cmd_mux_017:sink0_valid
	wire  [98:0] cmd_demux_src17_data;                                                                  // cmd_demux:src17_data -> cmd_mux_017:sink0_data
	wire         cmd_demux_src17_ready;                                                                 // cmd_mux_017:sink0_ready -> cmd_demux:src17_ready
	wire  [19:0] cmd_demux_src17_channel;                                                               // cmd_demux:src17_channel -> cmd_mux_017:sink0_channel
	wire         cmd_demux_src17_startofpacket;                                                         // cmd_demux:src17_startofpacket -> cmd_mux_017:sink0_startofpacket
	wire         cmd_demux_src17_endofpacket;                                                           // cmd_demux:src17_endofpacket -> cmd_mux_017:sink0_endofpacket
	wire         cmd_demux_src18_valid;                                                                 // cmd_demux:src18_valid -> cmd_mux_018:sink0_valid
	wire  [98:0] cmd_demux_src18_data;                                                                  // cmd_demux:src18_data -> cmd_mux_018:sink0_data
	wire         cmd_demux_src18_ready;                                                                 // cmd_mux_018:sink0_ready -> cmd_demux:src18_ready
	wire  [19:0] cmd_demux_src18_channel;                                                               // cmd_demux:src18_channel -> cmd_mux_018:sink0_channel
	wire         cmd_demux_src18_startofpacket;                                                         // cmd_demux:src18_startofpacket -> cmd_mux_018:sink0_startofpacket
	wire         cmd_demux_src18_endofpacket;                                                           // cmd_demux:src18_endofpacket -> cmd_mux_018:sink0_endofpacket
	wire         cmd_demux_src19_valid;                                                                 // cmd_demux:src19_valid -> cmd_mux_019:sink0_valid
	wire  [98:0] cmd_demux_src19_data;                                                                  // cmd_demux:src19_data -> cmd_mux_019:sink0_data
	wire         cmd_demux_src19_ready;                                                                 // cmd_mux_019:sink0_ready -> cmd_demux:src19_ready
	wire  [19:0] cmd_demux_src19_channel;                                                               // cmd_demux:src19_channel -> cmd_mux_019:sink0_channel
	wire         cmd_demux_src19_startofpacket;                                                         // cmd_demux:src19_startofpacket -> cmd_mux_019:sink0_startofpacket
	wire         cmd_demux_src19_endofpacket;                                                           // cmd_demux:src19_endofpacket -> cmd_mux_019:sink0_endofpacket
	wire         cmd_demux_001_src0_valid;                                                              // cmd_demux_001:src0_valid -> cmd_mux_001:sink1_valid
	wire  [98:0] cmd_demux_001_src0_data;                                                               // cmd_demux_001:src0_data -> cmd_mux_001:sink1_data
	wire         cmd_demux_001_src0_ready;                                                              // cmd_mux_001:sink1_ready -> cmd_demux_001:src0_ready
	wire  [19:0] cmd_demux_001_src0_channel;                                                            // cmd_demux_001:src0_channel -> cmd_mux_001:sink1_channel
	wire         cmd_demux_001_src0_startofpacket;                                                      // cmd_demux_001:src0_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire         cmd_demux_001_src0_endofpacket;                                                        // cmd_demux_001:src0_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire         cmd_demux_001_src1_valid;                                                              // cmd_demux_001:src1_valid -> cmd_mux_002:sink1_valid
	wire  [98:0] cmd_demux_001_src1_data;                                                               // cmd_demux_001:src1_data -> cmd_mux_002:sink1_data
	wire         cmd_demux_001_src1_ready;                                                              // cmd_mux_002:sink1_ready -> cmd_demux_001:src1_ready
	wire  [19:0] cmd_demux_001_src1_channel;                                                            // cmd_demux_001:src1_channel -> cmd_mux_002:sink1_channel
	wire         cmd_demux_001_src1_startofpacket;                                                      // cmd_demux_001:src1_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire         cmd_demux_001_src1_endofpacket;                                                        // cmd_demux_001:src1_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire         rsp_demux_src0_valid;                                                                  // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [98:0] rsp_demux_src0_data;                                                                   // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire         rsp_demux_src0_ready;                                                                  // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire  [19:0] rsp_demux_src0_channel;                                                                // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire         rsp_demux_src0_startofpacket;                                                          // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire         rsp_demux_src0_endofpacket;                                                            // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire         rsp_demux_001_src0_valid;                                                              // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [98:0] rsp_demux_001_src0_data;                                                               // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire         rsp_demux_001_src0_ready;                                                              // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire  [19:0] rsp_demux_001_src0_channel;                                                            // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire         rsp_demux_001_src0_startofpacket;                                                      // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire         rsp_demux_001_src0_endofpacket;                                                        // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire         rsp_demux_001_src1_valid;                                                              // rsp_demux_001:src1_valid -> rsp_mux_001:sink0_valid
	wire  [98:0] rsp_demux_001_src1_data;                                                               // rsp_demux_001:src1_data -> rsp_mux_001:sink0_data
	wire         rsp_demux_001_src1_ready;                                                              // rsp_mux_001:sink0_ready -> rsp_demux_001:src1_ready
	wire  [19:0] rsp_demux_001_src1_channel;                                                            // rsp_demux_001:src1_channel -> rsp_mux_001:sink0_channel
	wire         rsp_demux_001_src1_startofpacket;                                                      // rsp_demux_001:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire         rsp_demux_001_src1_endofpacket;                                                        // rsp_demux_001:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire         rsp_demux_002_src0_valid;                                                              // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [98:0] rsp_demux_002_src0_data;                                                               // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire         rsp_demux_002_src0_ready;                                                              // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire  [19:0] rsp_demux_002_src0_channel;                                                            // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire         rsp_demux_002_src0_startofpacket;                                                      // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire         rsp_demux_002_src0_endofpacket;                                                        // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire         rsp_demux_002_src1_valid;                                                              // rsp_demux_002:src1_valid -> rsp_mux_001:sink1_valid
	wire  [98:0] rsp_demux_002_src1_data;                                                               // rsp_demux_002:src1_data -> rsp_mux_001:sink1_data
	wire         rsp_demux_002_src1_ready;                                                              // rsp_mux_001:sink1_ready -> rsp_demux_002:src1_ready
	wire  [19:0] rsp_demux_002_src1_channel;                                                            // rsp_demux_002:src1_channel -> rsp_mux_001:sink1_channel
	wire         rsp_demux_002_src1_startofpacket;                                                      // rsp_demux_002:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire         rsp_demux_002_src1_endofpacket;                                                        // rsp_demux_002:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire         rsp_demux_003_src0_valid;                                                              // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [98:0] rsp_demux_003_src0_data;                                                               // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire         rsp_demux_003_src0_ready;                                                              // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire  [19:0] rsp_demux_003_src0_channel;                                                            // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire         rsp_demux_003_src0_startofpacket;                                                      // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire         rsp_demux_003_src0_endofpacket;                                                        // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire         rsp_demux_004_src0_valid;                                                              // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [98:0] rsp_demux_004_src0_data;                                                               // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire         rsp_demux_004_src0_ready;                                                              // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire  [19:0] rsp_demux_004_src0_channel;                                                            // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire         rsp_demux_004_src0_startofpacket;                                                      // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire         rsp_demux_004_src0_endofpacket;                                                        // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire         rsp_demux_005_src0_valid;                                                              // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [98:0] rsp_demux_005_src0_data;                                                               // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire         rsp_demux_005_src0_ready;                                                              // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire  [19:0] rsp_demux_005_src0_channel;                                                            // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire         rsp_demux_005_src0_startofpacket;                                                      // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire         rsp_demux_005_src0_endofpacket;                                                        // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire         rsp_demux_006_src0_valid;                                                              // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [98:0] rsp_demux_006_src0_data;                                                               // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire         rsp_demux_006_src0_ready;                                                              // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire  [19:0] rsp_demux_006_src0_channel;                                                            // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire         rsp_demux_006_src0_startofpacket;                                                      // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire         rsp_demux_006_src0_endofpacket;                                                        // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire         rsp_demux_007_src0_valid;                                                              // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [98:0] rsp_demux_007_src0_data;                                                               // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire         rsp_demux_007_src0_ready;                                                              // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire  [19:0] rsp_demux_007_src0_channel;                                                            // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire         rsp_demux_007_src0_startofpacket;                                                      // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire         rsp_demux_007_src0_endofpacket;                                                        // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire         rsp_demux_008_src0_valid;                                                              // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire  [98:0] rsp_demux_008_src0_data;                                                               // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire         rsp_demux_008_src0_ready;                                                              // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire  [19:0] rsp_demux_008_src0_channel;                                                            // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire         rsp_demux_008_src0_startofpacket;                                                      // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire         rsp_demux_008_src0_endofpacket;                                                        // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire         rsp_demux_009_src0_valid;                                                              // rsp_demux_009:src0_valid -> rsp_mux:sink9_valid
	wire  [98:0] rsp_demux_009_src0_data;                                                               // rsp_demux_009:src0_data -> rsp_mux:sink9_data
	wire         rsp_demux_009_src0_ready;                                                              // rsp_mux:sink9_ready -> rsp_demux_009:src0_ready
	wire  [19:0] rsp_demux_009_src0_channel;                                                            // rsp_demux_009:src0_channel -> rsp_mux:sink9_channel
	wire         rsp_demux_009_src0_startofpacket;                                                      // rsp_demux_009:src0_startofpacket -> rsp_mux:sink9_startofpacket
	wire         rsp_demux_009_src0_endofpacket;                                                        // rsp_demux_009:src0_endofpacket -> rsp_mux:sink9_endofpacket
	wire         rsp_demux_010_src0_valid;                                                              // rsp_demux_010:src0_valid -> rsp_mux:sink10_valid
	wire  [98:0] rsp_demux_010_src0_data;                                                               // rsp_demux_010:src0_data -> rsp_mux:sink10_data
	wire         rsp_demux_010_src0_ready;                                                              // rsp_mux:sink10_ready -> rsp_demux_010:src0_ready
	wire  [19:0] rsp_demux_010_src0_channel;                                                            // rsp_demux_010:src0_channel -> rsp_mux:sink10_channel
	wire         rsp_demux_010_src0_startofpacket;                                                      // rsp_demux_010:src0_startofpacket -> rsp_mux:sink10_startofpacket
	wire         rsp_demux_010_src0_endofpacket;                                                        // rsp_demux_010:src0_endofpacket -> rsp_mux:sink10_endofpacket
	wire         rsp_demux_011_src0_valid;                                                              // rsp_demux_011:src0_valid -> rsp_mux:sink11_valid
	wire  [98:0] rsp_demux_011_src0_data;                                                               // rsp_demux_011:src0_data -> rsp_mux:sink11_data
	wire         rsp_demux_011_src0_ready;                                                              // rsp_mux:sink11_ready -> rsp_demux_011:src0_ready
	wire  [19:0] rsp_demux_011_src0_channel;                                                            // rsp_demux_011:src0_channel -> rsp_mux:sink11_channel
	wire         rsp_demux_011_src0_startofpacket;                                                      // rsp_demux_011:src0_startofpacket -> rsp_mux:sink11_startofpacket
	wire         rsp_demux_011_src0_endofpacket;                                                        // rsp_demux_011:src0_endofpacket -> rsp_mux:sink11_endofpacket
	wire         rsp_demux_012_src0_valid;                                                              // rsp_demux_012:src0_valid -> rsp_mux:sink12_valid
	wire  [98:0] rsp_demux_012_src0_data;                                                               // rsp_demux_012:src0_data -> rsp_mux:sink12_data
	wire         rsp_demux_012_src0_ready;                                                              // rsp_mux:sink12_ready -> rsp_demux_012:src0_ready
	wire  [19:0] rsp_demux_012_src0_channel;                                                            // rsp_demux_012:src0_channel -> rsp_mux:sink12_channel
	wire         rsp_demux_012_src0_startofpacket;                                                      // rsp_demux_012:src0_startofpacket -> rsp_mux:sink12_startofpacket
	wire         rsp_demux_012_src0_endofpacket;                                                        // rsp_demux_012:src0_endofpacket -> rsp_mux:sink12_endofpacket
	wire         rsp_demux_013_src0_valid;                                                              // rsp_demux_013:src0_valid -> rsp_mux:sink13_valid
	wire  [98:0] rsp_demux_013_src0_data;                                                               // rsp_demux_013:src0_data -> rsp_mux:sink13_data
	wire         rsp_demux_013_src0_ready;                                                              // rsp_mux:sink13_ready -> rsp_demux_013:src0_ready
	wire  [19:0] rsp_demux_013_src0_channel;                                                            // rsp_demux_013:src0_channel -> rsp_mux:sink13_channel
	wire         rsp_demux_013_src0_startofpacket;                                                      // rsp_demux_013:src0_startofpacket -> rsp_mux:sink13_startofpacket
	wire         rsp_demux_013_src0_endofpacket;                                                        // rsp_demux_013:src0_endofpacket -> rsp_mux:sink13_endofpacket
	wire         rsp_demux_014_src0_valid;                                                              // rsp_demux_014:src0_valid -> rsp_mux:sink14_valid
	wire  [98:0] rsp_demux_014_src0_data;                                                               // rsp_demux_014:src0_data -> rsp_mux:sink14_data
	wire         rsp_demux_014_src0_ready;                                                              // rsp_mux:sink14_ready -> rsp_demux_014:src0_ready
	wire  [19:0] rsp_demux_014_src0_channel;                                                            // rsp_demux_014:src0_channel -> rsp_mux:sink14_channel
	wire         rsp_demux_014_src0_startofpacket;                                                      // rsp_demux_014:src0_startofpacket -> rsp_mux:sink14_startofpacket
	wire         rsp_demux_014_src0_endofpacket;                                                        // rsp_demux_014:src0_endofpacket -> rsp_mux:sink14_endofpacket
	wire         rsp_demux_015_src0_valid;                                                              // rsp_demux_015:src0_valid -> rsp_mux:sink15_valid
	wire  [98:0] rsp_demux_015_src0_data;                                                               // rsp_demux_015:src0_data -> rsp_mux:sink15_data
	wire         rsp_demux_015_src0_ready;                                                              // rsp_mux:sink15_ready -> rsp_demux_015:src0_ready
	wire  [19:0] rsp_demux_015_src0_channel;                                                            // rsp_demux_015:src0_channel -> rsp_mux:sink15_channel
	wire         rsp_demux_015_src0_startofpacket;                                                      // rsp_demux_015:src0_startofpacket -> rsp_mux:sink15_startofpacket
	wire         rsp_demux_015_src0_endofpacket;                                                        // rsp_demux_015:src0_endofpacket -> rsp_mux:sink15_endofpacket
	wire         rsp_demux_016_src0_valid;                                                              // rsp_demux_016:src0_valid -> rsp_mux:sink16_valid
	wire  [98:0] rsp_demux_016_src0_data;                                                               // rsp_demux_016:src0_data -> rsp_mux:sink16_data
	wire         rsp_demux_016_src0_ready;                                                              // rsp_mux:sink16_ready -> rsp_demux_016:src0_ready
	wire  [19:0] rsp_demux_016_src0_channel;                                                            // rsp_demux_016:src0_channel -> rsp_mux:sink16_channel
	wire         rsp_demux_016_src0_startofpacket;                                                      // rsp_demux_016:src0_startofpacket -> rsp_mux:sink16_startofpacket
	wire         rsp_demux_016_src0_endofpacket;                                                        // rsp_demux_016:src0_endofpacket -> rsp_mux:sink16_endofpacket
	wire         rsp_demux_017_src0_valid;                                                              // rsp_demux_017:src0_valid -> rsp_mux:sink17_valid
	wire  [98:0] rsp_demux_017_src0_data;                                                               // rsp_demux_017:src0_data -> rsp_mux:sink17_data
	wire         rsp_demux_017_src0_ready;                                                              // rsp_mux:sink17_ready -> rsp_demux_017:src0_ready
	wire  [19:0] rsp_demux_017_src0_channel;                                                            // rsp_demux_017:src0_channel -> rsp_mux:sink17_channel
	wire         rsp_demux_017_src0_startofpacket;                                                      // rsp_demux_017:src0_startofpacket -> rsp_mux:sink17_startofpacket
	wire         rsp_demux_017_src0_endofpacket;                                                        // rsp_demux_017:src0_endofpacket -> rsp_mux:sink17_endofpacket
	wire         rsp_demux_018_src0_valid;                                                              // rsp_demux_018:src0_valid -> rsp_mux:sink18_valid
	wire  [98:0] rsp_demux_018_src0_data;                                                               // rsp_demux_018:src0_data -> rsp_mux:sink18_data
	wire         rsp_demux_018_src0_ready;                                                              // rsp_mux:sink18_ready -> rsp_demux_018:src0_ready
	wire  [19:0] rsp_demux_018_src0_channel;                                                            // rsp_demux_018:src0_channel -> rsp_mux:sink18_channel
	wire         rsp_demux_018_src0_startofpacket;                                                      // rsp_demux_018:src0_startofpacket -> rsp_mux:sink18_startofpacket
	wire         rsp_demux_018_src0_endofpacket;                                                        // rsp_demux_018:src0_endofpacket -> rsp_mux:sink18_endofpacket
	wire         rsp_demux_019_src0_valid;                                                              // rsp_demux_019:src0_valid -> rsp_mux:sink19_valid
	wire  [98:0] rsp_demux_019_src0_data;                                                               // rsp_demux_019:src0_data -> rsp_mux:sink19_data
	wire         rsp_demux_019_src0_ready;                                                              // rsp_mux:sink19_ready -> rsp_demux_019:src0_ready
	wire  [19:0] rsp_demux_019_src0_channel;                                                            // rsp_demux_019:src0_channel -> rsp_mux:sink19_channel
	wire         rsp_demux_019_src0_startofpacket;                                                      // rsp_demux_019:src0_startofpacket -> rsp_mux:sink19_startofpacket
	wire         rsp_demux_019_src0_endofpacket;                                                        // rsp_demux_019:src0_endofpacket -> rsp_mux:sink19_endofpacket
	wire         jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid;                                // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire  [33:0] jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data;                                 // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire         jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready;                                // avalon_st_adapter:in_0_ready -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_out_0_valid;                                                         // avalon_st_adapter:out_0_valid -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_out_0_data;                                                          // avalon_st_adapter:out_0_data -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_out_0_ready;                                                         // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire   [0:0] avalon_st_adapter_out_0_error;                                                         // avalon_st_adapter:out_0_error -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire         nios2_processor_jtag_debug_module_agent_rdata_fifo_src_valid;                          // nios2_processor_jtag_debug_module_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire  [33:0] nios2_processor_jtag_debug_module_agent_rdata_fifo_src_data;                           // nios2_processor_jtag_debug_module_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire         nios2_processor_jtag_debug_module_agent_rdata_fifo_src_ready;                          // avalon_st_adapter_001:in_0_ready -> nios2_processor_jtag_debug_module_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_001_out_0_valid;                                                     // avalon_st_adapter_001:out_0_valid -> nios2_processor_jtag_debug_module_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_001_out_0_data;                                                      // avalon_st_adapter_001:out_0_data -> nios2_processor_jtag_debug_module_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_001_out_0_ready;                                                     // nios2_processor_jtag_debug_module_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire   [0:0] avalon_st_adapter_001_out_0_error;                                                     // avalon_st_adapter_001:out_0_error -> nios2_processor_jtag_debug_module_agent:rdata_fifo_sink_error
	wire         onchip_memory_s1_agent_rdata_fifo_src_valid;                                           // onchip_memory_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire  [33:0] onchip_memory_s1_agent_rdata_fifo_src_data;                                            // onchip_memory_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire         onchip_memory_s1_agent_rdata_fifo_src_ready;                                           // avalon_st_adapter_002:in_0_ready -> onchip_memory_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_002_out_0_valid;                                                     // avalon_st_adapter_002:out_0_valid -> onchip_memory_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_002_out_0_data;                                                      // avalon_st_adapter_002:out_0_data -> onchip_memory_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_002_out_0_ready;                                                     // onchip_memory_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire   [0:0] avalon_st_adapter_002_out_0_error;                                                     // avalon_st_adapter_002:out_0_error -> onchip_memory_s1_agent:rdata_fifo_sink_error
	wire         switches_s1_agent_rdata_fifo_src_valid;                                                // switches_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire  [33:0] switches_s1_agent_rdata_fifo_src_data;                                                 // switches_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire         switches_s1_agent_rdata_fifo_src_ready;                                                // avalon_st_adapter_003:in_0_ready -> switches_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_003_out_0_valid;                                                     // avalon_st_adapter_003:out_0_valid -> switches_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_003_out_0_data;                                                      // avalon_st_adapter_003:out_0_data -> switches_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_003_out_0_ready;                                                     // switches_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire   [0:0] avalon_st_adapter_003_out_0_error;                                                     // avalon_st_adapter_003:out_0_error -> switches_s1_agent:rdata_fifo_sink_error
	wire         leds_s1_agent_rdata_fifo_src_valid;                                                    // LEDs_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire  [33:0] leds_s1_agent_rdata_fifo_src_data;                                                     // LEDs_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire         leds_s1_agent_rdata_fifo_src_ready;                                                    // avalon_st_adapter_004:in_0_ready -> LEDs_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_004_out_0_valid;                                                     // avalon_st_adapter_004:out_0_valid -> LEDs_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_004_out_0_data;                                                      // avalon_st_adapter_004:out_0_data -> LEDs_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_004_out_0_ready;                                                     // LEDs_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire   [0:0] avalon_st_adapter_004_out_0_error;                                                     // avalon_st_adapter_004:out_0_error -> LEDs_s1_agent:rdata_fifo_sink_error
	wire         encoderincm_s1_agent_rdata_fifo_src_valid;                                             // encoderInCM_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	wire  [33:0] encoderincm_s1_agent_rdata_fifo_src_data;                                              // encoderInCM_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	wire         encoderincm_s1_agent_rdata_fifo_src_ready;                                             // avalon_st_adapter_005:in_0_ready -> encoderInCM_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_005_out_0_valid;                                                     // avalon_st_adapter_005:out_0_valid -> encoderInCM_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_005_out_0_data;                                                      // avalon_st_adapter_005:out_0_data -> encoderInCM_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_005_out_0_ready;                                                     // encoderInCM_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire   [0:0] avalon_st_adapter_005_out_0_error;                                                     // avalon_st_adapter_005:out_0_error -> encoderInCM_s1_agent:rdata_fifo_sink_error
	wire         frsensor_s1_agent_rdata_fifo_src_valid;                                                // FRSensor_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_006:in_0_valid
	wire  [33:0] frsensor_s1_agent_rdata_fifo_src_data;                                                 // FRSensor_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_006:in_0_data
	wire         frsensor_s1_agent_rdata_fifo_src_ready;                                                // avalon_st_adapter_006:in_0_ready -> FRSensor_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_006_out_0_valid;                                                     // avalon_st_adapter_006:out_0_valid -> FRSensor_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_006_out_0_data;                                                      // avalon_st_adapter_006:out_0_data -> FRSensor_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_006_out_0_ready;                                                     // FRSensor_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire   [0:0] avalon_st_adapter_006_out_0_error;                                                     // avalon_st_adapter_006:out_0_error -> FRSensor_s1_agent:rdata_fifo_sink_error
	wire         flsensor_s1_agent_rdata_fifo_src_valid;                                                // FLSensor_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_007:in_0_valid
	wire  [33:0] flsensor_s1_agent_rdata_fifo_src_data;                                                 // FLSensor_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_007:in_0_data
	wire         flsensor_s1_agent_rdata_fifo_src_ready;                                                // avalon_st_adapter_007:in_0_ready -> FLSensor_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_007_out_0_valid;                                                     // avalon_st_adapter_007:out_0_valid -> FLSensor_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_007_out_0_data;                                                      // avalon_st_adapter_007:out_0_data -> FLSensor_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_007_out_0_ready;                                                     // FLSensor_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire   [0:0] avalon_st_adapter_007_out_0_error;                                                     // avalon_st_adapter_007:out_0_error -> FLSensor_s1_agent:rdata_fifo_sink_error
	wire         lsensor_s1_agent_rdata_fifo_src_valid;                                                 // LSensor_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_008:in_0_valid
	wire  [33:0] lsensor_s1_agent_rdata_fifo_src_data;                                                  // LSensor_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_008:in_0_data
	wire         lsensor_s1_agent_rdata_fifo_src_ready;                                                 // avalon_st_adapter_008:in_0_ready -> LSensor_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_008_out_0_valid;                                                     // avalon_st_adapter_008:out_0_valid -> LSensor_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_008_out_0_data;                                                      // avalon_st_adapter_008:out_0_data -> LSensor_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_008_out_0_ready;                                                     // LSensor_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire   [0:0] avalon_st_adapter_008_out_0_error;                                                     // avalon_st_adapter_008:out_0_error -> LSensor_s1_agent:rdata_fifo_sink_error
	wire         rsensor_s1_agent_rdata_fifo_src_valid;                                                 // RSensor_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_009:in_0_valid
	wire  [33:0] rsensor_s1_agent_rdata_fifo_src_data;                                                  // RSensor_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_009:in_0_data
	wire         rsensor_s1_agent_rdata_fifo_src_ready;                                                 // avalon_st_adapter_009:in_0_ready -> RSensor_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_009_out_0_valid;                                                     // avalon_st_adapter_009:out_0_valid -> RSensor_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_009_out_0_data;                                                      // avalon_st_adapter_009:out_0_data -> RSensor_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_009_out_0_ready;                                                     // RSensor_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire   [0:0] avalon_st_adapter_009_out_0_error;                                                     // avalon_st_adapter_009:out_0_error -> RSensor_s1_agent:rdata_fifo_sink_error
	wire         blsensor_s1_agent_rdata_fifo_src_valid;                                                // BLSensor_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_010:in_0_valid
	wire  [33:0] blsensor_s1_agent_rdata_fifo_src_data;                                                 // BLSensor_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_010:in_0_data
	wire         blsensor_s1_agent_rdata_fifo_src_ready;                                                // avalon_st_adapter_010:in_0_ready -> BLSensor_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_010_out_0_valid;                                                     // avalon_st_adapter_010:out_0_valid -> BLSensor_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_010_out_0_data;                                                      // avalon_st_adapter_010:out_0_data -> BLSensor_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_010_out_0_ready;                                                     // BLSensor_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire   [0:0] avalon_st_adapter_010_out_0_error;                                                     // avalon_st_adapter_010:out_0_error -> BLSensor_s1_agent:rdata_fifo_sink_error
	wire         drivespeed_s1_agent_rdata_fifo_src_valid;                                              // driveSpeed_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_011:in_0_valid
	wire  [33:0] drivespeed_s1_agent_rdata_fifo_src_data;                                               // driveSpeed_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_011:in_0_data
	wire         drivespeed_s1_agent_rdata_fifo_src_ready;                                              // avalon_st_adapter_011:in_0_ready -> driveSpeed_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_011_out_0_valid;                                                     // avalon_st_adapter_011:out_0_valid -> driveSpeed_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_011_out_0_data;                                                      // avalon_st_adapter_011:out_0_data -> driveSpeed_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_011_out_0_ready;                                                     // driveSpeed_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire   [0:0] avalon_st_adapter_011_out_0_error;                                                     // avalon_st_adapter_011:out_0_error -> driveSpeed_s1_agent:rdata_fifo_sink_error
	wire         brsensor_s1_agent_rdata_fifo_src_valid;                                                // BRSensor_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_012:in_0_valid
	wire  [33:0] brsensor_s1_agent_rdata_fifo_src_data;                                                 // BRSensor_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_012:in_0_data
	wire         brsensor_s1_agent_rdata_fifo_src_ready;                                                // avalon_st_adapter_012:in_0_ready -> BRSensor_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_012_out_0_valid;                                                     // avalon_st_adapter_012:out_0_valid -> BRSensor_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_012_out_0_data;                                                      // avalon_st_adapter_012:out_0_data -> BRSensor_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_012_out_0_ready;                                                     // BRSensor_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_012:out_0_ready
	wire   [0:0] avalon_st_adapter_012_out_0_error;                                                     // avalon_st_adapter_012:out_0_error -> BRSensor_s1_agent:rdata_fifo_sink_error
	wire         targetdirection_s1_agent_rdata_fifo_src_valid;                                         // targetDirection_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_013:in_0_valid
	wire  [33:0] targetdirection_s1_agent_rdata_fifo_src_data;                                          // targetDirection_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_013:in_0_data
	wire         targetdirection_s1_agent_rdata_fifo_src_ready;                                         // avalon_st_adapter_013:in_0_ready -> targetDirection_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_013_out_0_valid;                                                     // avalon_st_adapter_013:out_0_valid -> targetDirection_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_013_out_0_data;                                                      // avalon_st_adapter_013:out_0_data -> targetDirection_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_013_out_0_ready;                                                     // targetDirection_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_013:out_0_ready
	wire   [0:0] avalon_st_adapter_013_out_0_error;                                                     // avalon_st_adapter_013:out_0_error -> targetDirection_s1_agent:rdata_fifo_sink_error
	wire         redlight_s1_agent_rdata_fifo_src_valid;                                                // redlight_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_014:in_0_valid
	wire  [33:0] redlight_s1_agent_rdata_fifo_src_data;                                                 // redlight_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_014:in_0_data
	wire         redlight_s1_agent_rdata_fifo_src_ready;                                                // avalon_st_adapter_014:in_0_ready -> redlight_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_014_out_0_valid;                                                     // avalon_st_adapter_014:out_0_valid -> redlight_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_014_out_0_data;                                                      // avalon_st_adapter_014:out_0_data -> redlight_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_014_out_0_ready;                                                     // redlight_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_014:out_0_ready
	wire   [0:0] avalon_st_adapter_014_out_0_error;                                                     // avalon_st_adapter_014:out_0_error -> redlight_s1_agent:rdata_fifo_sink_error
	wire         yellowlight_s1_agent_rdata_fifo_src_valid;                                             // yellowlight_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_015:in_0_valid
	wire  [33:0] yellowlight_s1_agent_rdata_fifo_src_data;                                              // yellowlight_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_015:in_0_data
	wire         yellowlight_s1_agent_rdata_fifo_src_ready;                                             // avalon_st_adapter_015:in_0_ready -> yellowlight_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_015_out_0_valid;                                                     // avalon_st_adapter_015:out_0_valid -> yellowlight_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_015_out_0_data;                                                      // avalon_st_adapter_015:out_0_data -> yellowlight_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_015_out_0_ready;                                                     // yellowlight_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_015:out_0_ready
	wire   [0:0] avalon_st_adapter_015_out_0_error;                                                     // avalon_st_adapter_015:out_0_error -> yellowlight_s1_agent:rdata_fifo_sink_error
	wire         greenlight_s1_agent_rdata_fifo_src_valid;                                              // greenlight_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_016:in_0_valid
	wire  [33:0] greenlight_s1_agent_rdata_fifo_src_data;                                               // greenlight_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_016:in_0_data
	wire         greenlight_s1_agent_rdata_fifo_src_ready;                                              // avalon_st_adapter_016:in_0_ready -> greenlight_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_016_out_0_valid;                                                     // avalon_st_adapter_016:out_0_valid -> greenlight_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_016_out_0_data;                                                      // avalon_st_adapter_016:out_0_data -> greenlight_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_016_out_0_ready;                                                     // greenlight_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_016:out_0_ready
	wire   [0:0] avalon_st_adapter_016_out_0_error;                                                     // avalon_st_adapter_016:out_0_error -> greenlight_s1_agent:rdata_fifo_sink_error
	wire         reverse_s1_agent_rdata_fifo_src_valid;                                                 // reverse_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_017:in_0_valid
	wire  [33:0] reverse_s1_agent_rdata_fifo_src_data;                                                  // reverse_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_017:in_0_data
	wire         reverse_s1_agent_rdata_fifo_src_ready;                                                 // avalon_st_adapter_017:in_0_ready -> reverse_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_017_out_0_valid;                                                     // avalon_st_adapter_017:out_0_valid -> reverse_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_017_out_0_data;                                                      // avalon_st_adapter_017:out_0_data -> reverse_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_017_out_0_ready;                                                     // reverse_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_017:out_0_ready
	wire   [0:0] avalon_st_adapter_017_out_0_error;                                                     // avalon_st_adapter_017:out_0_error -> reverse_s1_agent:rdata_fifo_sink_error
	wire         encoderreset_s1_agent_rdata_fifo_src_valid;                                            // encoderreset_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_018:in_0_valid
	wire  [33:0] encoderreset_s1_agent_rdata_fifo_src_data;                                             // encoderreset_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_018:in_0_data
	wire         encoderreset_s1_agent_rdata_fifo_src_ready;                                            // avalon_st_adapter_018:in_0_ready -> encoderreset_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_018_out_0_valid;                                                     // avalon_st_adapter_018:out_0_valid -> encoderreset_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_018_out_0_data;                                                      // avalon_st_adapter_018:out_0_data -> encoderreset_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_018_out_0_ready;                                                     // encoderreset_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_018:out_0_ready
	wire   [0:0] avalon_st_adapter_018_out_0_error;                                                     // avalon_st_adapter_018:out_0_error -> encoderreset_s1_agent:rdata_fifo_sink_error
	wire         challengeselect_s1_agent_rdata_fifo_src_valid;                                         // ChallengeSelect_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_019:in_0_valid
	wire  [33:0] challengeselect_s1_agent_rdata_fifo_src_data;                                          // ChallengeSelect_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_019:in_0_data
	wire         challengeselect_s1_agent_rdata_fifo_src_ready;                                         // avalon_st_adapter_019:in_0_ready -> ChallengeSelect_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_019_out_0_valid;                                                     // avalon_st_adapter_019:out_0_valid -> ChallengeSelect_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_019_out_0_data;                                                      // avalon_st_adapter_019:out_0_data -> ChallengeSelect_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_019_out_0_ready;                                                     // ChallengeSelect_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_019:out_0_ready
	wire   [0:0] avalon_st_adapter_019_out_0_error;                                                     // avalon_st_adapter_019:out_0_error -> ChallengeSelect_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (19),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (19),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (1)
	) nios2_processor_data_master_translator (
		.clk                    (clk_0_clk_clk),                                                                  //                       clk.clk
		.reset                  (nios2_processor_reset_n_reset_bridge_in_reset_reset),                            //                     reset.reset
		.uav_address            (nios2_processor_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_processor_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_processor_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_processor_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_processor_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_processor_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_processor_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_processor_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_processor_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_processor_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_processor_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (nios2_processor_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (nios2_processor_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (nios2_processor_data_master_byteenable),                                         //                          .byteenable
		.av_read                (nios2_processor_data_master_read),                                               //                          .read
		.av_readdata            (nios2_processor_data_master_readdata),                                           //                          .readdata
		.av_write               (nios2_processor_data_master_write),                                              //                          .write
		.av_writedata           (nios2_processor_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (nios2_processor_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                                           //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                           //               (terminated)
		.av_begintransfer       (1'b0),                                                                           //               (terminated)
		.av_chipselect          (1'b0),                                                                           //               (terminated)
		.av_readdatavalid       (),                                                                               //               (terminated)
		.av_lock                (1'b0),                                                                           //               (terminated)
		.uav_clken              (),                                                                               //               (terminated)
		.av_clken               (1'b1),                                                                           //               (terminated)
		.uav_response           (2'b00),                                                                          //               (terminated)
		.av_response            (),                                                                               //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                           //               (terminated)
		.av_writeresponsevalid  ()                                                                                //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (19),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (19),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios2_processor_instruction_master_translator (
		.clk                    (clk_0_clk_clk),                                                                         //                       clk.clk
		.reset                  (nios2_processor_reset_n_reset_bridge_in_reset_reset),                                   //                     reset.reset
		.uav_address            (nios2_processor_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_processor_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_processor_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_processor_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_processor_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_processor_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_processor_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_processor_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_processor_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_processor_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_processor_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (nios2_processor_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (nios2_processor_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (nios2_processor_instruction_master_read),                                               //                          .read
		.av_readdata            (nios2_processor_instruction_master_readdata),                                           //                          .readdata
		.av_burstcount          (1'b1),                                                                                  //               (terminated)
		.av_byteenable          (4'b1111),                                                                               //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                                  //               (terminated)
		.av_begintransfer       (1'b0),                                                                                  //               (terminated)
		.av_chipselect          (1'b0),                                                                                  //               (terminated)
		.av_readdatavalid       (),                                                                                      //               (terminated)
		.av_write               (1'b0),                                                                                  //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                                  //               (terminated)
		.av_lock                (1'b0),                                                                                  //               (terminated)
		.av_debugaccess         (1'b0),                                                                                  //               (terminated)
		.uav_clken              (),                                                                                      //               (terminated)
		.av_clken               (1'b1),                                                                                  //               (terminated)
		.uav_response           (2'b00),                                                                                 //               (terminated)
		.av_response            (),                                                                                      //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                                  //               (terminated)
		.av_writeresponsevalid  ()                                                                                       //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_avalon_jtag_slave_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (nios2_processor_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (jtag_uart_avalon_jtag_slave_agent_m0_address),        // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),     //                         .burstcount
		.uav_read               (jtag_uart_avalon_jtag_slave_agent_m0_read),           //                         .read
		.uav_write              (jtag_uart_avalon_jtag_slave_agent_m0_write),          //                         .write
		.uav_waitrequest        (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),    //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid),  //                         .readdatavalid
		.uav_byteenable         (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),     //                         .byteenable
		.uav_readdata           (jtag_uart_avalon_jtag_slave_agent_m0_readdata),       //                         .readdata
		.uav_writedata          (jtag_uart_avalon_jtag_slave_agent_m0_writedata),      //                         .writedata
		.uav_lock               (jtag_uart_avalon_jtag_slave_agent_m0_lock),           //                         .lock
		.uav_debugaccess        (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),    //                         .debugaccess
		.av_address             (jtag_uart_avalon_jtag_slave_address),                 //      avalon_anti_slave_0.address
		.av_write               (jtag_uart_avalon_jtag_slave_write),                   //                         .write
		.av_read                (jtag_uart_avalon_jtag_slave_read),                    //                         .read
		.av_readdata            (jtag_uart_avalon_jtag_slave_readdata),                //                         .readdata
		.av_writedata           (jtag_uart_avalon_jtag_slave_writedata),               //                         .writedata
		.av_waitrequest         (jtag_uart_avalon_jtag_slave_waitrequest),             //                         .waitrequest
		.av_chipselect          (jtag_uart_avalon_jtag_slave_chipselect),              //                         .chipselect
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios2_processor_jtag_debug_module_translator (
		.clk                    (clk_0_clk_clk),                                            //                      clk.clk
		.reset                  (nios2_processor_reset_n_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (nios2_processor_jtag_debug_module_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (nios2_processor_jtag_debug_module_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (nios2_processor_jtag_debug_module_agent_m0_read),          //                         .read
		.uav_write              (nios2_processor_jtag_debug_module_agent_m0_write),         //                         .write
		.uav_waitrequest        (nios2_processor_jtag_debug_module_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (nios2_processor_jtag_debug_module_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (nios2_processor_jtag_debug_module_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (nios2_processor_jtag_debug_module_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (nios2_processor_jtag_debug_module_agent_m0_writedata),     //                         .writedata
		.uav_lock               (nios2_processor_jtag_debug_module_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (nios2_processor_jtag_debug_module_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (nios2_processor_jtag_debug_module_address),                //      avalon_anti_slave_0.address
		.av_write               (nios2_processor_jtag_debug_module_write),                  //                         .write
		.av_read                (nios2_processor_jtag_debug_module_read),                   //                         .read
		.av_readdata            (nios2_processor_jtag_debug_module_readdata),               //                         .readdata
		.av_writedata           (nios2_processor_jtag_debug_module_writedata),              //                         .writedata
		.av_byteenable          (nios2_processor_jtag_debug_module_byteenable),             //                         .byteenable
		.av_waitrequest         (nios2_processor_jtag_debug_module_waitrequest),            //                         .waitrequest
		.av_debugaccess         (nios2_processor_jtag_debug_module_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                                         //              (terminated)
		.av_beginbursttransfer  (),                                                         //              (terminated)
		.av_burstcount          (),                                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                                     //              (terminated)
		.av_writebyteenable     (),                                                         //              (terminated)
		.av_lock                (),                                                         //              (terminated)
		.av_chipselect          (),                                                         //              (terminated)
		.av_clken               (),                                                         //              (terminated)
		.uav_clken              (1'b0),                                                     //              (terminated)
		.av_outputenable        (),                                                         //              (terminated)
		.uav_response           (),                                                         //              (terminated)
		.av_response            (2'b00),                                                    //              (terminated)
		.uav_writeresponsevalid (),                                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (16),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_memory_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (nios2_processor_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (onchip_memory_s1_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount         (onchip_memory_s1_agent_m0_burstcount),                //                         .burstcount
		.uav_read               (onchip_memory_s1_agent_m0_read),                      //                         .read
		.uav_write              (onchip_memory_s1_agent_m0_write),                     //                         .write
		.uav_waitrequest        (onchip_memory_s1_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid      (onchip_memory_s1_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable         (onchip_memory_s1_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata           (onchip_memory_s1_agent_m0_readdata),                  //                         .readdata
		.uav_writedata          (onchip_memory_s1_agent_m0_writedata),                 //                         .writedata
		.uav_lock               (onchip_memory_s1_agent_m0_lock),                      //                         .lock
		.uav_debugaccess        (onchip_memory_s1_agent_m0_debugaccess),               //                         .debugaccess
		.av_address             (onchip_memory_s1_address),                            //      avalon_anti_slave_0.address
		.av_write               (onchip_memory_s1_write),                              //                         .write
		.av_readdata            (onchip_memory_s1_readdata),                           //                         .readdata
		.av_writedata           (onchip_memory_s1_writedata),                          //                         .writedata
		.av_byteenable          (onchip_memory_s1_byteenable),                         //                         .byteenable
		.av_chipselect          (onchip_memory_s1_chipselect),                         //                         .chipselect
		.av_clken               (onchip_memory_s1_clken),                              //                         .clken
		.av_read                (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) switches_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (nios2_processor_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (switches_s1_agent_m0_address),                        // avalon_universal_slave_0.address
		.uav_burstcount         (switches_s1_agent_m0_burstcount),                     //                         .burstcount
		.uav_read               (switches_s1_agent_m0_read),                           //                         .read
		.uav_write              (switches_s1_agent_m0_write),                          //                         .write
		.uav_waitrequest        (switches_s1_agent_m0_waitrequest),                    //                         .waitrequest
		.uav_readdatavalid      (switches_s1_agent_m0_readdatavalid),                  //                         .readdatavalid
		.uav_byteenable         (switches_s1_agent_m0_byteenable),                     //                         .byteenable
		.uav_readdata           (switches_s1_agent_m0_readdata),                       //                         .readdata
		.uav_writedata          (switches_s1_agent_m0_writedata),                      //                         .writedata
		.uav_lock               (switches_s1_agent_m0_lock),                           //                         .lock
		.uav_debugaccess        (switches_s1_agent_m0_debugaccess),                    //                         .debugaccess
		.av_address             (switches_s1_address),                                 //      avalon_anti_slave_0.address
		.av_readdata            (switches_s1_readdata),                                //                         .readdata
		.av_write               (),                                                    //              (terminated)
		.av_read                (),                                                    //              (terminated)
		.av_writedata           (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) leds_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (nios2_processor_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (leds_s1_agent_m0_address),                            // avalon_universal_slave_0.address
		.uav_burstcount         (leds_s1_agent_m0_burstcount),                         //                         .burstcount
		.uav_read               (leds_s1_agent_m0_read),                               //                         .read
		.uav_write              (leds_s1_agent_m0_write),                              //                         .write
		.uav_waitrequest        (leds_s1_agent_m0_waitrequest),                        //                         .waitrequest
		.uav_readdatavalid      (leds_s1_agent_m0_readdatavalid),                      //                         .readdatavalid
		.uav_byteenable         (leds_s1_agent_m0_byteenable),                         //                         .byteenable
		.uav_readdata           (leds_s1_agent_m0_readdata),                           //                         .readdata
		.uav_writedata          (leds_s1_agent_m0_writedata),                          //                         .writedata
		.uav_lock               (leds_s1_agent_m0_lock),                               //                         .lock
		.uav_debugaccess        (leds_s1_agent_m0_debugaccess),                        //                         .debugaccess
		.av_address             (LEDs_s1_address),                                     //      avalon_anti_slave_0.address
		.av_write               (LEDs_s1_write),                                       //                         .write
		.av_readdata            (LEDs_s1_readdata),                                    //                         .readdata
		.av_writedata           (LEDs_s1_writedata),                                   //                         .writedata
		.av_chipselect          (LEDs_s1_chipselect),                                  //                         .chipselect
		.av_read                (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) encoderincm_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (nios2_processor_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (encoderincm_s1_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (encoderincm_s1_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (encoderincm_s1_agent_m0_read),                        //                         .read
		.uav_write              (encoderincm_s1_agent_m0_write),                       //                         .write
		.uav_waitrequest        (encoderincm_s1_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (encoderincm_s1_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (encoderincm_s1_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (encoderincm_s1_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (encoderincm_s1_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (encoderincm_s1_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (encoderincm_s1_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (encoderInCM_s1_address),                              //      avalon_anti_slave_0.address
		.av_readdata            (encoderInCM_s1_readdata),                             //                         .readdata
		.av_write               (),                                                    //              (terminated)
		.av_read                (),                                                    //              (terminated)
		.av_writedata           (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) frsensor_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (nios2_processor_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (frsensor_s1_agent_m0_address),                        // avalon_universal_slave_0.address
		.uav_burstcount         (frsensor_s1_agent_m0_burstcount),                     //                         .burstcount
		.uav_read               (frsensor_s1_agent_m0_read),                           //                         .read
		.uav_write              (frsensor_s1_agent_m0_write),                          //                         .write
		.uav_waitrequest        (frsensor_s1_agent_m0_waitrequest),                    //                         .waitrequest
		.uav_readdatavalid      (frsensor_s1_agent_m0_readdatavalid),                  //                         .readdatavalid
		.uav_byteenable         (frsensor_s1_agent_m0_byteenable),                     //                         .byteenable
		.uav_readdata           (frsensor_s1_agent_m0_readdata),                       //                         .readdata
		.uav_writedata          (frsensor_s1_agent_m0_writedata),                      //                         .writedata
		.uav_lock               (frsensor_s1_agent_m0_lock),                           //                         .lock
		.uav_debugaccess        (frsensor_s1_agent_m0_debugaccess),                    //                         .debugaccess
		.av_address             (FRSensor_s1_address),                                 //      avalon_anti_slave_0.address
		.av_readdata            (FRSensor_s1_readdata),                                //                         .readdata
		.av_write               (),                                                    //              (terminated)
		.av_read                (),                                                    //              (terminated)
		.av_writedata           (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) flsensor_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (nios2_processor_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (flsensor_s1_agent_m0_address),                        // avalon_universal_slave_0.address
		.uav_burstcount         (flsensor_s1_agent_m0_burstcount),                     //                         .burstcount
		.uav_read               (flsensor_s1_agent_m0_read),                           //                         .read
		.uav_write              (flsensor_s1_agent_m0_write),                          //                         .write
		.uav_waitrequest        (flsensor_s1_agent_m0_waitrequest),                    //                         .waitrequest
		.uav_readdatavalid      (flsensor_s1_agent_m0_readdatavalid),                  //                         .readdatavalid
		.uav_byteenable         (flsensor_s1_agent_m0_byteenable),                     //                         .byteenable
		.uav_readdata           (flsensor_s1_agent_m0_readdata),                       //                         .readdata
		.uav_writedata          (flsensor_s1_agent_m0_writedata),                      //                         .writedata
		.uav_lock               (flsensor_s1_agent_m0_lock),                           //                         .lock
		.uav_debugaccess        (flsensor_s1_agent_m0_debugaccess),                    //                         .debugaccess
		.av_address             (FLSensor_s1_address),                                 //      avalon_anti_slave_0.address
		.av_readdata            (FLSensor_s1_readdata),                                //                         .readdata
		.av_write               (),                                                    //              (terminated)
		.av_read                (),                                                    //              (terminated)
		.av_writedata           (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) lsensor_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (nios2_processor_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (lsensor_s1_agent_m0_address),                         // avalon_universal_slave_0.address
		.uav_burstcount         (lsensor_s1_agent_m0_burstcount),                      //                         .burstcount
		.uav_read               (lsensor_s1_agent_m0_read),                            //                         .read
		.uav_write              (lsensor_s1_agent_m0_write),                           //                         .write
		.uav_waitrequest        (lsensor_s1_agent_m0_waitrequest),                     //                         .waitrequest
		.uav_readdatavalid      (lsensor_s1_agent_m0_readdatavalid),                   //                         .readdatavalid
		.uav_byteenable         (lsensor_s1_agent_m0_byteenable),                      //                         .byteenable
		.uav_readdata           (lsensor_s1_agent_m0_readdata),                        //                         .readdata
		.uav_writedata          (lsensor_s1_agent_m0_writedata),                       //                         .writedata
		.uav_lock               (lsensor_s1_agent_m0_lock),                            //                         .lock
		.uav_debugaccess        (lsensor_s1_agent_m0_debugaccess),                     //                         .debugaccess
		.av_address             (LSensor_s1_address),                                  //      avalon_anti_slave_0.address
		.av_readdata            (LSensor_s1_readdata),                                 //                         .readdata
		.av_write               (),                                                    //              (terminated)
		.av_read                (),                                                    //              (terminated)
		.av_writedata           (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) rsensor_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (nios2_processor_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (rsensor_s1_agent_m0_address),                         // avalon_universal_slave_0.address
		.uav_burstcount         (rsensor_s1_agent_m0_burstcount),                      //                         .burstcount
		.uav_read               (rsensor_s1_agent_m0_read),                            //                         .read
		.uav_write              (rsensor_s1_agent_m0_write),                           //                         .write
		.uav_waitrequest        (rsensor_s1_agent_m0_waitrequest),                     //                         .waitrequest
		.uav_readdatavalid      (rsensor_s1_agent_m0_readdatavalid),                   //                         .readdatavalid
		.uav_byteenable         (rsensor_s1_agent_m0_byteenable),                      //                         .byteenable
		.uav_readdata           (rsensor_s1_agent_m0_readdata),                        //                         .readdata
		.uav_writedata          (rsensor_s1_agent_m0_writedata),                       //                         .writedata
		.uav_lock               (rsensor_s1_agent_m0_lock),                            //                         .lock
		.uav_debugaccess        (rsensor_s1_agent_m0_debugaccess),                     //                         .debugaccess
		.av_address             (RSensor_s1_address),                                  //      avalon_anti_slave_0.address
		.av_readdata            (RSensor_s1_readdata),                                 //                         .readdata
		.av_write               (),                                                    //              (terminated)
		.av_read                (),                                                    //              (terminated)
		.av_writedata           (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) blsensor_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (nios2_processor_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (blsensor_s1_agent_m0_address),                        // avalon_universal_slave_0.address
		.uav_burstcount         (blsensor_s1_agent_m0_burstcount),                     //                         .burstcount
		.uav_read               (blsensor_s1_agent_m0_read),                           //                         .read
		.uav_write              (blsensor_s1_agent_m0_write),                          //                         .write
		.uav_waitrequest        (blsensor_s1_agent_m0_waitrequest),                    //                         .waitrequest
		.uav_readdatavalid      (blsensor_s1_agent_m0_readdatavalid),                  //                         .readdatavalid
		.uav_byteenable         (blsensor_s1_agent_m0_byteenable),                     //                         .byteenable
		.uav_readdata           (blsensor_s1_agent_m0_readdata),                       //                         .readdata
		.uav_writedata          (blsensor_s1_agent_m0_writedata),                      //                         .writedata
		.uav_lock               (blsensor_s1_agent_m0_lock),                           //                         .lock
		.uav_debugaccess        (blsensor_s1_agent_m0_debugaccess),                    //                         .debugaccess
		.av_address             (BLSensor_s1_address),                                 //      avalon_anti_slave_0.address
		.av_readdata            (BLSensor_s1_readdata),                                //                         .readdata
		.av_write               (),                                                    //              (terminated)
		.av_read                (),                                                    //              (terminated)
		.av_writedata           (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) drivespeed_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (nios2_processor_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (drivespeed_s1_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (drivespeed_s1_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (drivespeed_s1_agent_m0_read),                         //                         .read
		.uav_write              (drivespeed_s1_agent_m0_write),                        //                         .write
		.uav_waitrequest        (drivespeed_s1_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (drivespeed_s1_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (drivespeed_s1_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (drivespeed_s1_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (drivespeed_s1_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (drivespeed_s1_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (drivespeed_s1_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (driveSpeed_s1_address),                               //      avalon_anti_slave_0.address
		.av_write               (driveSpeed_s1_write),                                 //                         .write
		.av_readdata            (driveSpeed_s1_readdata),                              //                         .readdata
		.av_writedata           (driveSpeed_s1_writedata),                             //                         .writedata
		.av_chipselect          (driveSpeed_s1_chipselect),                            //                         .chipselect
		.av_read                (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) brsensor_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (nios2_processor_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (brsensor_s1_agent_m0_address),                        // avalon_universal_slave_0.address
		.uav_burstcount         (brsensor_s1_agent_m0_burstcount),                     //                         .burstcount
		.uav_read               (brsensor_s1_agent_m0_read),                           //                         .read
		.uav_write              (brsensor_s1_agent_m0_write),                          //                         .write
		.uav_waitrequest        (brsensor_s1_agent_m0_waitrequest),                    //                         .waitrequest
		.uav_readdatavalid      (brsensor_s1_agent_m0_readdatavalid),                  //                         .readdatavalid
		.uav_byteenable         (brsensor_s1_agent_m0_byteenable),                     //                         .byteenable
		.uav_readdata           (brsensor_s1_agent_m0_readdata),                       //                         .readdata
		.uav_writedata          (brsensor_s1_agent_m0_writedata),                      //                         .writedata
		.uav_lock               (brsensor_s1_agent_m0_lock),                           //                         .lock
		.uav_debugaccess        (brsensor_s1_agent_m0_debugaccess),                    //                         .debugaccess
		.av_address             (BRSensor_s1_address),                                 //      avalon_anti_slave_0.address
		.av_readdata            (BRSensor_s1_readdata),                                //                         .readdata
		.av_write               (),                                                    //              (terminated)
		.av_read                (),                                                    //              (terminated)
		.av_writedata           (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) targetdirection_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (nios2_processor_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (targetdirection_s1_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (targetdirection_s1_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (targetdirection_s1_agent_m0_read),                    //                         .read
		.uav_write              (targetdirection_s1_agent_m0_write),                   //                         .write
		.uav_waitrequest        (targetdirection_s1_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (targetdirection_s1_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (targetdirection_s1_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (targetdirection_s1_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (targetdirection_s1_agent_m0_writedata),               //                         .writedata
		.uav_lock               (targetdirection_s1_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (targetdirection_s1_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (targetDirection_s1_address),                          //      avalon_anti_slave_0.address
		.av_write               (targetDirection_s1_write),                            //                         .write
		.av_readdata            (targetDirection_s1_readdata),                         //                         .readdata
		.av_writedata           (targetDirection_s1_writedata),                        //                         .writedata
		.av_chipselect          (targetDirection_s1_chipselect),                       //                         .chipselect
		.av_read                (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) redlight_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (nios2_processor_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (redlight_s1_agent_m0_address),                        // avalon_universal_slave_0.address
		.uav_burstcount         (redlight_s1_agent_m0_burstcount),                     //                         .burstcount
		.uav_read               (redlight_s1_agent_m0_read),                           //                         .read
		.uav_write              (redlight_s1_agent_m0_write),                          //                         .write
		.uav_waitrequest        (redlight_s1_agent_m0_waitrequest),                    //                         .waitrequest
		.uav_readdatavalid      (redlight_s1_agent_m0_readdatavalid),                  //                         .readdatavalid
		.uav_byteenable         (redlight_s1_agent_m0_byteenable),                     //                         .byteenable
		.uav_readdata           (redlight_s1_agent_m0_readdata),                       //                         .readdata
		.uav_writedata          (redlight_s1_agent_m0_writedata),                      //                         .writedata
		.uav_lock               (redlight_s1_agent_m0_lock),                           //                         .lock
		.uav_debugaccess        (redlight_s1_agent_m0_debugaccess),                    //                         .debugaccess
		.av_address             (redlight_s1_address),                                 //      avalon_anti_slave_0.address
		.av_readdata            (redlight_s1_readdata),                                //                         .readdata
		.av_write               (),                                                    //              (terminated)
		.av_read                (),                                                    //              (terminated)
		.av_writedata           (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) yellowlight_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (nios2_processor_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (yellowlight_s1_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (yellowlight_s1_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (yellowlight_s1_agent_m0_read),                        //                         .read
		.uav_write              (yellowlight_s1_agent_m0_write),                       //                         .write
		.uav_waitrequest        (yellowlight_s1_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (yellowlight_s1_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (yellowlight_s1_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (yellowlight_s1_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (yellowlight_s1_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (yellowlight_s1_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (yellowlight_s1_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (yellowlight_s1_address),                              //      avalon_anti_slave_0.address
		.av_readdata            (yellowlight_s1_readdata),                             //                         .readdata
		.av_write               (),                                                    //              (terminated)
		.av_read                (),                                                    //              (terminated)
		.av_writedata           (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) greenlight_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (nios2_processor_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (greenlight_s1_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (greenlight_s1_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (greenlight_s1_agent_m0_read),                         //                         .read
		.uav_write              (greenlight_s1_agent_m0_write),                        //                         .write
		.uav_waitrequest        (greenlight_s1_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (greenlight_s1_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (greenlight_s1_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (greenlight_s1_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (greenlight_s1_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (greenlight_s1_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (greenlight_s1_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (greenlight_s1_address),                               //      avalon_anti_slave_0.address
		.av_readdata            (greenlight_s1_readdata),                              //                         .readdata
		.av_write               (),                                                    //              (terminated)
		.av_read                (),                                                    //              (terminated)
		.av_writedata           (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) reverse_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (nios2_processor_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (reverse_s1_agent_m0_address),                         // avalon_universal_slave_0.address
		.uav_burstcount         (reverse_s1_agent_m0_burstcount),                      //                         .burstcount
		.uav_read               (reverse_s1_agent_m0_read),                            //                         .read
		.uav_write              (reverse_s1_agent_m0_write),                           //                         .write
		.uav_waitrequest        (reverse_s1_agent_m0_waitrequest),                     //                         .waitrequest
		.uav_readdatavalid      (reverse_s1_agent_m0_readdatavalid),                   //                         .readdatavalid
		.uav_byteenable         (reverse_s1_agent_m0_byteenable),                      //                         .byteenable
		.uav_readdata           (reverse_s1_agent_m0_readdata),                        //                         .readdata
		.uav_writedata          (reverse_s1_agent_m0_writedata),                       //                         .writedata
		.uav_lock               (reverse_s1_agent_m0_lock),                            //                         .lock
		.uav_debugaccess        (reverse_s1_agent_m0_debugaccess),                     //                         .debugaccess
		.av_address             (reverse_s1_address),                                  //      avalon_anti_slave_0.address
		.av_write               (reverse_s1_write),                                    //                         .write
		.av_readdata            (reverse_s1_readdata),                                 //                         .readdata
		.av_writedata           (reverse_s1_writedata),                                //                         .writedata
		.av_chipselect          (reverse_s1_chipselect),                               //                         .chipselect
		.av_read                (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) encoderreset_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (nios2_processor_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (encoderreset_s1_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (encoderreset_s1_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (encoderreset_s1_agent_m0_read),                       //                         .read
		.uav_write              (encoderreset_s1_agent_m0_write),                      //                         .write
		.uav_waitrequest        (encoderreset_s1_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (encoderreset_s1_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (encoderreset_s1_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (encoderreset_s1_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (encoderreset_s1_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (encoderreset_s1_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (encoderreset_s1_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (encoderreset_s1_address),                             //      avalon_anti_slave_0.address
		.av_write               (encoderreset_s1_write),                               //                         .write
		.av_readdata            (encoderreset_s1_readdata),                            //                         .readdata
		.av_writedata           (encoderreset_s1_writedata),                           //                         .writedata
		.av_chipselect          (encoderreset_s1_chipselect),                          //                         .chipselect
		.av_read                (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) challengeselect_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (nios2_processor_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (challengeselect_s1_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (challengeselect_s1_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (challengeselect_s1_agent_m0_read),                    //                         .read
		.uav_write              (challengeselect_s1_agent_m0_write),                   //                         .write
		.uav_waitrequest        (challengeselect_s1_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (challengeselect_s1_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (challengeselect_s1_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (challengeselect_s1_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (challengeselect_s1_agent_m0_writedata),               //                         .writedata
		.uav_lock               (challengeselect_s1_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (challengeselect_s1_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (ChallengeSelect_s1_address),                          //      avalon_anti_slave_0.address
		.av_readdata            (ChallengeSelect_s1_readdata),                         //                         .readdata
		.av_write               (),                                                    //              (terminated)
		.av_read                (),                                                    //              (terminated)
		.av_writedata           (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_QOS_H                 (75),
		.PKT_QOS_L                 (75),
		.PKT_DATA_SIDEBAND_H       (73),
		.PKT_DATA_SIDEBAND_L       (73),
		.PKT_ADDR_SIDEBAND_H       (72),
		.PKT_ADDR_SIDEBAND_L       (72),
		.PKT_BURST_TYPE_H          (71),
		.PKT_BURST_TYPE_L          (70),
		.PKT_CACHE_H               (93),
		.PKT_CACHE_L               (90),
		.PKT_THREAD_ID_H           (86),
		.PKT_THREAD_ID_L           (86),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_EXCLUSIVE       (60),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.ST_DATA_W                 (99),
		.ST_CHANNEL_W              (20),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_processor_data_master_agent (
		.clk                   (clk_0_clk_clk),                                                                  //       clk.clk
		.reset                 (nios2_processor_reset_n_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.av_address            (nios2_processor_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_processor_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_processor_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_processor_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_processor_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_processor_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_processor_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_processor_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_processor_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_processor_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_processor_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_processor_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_processor_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_processor_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_processor_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_processor_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                              //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                               //          .data
		.rp_channel            (rsp_mux_src_channel),                                                            //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                                      //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                        //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                              //          .ready
		.av_response           (),                                                                               // (terminated)
		.av_writeresponsevalid ()                                                                                // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_QOS_H                 (75),
		.PKT_QOS_L                 (75),
		.PKT_DATA_SIDEBAND_H       (73),
		.PKT_DATA_SIDEBAND_L       (73),
		.PKT_ADDR_SIDEBAND_H       (72),
		.PKT_ADDR_SIDEBAND_L       (72),
		.PKT_BURST_TYPE_H          (71),
		.PKT_BURST_TYPE_L          (70),
		.PKT_CACHE_H               (93),
		.PKT_CACHE_L               (90),
		.PKT_THREAD_ID_H           (86),
		.PKT_THREAD_ID_L           (86),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_EXCLUSIVE       (60),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.ST_DATA_W                 (99),
		.ST_CHANNEL_W              (20),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_processor_instruction_master_agent (
		.clk                   (clk_0_clk_clk),                                                                         //       clk.clk
		.reset                 (nios2_processor_reset_n_reset_bridge_in_reset_reset),                                   // clk_reset.reset
		.av_address            (nios2_processor_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_processor_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_processor_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_processor_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_processor_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_processor_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_processor_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_processor_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_processor_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_processor_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_processor_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_processor_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_processor_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_processor_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_processor_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_processor_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_001_src_valid),                                                                 //        rp.valid
		.rp_data               (rsp_mux_001_src_data),                                                                  //          .data
		.rp_channel            (rsp_mux_001_src_channel),                                                               //          .channel
		.rp_startofpacket      (rsp_mux_001_src_startofpacket),                                                         //          .startofpacket
		.rp_endofpacket        (rsp_mux_001_src_endofpacket),                                                           //          .endofpacket
		.rp_ready              (rsp_mux_001_src_ready),                                                                 //          .ready
		.av_response           (),                                                                                      // (terminated)
		.av_writeresponsevalid ()                                                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_uart_avalon_jtag_slave_agent (
		.clk                     (clk_0_clk_clk),                                                //             clk.clk
		.reset                   (nios2_processor_reset_n_reset_bridge_in_reset_reset),          //       clk_reset.reset
		.m0_address              (jtag_uart_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                            //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                            //                .valid
		.cp_data                 (cmd_mux_src_data),                                             //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                      //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                          //                .channel
		.rf_sink_ready           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                //                .error
		.rdata_fifo_src_ready    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                //       clk.clk
		.reset             (nios2_processor_reset_n_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nios2_processor_jtag_debug_module_agent (
		.clk                     (clk_0_clk_clk),                                                      //             clk.clk
		.reset                   (nios2_processor_reset_n_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (nios2_processor_jtag_debug_module_agent_m0_address),                 //              m0.address
		.m0_burstcount           (nios2_processor_jtag_debug_module_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (nios2_processor_jtag_debug_module_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (nios2_processor_jtag_debug_module_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (nios2_processor_jtag_debug_module_agent_m0_lock),                    //                .lock
		.m0_readdata             (nios2_processor_jtag_debug_module_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (nios2_processor_jtag_debug_module_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (nios2_processor_jtag_debug_module_agent_m0_read),                    //                .read
		.m0_waitrequest          (nios2_processor_jtag_debug_module_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (nios2_processor_jtag_debug_module_agent_m0_writedata),               //                .writedata
		.m0_write                (nios2_processor_jtag_debug_module_agent_m0_write),                   //                .write
		.rp_endofpacket          (nios2_processor_jtag_debug_module_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (nios2_processor_jtag_debug_module_agent_rp_ready),                   //                .ready
		.rp_valid                (nios2_processor_jtag_debug_module_agent_rp_valid),                   //                .valid
		.rp_data                 (nios2_processor_jtag_debug_module_agent_rp_data),                    //                .data
		.rp_startofpacket        (nios2_processor_jtag_debug_module_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                              //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                              //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                               //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                                        //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                            //                .channel
		.rf_sink_ready           (nios2_processor_jtag_debug_module_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (nios2_processor_jtag_debug_module_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (nios2_processor_jtag_debug_module_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (nios2_processor_jtag_debug_module_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (nios2_processor_jtag_debug_module_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (nios2_processor_jtag_debug_module_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (nios2_processor_jtag_debug_module_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (nios2_processor_jtag_debug_module_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (nios2_processor_jtag_debug_module_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (nios2_processor_jtag_debug_module_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                                  //                .error
		.rdata_fifo_src_ready    (nios2_processor_jtag_debug_module_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios2_processor_jtag_debug_module_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (nios2_processor_jtag_debug_module_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios2_processor_jtag_debug_module_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                      //       clk.clk
		.reset             (nios2_processor_reset_n_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (nios2_processor_jtag_debug_module_agent_rf_source_data),             //        in.data
		.in_valid          (nios2_processor_jtag_debug_module_agent_rf_source_valid),            //          .valid
		.in_ready          (nios2_processor_jtag_debug_module_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nios2_processor_jtag_debug_module_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nios2_processor_jtag_debug_module_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nios2_processor_jtag_debug_module_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nios2_processor_jtag_debug_module_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nios2_processor_jtag_debug_module_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nios2_processor_jtag_debug_module_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nios2_processor_jtag_debug_module_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                              // (terminated)
		.csr_read          (1'b0),                                                               // (terminated)
		.csr_write         (1'b0),                                                               // (terminated)
		.csr_readdata      (),                                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                               // (terminated)
		.almost_full_data  (),                                                                   // (terminated)
		.almost_empty_data (),                                                                   // (terminated)
		.in_empty          (1'b0),                                                               // (terminated)
		.out_empty         (),                                                                   // (terminated)
		.in_error          (1'b0),                                                               // (terminated)
		.out_error         (),                                                                   // (terminated)
		.in_channel        (1'b0),                                                               // (terminated)
		.out_channel       ()                                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) onchip_memory_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (nios2_processor_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (onchip_memory_s1_agent_m0_address),                   //              m0.address
		.m0_burstcount           (onchip_memory_s1_agent_m0_burstcount),                //                .burstcount
		.m0_byteenable           (onchip_memory_s1_agent_m0_byteenable),                //                .byteenable
		.m0_debugaccess          (onchip_memory_s1_agent_m0_debugaccess),               //                .debugaccess
		.m0_lock                 (onchip_memory_s1_agent_m0_lock),                      //                .lock
		.m0_readdata             (onchip_memory_s1_agent_m0_readdata),                  //                .readdata
		.m0_readdatavalid        (onchip_memory_s1_agent_m0_readdatavalid),             //                .readdatavalid
		.m0_read                 (onchip_memory_s1_agent_m0_read),                      //                .read
		.m0_waitrequest          (onchip_memory_s1_agent_m0_waitrequest),               //                .waitrequest
		.m0_writedata            (onchip_memory_s1_agent_m0_writedata),                 //                .writedata
		.m0_write                (onchip_memory_s1_agent_m0_write),                     //                .write
		.rp_endofpacket          (onchip_memory_s1_agent_rp_endofpacket),               //              rp.endofpacket
		.rp_ready                (onchip_memory_s1_agent_rp_ready),                     //                .ready
		.rp_valid                (onchip_memory_s1_agent_rp_valid),                     //                .valid
		.rp_data                 (onchip_memory_s1_agent_rp_data),                      //                .data
		.rp_startofpacket        (onchip_memory_s1_agent_rp_startofpacket),             //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                             //                .channel
		.rf_sink_ready           (onchip_memory_s1_agent_rsp_fifo_out_ready),           //         rf_sink.ready
		.rf_sink_valid           (onchip_memory_s1_agent_rsp_fifo_out_valid),           //                .valid
		.rf_sink_startofpacket   (onchip_memory_s1_agent_rsp_fifo_out_startofpacket),   //                .startofpacket
		.rf_sink_endofpacket     (onchip_memory_s1_agent_rsp_fifo_out_endofpacket),     //                .endofpacket
		.rf_sink_data            (onchip_memory_s1_agent_rsp_fifo_out_data),            //                .data
		.rf_source_ready         (onchip_memory_s1_agent_rf_source_ready),              //       rf_source.ready
		.rf_source_valid         (onchip_memory_s1_agent_rf_source_valid),              //                .valid
		.rf_source_startofpacket (onchip_memory_s1_agent_rf_source_startofpacket),      //                .startofpacket
		.rf_source_endofpacket   (onchip_memory_s1_agent_rf_source_endofpacket),        //                .endofpacket
		.rf_source_data          (onchip_memory_s1_agent_rf_source_data),               //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (onchip_memory_s1_agent_rdata_fifo_src_ready),         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_memory_s1_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_src_data     (onchip_memory_s1_agent_rdata_fifo_src_data),          //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_memory_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (onchip_memory_s1_agent_rf_source_data),               //        in.data
		.in_valid          (onchip_memory_s1_agent_rf_source_valid),              //          .valid
		.in_ready          (onchip_memory_s1_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (onchip_memory_s1_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (onchip_memory_s1_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (onchip_memory_s1_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (onchip_memory_s1_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (onchip_memory_s1_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (onchip_memory_s1_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (onchip_memory_s1_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) switches_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (nios2_processor_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (switches_s1_agent_m0_address),                        //              m0.address
		.m0_burstcount           (switches_s1_agent_m0_burstcount),                     //                .burstcount
		.m0_byteenable           (switches_s1_agent_m0_byteenable),                     //                .byteenable
		.m0_debugaccess          (switches_s1_agent_m0_debugaccess),                    //                .debugaccess
		.m0_lock                 (switches_s1_agent_m0_lock),                           //                .lock
		.m0_readdata             (switches_s1_agent_m0_readdata),                       //                .readdata
		.m0_readdatavalid        (switches_s1_agent_m0_readdatavalid),                  //                .readdatavalid
		.m0_read                 (switches_s1_agent_m0_read),                           //                .read
		.m0_waitrequest          (switches_s1_agent_m0_waitrequest),                    //                .waitrequest
		.m0_writedata            (switches_s1_agent_m0_writedata),                      //                .writedata
		.m0_write                (switches_s1_agent_m0_write),                          //                .write
		.rp_endofpacket          (switches_s1_agent_rp_endofpacket),                    //              rp.endofpacket
		.rp_ready                (switches_s1_agent_rp_ready),                          //                .ready
		.rp_valid                (switches_s1_agent_rp_valid),                          //                .valid
		.rp_data                 (switches_s1_agent_rp_data),                           //                .data
		.rp_startofpacket        (switches_s1_agent_rp_startofpacket),                  //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                             //                .channel
		.rf_sink_ready           (switches_s1_agent_rsp_fifo_out_ready),                //         rf_sink.ready
		.rf_sink_valid           (switches_s1_agent_rsp_fifo_out_valid),                //                .valid
		.rf_sink_startofpacket   (switches_s1_agent_rsp_fifo_out_startofpacket),        //                .startofpacket
		.rf_sink_endofpacket     (switches_s1_agent_rsp_fifo_out_endofpacket),          //                .endofpacket
		.rf_sink_data            (switches_s1_agent_rsp_fifo_out_data),                 //                .data
		.rf_source_ready         (switches_s1_agent_rf_source_ready),                   //       rf_source.ready
		.rf_source_valid         (switches_s1_agent_rf_source_valid),                   //                .valid
		.rf_source_startofpacket (switches_s1_agent_rf_source_startofpacket),           //                .startofpacket
		.rf_source_endofpacket   (switches_s1_agent_rf_source_endofpacket),             //                .endofpacket
		.rf_source_data          (switches_s1_agent_rf_source_data),                    //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (switches_s1_agent_rdata_fifo_src_ready),              //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (switches_s1_agent_rdata_fifo_src_valid),              //                .valid
		.rdata_fifo_src_data     (switches_s1_agent_rdata_fifo_src_data),               //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) switches_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (switches_s1_agent_rf_source_data),                    //        in.data
		.in_valid          (switches_s1_agent_rf_source_valid),                   //          .valid
		.in_ready          (switches_s1_agent_rf_source_ready),                   //          .ready
		.in_startofpacket  (switches_s1_agent_rf_source_startofpacket),           //          .startofpacket
		.in_endofpacket    (switches_s1_agent_rf_source_endofpacket),             //          .endofpacket
		.out_data          (switches_s1_agent_rsp_fifo_out_data),                 //       out.data
		.out_valid         (switches_s1_agent_rsp_fifo_out_valid),                //          .valid
		.out_ready         (switches_s1_agent_rsp_fifo_out_ready),                //          .ready
		.out_startofpacket (switches_s1_agent_rsp_fifo_out_startofpacket),        //          .startofpacket
		.out_endofpacket   (switches_s1_agent_rsp_fifo_out_endofpacket),          //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) leds_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (nios2_processor_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (leds_s1_agent_m0_address),                            //              m0.address
		.m0_burstcount           (leds_s1_agent_m0_burstcount),                         //                .burstcount
		.m0_byteenable           (leds_s1_agent_m0_byteenable),                         //                .byteenable
		.m0_debugaccess          (leds_s1_agent_m0_debugaccess),                        //                .debugaccess
		.m0_lock                 (leds_s1_agent_m0_lock),                               //                .lock
		.m0_readdata             (leds_s1_agent_m0_readdata),                           //                .readdata
		.m0_readdatavalid        (leds_s1_agent_m0_readdatavalid),                      //                .readdatavalid
		.m0_read                 (leds_s1_agent_m0_read),                               //                .read
		.m0_waitrequest          (leds_s1_agent_m0_waitrequest),                        //                .waitrequest
		.m0_writedata            (leds_s1_agent_m0_writedata),                          //                .writedata
		.m0_write                (leds_s1_agent_m0_write),                              //                .write
		.rp_endofpacket          (leds_s1_agent_rp_endofpacket),                        //              rp.endofpacket
		.rp_ready                (leds_s1_agent_rp_ready),                              //                .ready
		.rp_valid                (leds_s1_agent_rp_valid),                              //                .valid
		.rp_data                 (leds_s1_agent_rp_data),                               //                .data
		.rp_startofpacket        (leds_s1_agent_rp_startofpacket),                      //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                             //                .channel
		.rf_sink_ready           (leds_s1_agent_rsp_fifo_out_ready),                    //         rf_sink.ready
		.rf_sink_valid           (leds_s1_agent_rsp_fifo_out_valid),                    //                .valid
		.rf_sink_startofpacket   (leds_s1_agent_rsp_fifo_out_startofpacket),            //                .startofpacket
		.rf_sink_endofpacket     (leds_s1_agent_rsp_fifo_out_endofpacket),              //                .endofpacket
		.rf_sink_data            (leds_s1_agent_rsp_fifo_out_data),                     //                .data
		.rf_source_ready         (leds_s1_agent_rf_source_ready),                       //       rf_source.ready
		.rf_source_valid         (leds_s1_agent_rf_source_valid),                       //                .valid
		.rf_source_startofpacket (leds_s1_agent_rf_source_startofpacket),               //                .startofpacket
		.rf_source_endofpacket   (leds_s1_agent_rf_source_endofpacket),                 //                .endofpacket
		.rf_source_data          (leds_s1_agent_rf_source_data),                        //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (leds_s1_agent_rdata_fifo_src_ready),                  //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (leds_s1_agent_rdata_fifo_src_valid),                  //                .valid
		.rdata_fifo_src_data     (leds_s1_agent_rdata_fifo_src_data),                   //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) leds_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (leds_s1_agent_rf_source_data),                        //        in.data
		.in_valid          (leds_s1_agent_rf_source_valid),                       //          .valid
		.in_ready          (leds_s1_agent_rf_source_ready),                       //          .ready
		.in_startofpacket  (leds_s1_agent_rf_source_startofpacket),               //          .startofpacket
		.in_endofpacket    (leds_s1_agent_rf_source_endofpacket),                 //          .endofpacket
		.out_data          (leds_s1_agent_rsp_fifo_out_data),                     //       out.data
		.out_valid         (leds_s1_agent_rsp_fifo_out_valid),                    //          .valid
		.out_ready         (leds_s1_agent_rsp_fifo_out_ready),                    //          .ready
		.out_startofpacket (leds_s1_agent_rsp_fifo_out_startofpacket),            //          .startofpacket
		.out_endofpacket   (leds_s1_agent_rsp_fifo_out_endofpacket),              //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) encoderincm_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (nios2_processor_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (encoderincm_s1_agent_m0_address),                     //              m0.address
		.m0_burstcount           (encoderincm_s1_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (encoderincm_s1_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (encoderincm_s1_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (encoderincm_s1_agent_m0_lock),                        //                .lock
		.m0_readdata             (encoderincm_s1_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (encoderincm_s1_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (encoderincm_s1_agent_m0_read),                        //                .read
		.m0_waitrequest          (encoderincm_s1_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (encoderincm_s1_agent_m0_writedata),                   //                .writedata
		.m0_write                (encoderincm_s1_agent_m0_write),                       //                .write
		.rp_endofpacket          (encoderincm_s1_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (encoderincm_s1_agent_rp_ready),                       //                .ready
		.rp_valid                (encoderincm_s1_agent_rp_valid),                       //                .valid
		.rp_data                 (encoderincm_s1_agent_rp_data),                        //                .data
		.rp_startofpacket        (encoderincm_s1_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_005_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                             //                .channel
		.rf_sink_ready           (encoderincm_s1_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (encoderincm_s1_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (encoderincm_s1_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (encoderincm_s1_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (encoderincm_s1_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (encoderincm_s1_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (encoderincm_s1_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (encoderincm_s1_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (encoderincm_s1_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (encoderincm_s1_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (encoderincm_s1_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (encoderincm_s1_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (encoderincm_s1_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) encoderincm_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (encoderincm_s1_agent_rf_source_data),                 //        in.data
		.in_valid          (encoderincm_s1_agent_rf_source_valid),                //          .valid
		.in_ready          (encoderincm_s1_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (encoderincm_s1_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (encoderincm_s1_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (encoderincm_s1_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (encoderincm_s1_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (encoderincm_s1_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (encoderincm_s1_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (encoderincm_s1_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) frsensor_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (nios2_processor_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (frsensor_s1_agent_m0_address),                        //              m0.address
		.m0_burstcount           (frsensor_s1_agent_m0_burstcount),                     //                .burstcount
		.m0_byteenable           (frsensor_s1_agent_m0_byteenable),                     //                .byteenable
		.m0_debugaccess          (frsensor_s1_agent_m0_debugaccess),                    //                .debugaccess
		.m0_lock                 (frsensor_s1_agent_m0_lock),                           //                .lock
		.m0_readdata             (frsensor_s1_agent_m0_readdata),                       //                .readdata
		.m0_readdatavalid        (frsensor_s1_agent_m0_readdatavalid),                  //                .readdatavalid
		.m0_read                 (frsensor_s1_agent_m0_read),                           //                .read
		.m0_waitrequest          (frsensor_s1_agent_m0_waitrequest),                    //                .waitrequest
		.m0_writedata            (frsensor_s1_agent_m0_writedata),                      //                .writedata
		.m0_write                (frsensor_s1_agent_m0_write),                          //                .write
		.rp_endofpacket          (frsensor_s1_agent_rp_endofpacket),                    //              rp.endofpacket
		.rp_ready                (frsensor_s1_agent_rp_ready),                          //                .ready
		.rp_valid                (frsensor_s1_agent_rp_valid),                          //                .valid
		.rp_data                 (frsensor_s1_agent_rp_data),                           //                .data
		.rp_startofpacket        (frsensor_s1_agent_rp_startofpacket),                  //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_006_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                             //                .channel
		.rf_sink_ready           (frsensor_s1_agent_rsp_fifo_out_ready),                //         rf_sink.ready
		.rf_sink_valid           (frsensor_s1_agent_rsp_fifo_out_valid),                //                .valid
		.rf_sink_startofpacket   (frsensor_s1_agent_rsp_fifo_out_startofpacket),        //                .startofpacket
		.rf_sink_endofpacket     (frsensor_s1_agent_rsp_fifo_out_endofpacket),          //                .endofpacket
		.rf_sink_data            (frsensor_s1_agent_rsp_fifo_out_data),                 //                .data
		.rf_source_ready         (frsensor_s1_agent_rf_source_ready),                   //       rf_source.ready
		.rf_source_valid         (frsensor_s1_agent_rf_source_valid),                   //                .valid
		.rf_source_startofpacket (frsensor_s1_agent_rf_source_startofpacket),           //                .startofpacket
		.rf_source_endofpacket   (frsensor_s1_agent_rf_source_endofpacket),             //                .endofpacket
		.rf_source_data          (frsensor_s1_agent_rf_source_data),                    //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (frsensor_s1_agent_rdata_fifo_src_ready),              //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (frsensor_s1_agent_rdata_fifo_src_valid),              //                .valid
		.rdata_fifo_src_data     (frsensor_s1_agent_rdata_fifo_src_data),               //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) frsensor_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (frsensor_s1_agent_rf_source_data),                    //        in.data
		.in_valid          (frsensor_s1_agent_rf_source_valid),                   //          .valid
		.in_ready          (frsensor_s1_agent_rf_source_ready),                   //          .ready
		.in_startofpacket  (frsensor_s1_agent_rf_source_startofpacket),           //          .startofpacket
		.in_endofpacket    (frsensor_s1_agent_rf_source_endofpacket),             //          .endofpacket
		.out_data          (frsensor_s1_agent_rsp_fifo_out_data),                 //       out.data
		.out_valid         (frsensor_s1_agent_rsp_fifo_out_valid),                //          .valid
		.out_ready         (frsensor_s1_agent_rsp_fifo_out_ready),                //          .ready
		.out_startofpacket (frsensor_s1_agent_rsp_fifo_out_startofpacket),        //          .startofpacket
		.out_endofpacket   (frsensor_s1_agent_rsp_fifo_out_endofpacket),          //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) flsensor_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (nios2_processor_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (flsensor_s1_agent_m0_address),                        //              m0.address
		.m0_burstcount           (flsensor_s1_agent_m0_burstcount),                     //                .burstcount
		.m0_byteenable           (flsensor_s1_agent_m0_byteenable),                     //                .byteenable
		.m0_debugaccess          (flsensor_s1_agent_m0_debugaccess),                    //                .debugaccess
		.m0_lock                 (flsensor_s1_agent_m0_lock),                           //                .lock
		.m0_readdata             (flsensor_s1_agent_m0_readdata),                       //                .readdata
		.m0_readdatavalid        (flsensor_s1_agent_m0_readdatavalid),                  //                .readdatavalid
		.m0_read                 (flsensor_s1_agent_m0_read),                           //                .read
		.m0_waitrequest          (flsensor_s1_agent_m0_waitrequest),                    //                .waitrequest
		.m0_writedata            (flsensor_s1_agent_m0_writedata),                      //                .writedata
		.m0_write                (flsensor_s1_agent_m0_write),                          //                .write
		.rp_endofpacket          (flsensor_s1_agent_rp_endofpacket),                    //              rp.endofpacket
		.rp_ready                (flsensor_s1_agent_rp_ready),                          //                .ready
		.rp_valid                (flsensor_s1_agent_rp_valid),                          //                .valid
		.rp_data                 (flsensor_s1_agent_rp_data),                           //                .data
		.rp_startofpacket        (flsensor_s1_agent_rp_startofpacket),                  //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_007_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                             //                .channel
		.rf_sink_ready           (flsensor_s1_agent_rsp_fifo_out_ready),                //         rf_sink.ready
		.rf_sink_valid           (flsensor_s1_agent_rsp_fifo_out_valid),                //                .valid
		.rf_sink_startofpacket   (flsensor_s1_agent_rsp_fifo_out_startofpacket),        //                .startofpacket
		.rf_sink_endofpacket     (flsensor_s1_agent_rsp_fifo_out_endofpacket),          //                .endofpacket
		.rf_sink_data            (flsensor_s1_agent_rsp_fifo_out_data),                 //                .data
		.rf_source_ready         (flsensor_s1_agent_rf_source_ready),                   //       rf_source.ready
		.rf_source_valid         (flsensor_s1_agent_rf_source_valid),                   //                .valid
		.rf_source_startofpacket (flsensor_s1_agent_rf_source_startofpacket),           //                .startofpacket
		.rf_source_endofpacket   (flsensor_s1_agent_rf_source_endofpacket),             //                .endofpacket
		.rf_source_data          (flsensor_s1_agent_rf_source_data),                    //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (flsensor_s1_agent_rdata_fifo_src_ready),              //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (flsensor_s1_agent_rdata_fifo_src_valid),              //                .valid
		.rdata_fifo_src_data     (flsensor_s1_agent_rdata_fifo_src_data),               //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) flsensor_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (flsensor_s1_agent_rf_source_data),                    //        in.data
		.in_valid          (flsensor_s1_agent_rf_source_valid),                   //          .valid
		.in_ready          (flsensor_s1_agent_rf_source_ready),                   //          .ready
		.in_startofpacket  (flsensor_s1_agent_rf_source_startofpacket),           //          .startofpacket
		.in_endofpacket    (flsensor_s1_agent_rf_source_endofpacket),             //          .endofpacket
		.out_data          (flsensor_s1_agent_rsp_fifo_out_data),                 //       out.data
		.out_valid         (flsensor_s1_agent_rsp_fifo_out_valid),                //          .valid
		.out_ready         (flsensor_s1_agent_rsp_fifo_out_ready),                //          .ready
		.out_startofpacket (flsensor_s1_agent_rsp_fifo_out_startofpacket),        //          .startofpacket
		.out_endofpacket   (flsensor_s1_agent_rsp_fifo_out_endofpacket),          //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) lsensor_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (nios2_processor_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (lsensor_s1_agent_m0_address),                         //              m0.address
		.m0_burstcount           (lsensor_s1_agent_m0_burstcount),                      //                .burstcount
		.m0_byteenable           (lsensor_s1_agent_m0_byteenable),                      //                .byteenable
		.m0_debugaccess          (lsensor_s1_agent_m0_debugaccess),                     //                .debugaccess
		.m0_lock                 (lsensor_s1_agent_m0_lock),                            //                .lock
		.m0_readdata             (lsensor_s1_agent_m0_readdata),                        //                .readdata
		.m0_readdatavalid        (lsensor_s1_agent_m0_readdatavalid),                   //                .readdatavalid
		.m0_read                 (lsensor_s1_agent_m0_read),                            //                .read
		.m0_waitrequest          (lsensor_s1_agent_m0_waitrequest),                     //                .waitrequest
		.m0_writedata            (lsensor_s1_agent_m0_writedata),                       //                .writedata
		.m0_write                (lsensor_s1_agent_m0_write),                           //                .write
		.rp_endofpacket          (lsensor_s1_agent_rp_endofpacket),                     //              rp.endofpacket
		.rp_ready                (lsensor_s1_agent_rp_ready),                           //                .ready
		.rp_valid                (lsensor_s1_agent_rp_valid),                           //                .valid
		.rp_data                 (lsensor_s1_agent_rp_data),                            //                .data
		.rp_startofpacket        (lsensor_s1_agent_rp_startofpacket),                   //                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_008_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                             //                .channel
		.rf_sink_ready           (lsensor_s1_agent_rsp_fifo_out_ready),                 //         rf_sink.ready
		.rf_sink_valid           (lsensor_s1_agent_rsp_fifo_out_valid),                 //                .valid
		.rf_sink_startofpacket   (lsensor_s1_agent_rsp_fifo_out_startofpacket),         //                .startofpacket
		.rf_sink_endofpacket     (lsensor_s1_agent_rsp_fifo_out_endofpacket),           //                .endofpacket
		.rf_sink_data            (lsensor_s1_agent_rsp_fifo_out_data),                  //                .data
		.rf_source_ready         (lsensor_s1_agent_rf_source_ready),                    //       rf_source.ready
		.rf_source_valid         (lsensor_s1_agent_rf_source_valid),                    //                .valid
		.rf_source_startofpacket (lsensor_s1_agent_rf_source_startofpacket),            //                .startofpacket
		.rf_source_endofpacket   (lsensor_s1_agent_rf_source_endofpacket),              //                .endofpacket
		.rf_source_data          (lsensor_s1_agent_rf_source_data),                     //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (lsensor_s1_agent_rdata_fifo_src_ready),               //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (lsensor_s1_agent_rdata_fifo_src_valid),               //                .valid
		.rdata_fifo_src_data     (lsensor_s1_agent_rdata_fifo_src_data),                //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) lsensor_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (lsensor_s1_agent_rf_source_data),                     //        in.data
		.in_valid          (lsensor_s1_agent_rf_source_valid),                    //          .valid
		.in_ready          (lsensor_s1_agent_rf_source_ready),                    //          .ready
		.in_startofpacket  (lsensor_s1_agent_rf_source_startofpacket),            //          .startofpacket
		.in_endofpacket    (lsensor_s1_agent_rf_source_endofpacket),              //          .endofpacket
		.out_data          (lsensor_s1_agent_rsp_fifo_out_data),                  //       out.data
		.out_valid         (lsensor_s1_agent_rsp_fifo_out_valid),                 //          .valid
		.out_ready         (lsensor_s1_agent_rsp_fifo_out_ready),                 //          .ready
		.out_startofpacket (lsensor_s1_agent_rsp_fifo_out_startofpacket),         //          .startofpacket
		.out_endofpacket   (lsensor_s1_agent_rsp_fifo_out_endofpacket),           //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) rsensor_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (nios2_processor_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (rsensor_s1_agent_m0_address),                         //              m0.address
		.m0_burstcount           (rsensor_s1_agent_m0_burstcount),                      //                .burstcount
		.m0_byteenable           (rsensor_s1_agent_m0_byteenable),                      //                .byteenable
		.m0_debugaccess          (rsensor_s1_agent_m0_debugaccess),                     //                .debugaccess
		.m0_lock                 (rsensor_s1_agent_m0_lock),                            //                .lock
		.m0_readdata             (rsensor_s1_agent_m0_readdata),                        //                .readdata
		.m0_readdatavalid        (rsensor_s1_agent_m0_readdatavalid),                   //                .readdatavalid
		.m0_read                 (rsensor_s1_agent_m0_read),                            //                .read
		.m0_waitrequest          (rsensor_s1_agent_m0_waitrequest),                     //                .waitrequest
		.m0_writedata            (rsensor_s1_agent_m0_writedata),                       //                .writedata
		.m0_write                (rsensor_s1_agent_m0_write),                           //                .write
		.rp_endofpacket          (rsensor_s1_agent_rp_endofpacket),                     //              rp.endofpacket
		.rp_ready                (rsensor_s1_agent_rp_ready),                           //                .ready
		.rp_valid                (rsensor_s1_agent_rp_valid),                           //                .valid
		.rp_data                 (rsensor_s1_agent_rp_data),                            //                .data
		.rp_startofpacket        (rsensor_s1_agent_rp_startofpacket),                   //                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_009_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                             //                .channel
		.rf_sink_ready           (rsensor_s1_agent_rsp_fifo_out_ready),                 //         rf_sink.ready
		.rf_sink_valid           (rsensor_s1_agent_rsp_fifo_out_valid),                 //                .valid
		.rf_sink_startofpacket   (rsensor_s1_agent_rsp_fifo_out_startofpacket),         //                .startofpacket
		.rf_sink_endofpacket     (rsensor_s1_agent_rsp_fifo_out_endofpacket),           //                .endofpacket
		.rf_sink_data            (rsensor_s1_agent_rsp_fifo_out_data),                  //                .data
		.rf_source_ready         (rsensor_s1_agent_rf_source_ready),                    //       rf_source.ready
		.rf_source_valid         (rsensor_s1_agent_rf_source_valid),                    //                .valid
		.rf_source_startofpacket (rsensor_s1_agent_rf_source_startofpacket),            //                .startofpacket
		.rf_source_endofpacket   (rsensor_s1_agent_rf_source_endofpacket),              //                .endofpacket
		.rf_source_data          (rsensor_s1_agent_rf_source_data),                     //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (rsensor_s1_agent_rdata_fifo_src_ready),               //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (rsensor_s1_agent_rdata_fifo_src_valid),               //                .valid
		.rdata_fifo_src_data     (rsensor_s1_agent_rdata_fifo_src_data),                //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rsensor_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (rsensor_s1_agent_rf_source_data),                     //        in.data
		.in_valid          (rsensor_s1_agent_rf_source_valid),                    //          .valid
		.in_ready          (rsensor_s1_agent_rf_source_ready),                    //          .ready
		.in_startofpacket  (rsensor_s1_agent_rf_source_startofpacket),            //          .startofpacket
		.in_endofpacket    (rsensor_s1_agent_rf_source_endofpacket),              //          .endofpacket
		.out_data          (rsensor_s1_agent_rsp_fifo_out_data),                  //       out.data
		.out_valid         (rsensor_s1_agent_rsp_fifo_out_valid),                 //          .valid
		.out_ready         (rsensor_s1_agent_rsp_fifo_out_ready),                 //          .ready
		.out_startofpacket (rsensor_s1_agent_rsp_fifo_out_startofpacket),         //          .startofpacket
		.out_endofpacket   (rsensor_s1_agent_rsp_fifo_out_endofpacket),           //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) blsensor_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (nios2_processor_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (blsensor_s1_agent_m0_address),                        //              m0.address
		.m0_burstcount           (blsensor_s1_agent_m0_burstcount),                     //                .burstcount
		.m0_byteenable           (blsensor_s1_agent_m0_byteenable),                     //                .byteenable
		.m0_debugaccess          (blsensor_s1_agent_m0_debugaccess),                    //                .debugaccess
		.m0_lock                 (blsensor_s1_agent_m0_lock),                           //                .lock
		.m0_readdata             (blsensor_s1_agent_m0_readdata),                       //                .readdata
		.m0_readdatavalid        (blsensor_s1_agent_m0_readdatavalid),                  //                .readdatavalid
		.m0_read                 (blsensor_s1_agent_m0_read),                           //                .read
		.m0_waitrequest          (blsensor_s1_agent_m0_waitrequest),                    //                .waitrequest
		.m0_writedata            (blsensor_s1_agent_m0_writedata),                      //                .writedata
		.m0_write                (blsensor_s1_agent_m0_write),                          //                .write
		.rp_endofpacket          (blsensor_s1_agent_rp_endofpacket),                    //              rp.endofpacket
		.rp_ready                (blsensor_s1_agent_rp_ready),                          //                .ready
		.rp_valid                (blsensor_s1_agent_rp_valid),                          //                .valid
		.rp_data                 (blsensor_s1_agent_rp_data),                           //                .data
		.rp_startofpacket        (blsensor_s1_agent_rp_startofpacket),                  //                .startofpacket
		.cp_ready                (cmd_mux_010_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_010_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_010_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_010_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_010_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_010_src_channel),                             //                .channel
		.rf_sink_ready           (blsensor_s1_agent_rsp_fifo_out_ready),                //         rf_sink.ready
		.rf_sink_valid           (blsensor_s1_agent_rsp_fifo_out_valid),                //                .valid
		.rf_sink_startofpacket   (blsensor_s1_agent_rsp_fifo_out_startofpacket),        //                .startofpacket
		.rf_sink_endofpacket     (blsensor_s1_agent_rsp_fifo_out_endofpacket),          //                .endofpacket
		.rf_sink_data            (blsensor_s1_agent_rsp_fifo_out_data),                 //                .data
		.rf_source_ready         (blsensor_s1_agent_rf_source_ready),                   //       rf_source.ready
		.rf_source_valid         (blsensor_s1_agent_rf_source_valid),                   //                .valid
		.rf_source_startofpacket (blsensor_s1_agent_rf_source_startofpacket),           //                .startofpacket
		.rf_source_endofpacket   (blsensor_s1_agent_rf_source_endofpacket),             //                .endofpacket
		.rf_source_data          (blsensor_s1_agent_rf_source_data),                    //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (blsensor_s1_agent_rdata_fifo_src_ready),              //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (blsensor_s1_agent_rdata_fifo_src_valid),              //                .valid
		.rdata_fifo_src_data     (blsensor_s1_agent_rdata_fifo_src_data),               //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) blsensor_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (blsensor_s1_agent_rf_source_data),                    //        in.data
		.in_valid          (blsensor_s1_agent_rf_source_valid),                   //          .valid
		.in_ready          (blsensor_s1_agent_rf_source_ready),                   //          .ready
		.in_startofpacket  (blsensor_s1_agent_rf_source_startofpacket),           //          .startofpacket
		.in_endofpacket    (blsensor_s1_agent_rf_source_endofpacket),             //          .endofpacket
		.out_data          (blsensor_s1_agent_rsp_fifo_out_data),                 //       out.data
		.out_valid         (blsensor_s1_agent_rsp_fifo_out_valid),                //          .valid
		.out_ready         (blsensor_s1_agent_rsp_fifo_out_ready),                //          .ready
		.out_startofpacket (blsensor_s1_agent_rsp_fifo_out_startofpacket),        //          .startofpacket
		.out_endofpacket   (blsensor_s1_agent_rsp_fifo_out_endofpacket),          //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) drivespeed_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (nios2_processor_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (drivespeed_s1_agent_m0_address),                      //              m0.address
		.m0_burstcount           (drivespeed_s1_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (drivespeed_s1_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (drivespeed_s1_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (drivespeed_s1_agent_m0_lock),                         //                .lock
		.m0_readdata             (drivespeed_s1_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (drivespeed_s1_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (drivespeed_s1_agent_m0_read),                         //                .read
		.m0_waitrequest          (drivespeed_s1_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (drivespeed_s1_agent_m0_writedata),                    //                .writedata
		.m0_write                (drivespeed_s1_agent_m0_write),                        //                .write
		.rp_endofpacket          (drivespeed_s1_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (drivespeed_s1_agent_rp_ready),                        //                .ready
		.rp_valid                (drivespeed_s1_agent_rp_valid),                        //                .valid
		.rp_data                 (drivespeed_s1_agent_rp_data),                         //                .data
		.rp_startofpacket        (drivespeed_s1_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (cmd_mux_011_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_011_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_011_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_011_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_011_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_011_src_channel),                             //                .channel
		.rf_sink_ready           (drivespeed_s1_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (drivespeed_s1_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (drivespeed_s1_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (drivespeed_s1_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (drivespeed_s1_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (drivespeed_s1_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (drivespeed_s1_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (drivespeed_s1_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (drivespeed_s1_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (drivespeed_s1_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (drivespeed_s1_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (drivespeed_s1_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (drivespeed_s1_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) drivespeed_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (drivespeed_s1_agent_rf_source_data),                  //        in.data
		.in_valid          (drivespeed_s1_agent_rf_source_valid),                 //          .valid
		.in_ready          (drivespeed_s1_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (drivespeed_s1_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (drivespeed_s1_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (drivespeed_s1_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (drivespeed_s1_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (drivespeed_s1_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (drivespeed_s1_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (drivespeed_s1_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) brsensor_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (nios2_processor_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (brsensor_s1_agent_m0_address),                        //              m0.address
		.m0_burstcount           (brsensor_s1_agent_m0_burstcount),                     //                .burstcount
		.m0_byteenable           (brsensor_s1_agent_m0_byteenable),                     //                .byteenable
		.m0_debugaccess          (brsensor_s1_agent_m0_debugaccess),                    //                .debugaccess
		.m0_lock                 (brsensor_s1_agent_m0_lock),                           //                .lock
		.m0_readdata             (brsensor_s1_agent_m0_readdata),                       //                .readdata
		.m0_readdatavalid        (brsensor_s1_agent_m0_readdatavalid),                  //                .readdatavalid
		.m0_read                 (brsensor_s1_agent_m0_read),                           //                .read
		.m0_waitrequest          (brsensor_s1_agent_m0_waitrequest),                    //                .waitrequest
		.m0_writedata            (brsensor_s1_agent_m0_writedata),                      //                .writedata
		.m0_write                (brsensor_s1_agent_m0_write),                          //                .write
		.rp_endofpacket          (brsensor_s1_agent_rp_endofpacket),                    //              rp.endofpacket
		.rp_ready                (brsensor_s1_agent_rp_ready),                          //                .ready
		.rp_valid                (brsensor_s1_agent_rp_valid),                          //                .valid
		.rp_data                 (brsensor_s1_agent_rp_data),                           //                .data
		.rp_startofpacket        (brsensor_s1_agent_rp_startofpacket),                  //                .startofpacket
		.cp_ready                (cmd_mux_012_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_012_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_012_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_012_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_012_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_012_src_channel),                             //                .channel
		.rf_sink_ready           (brsensor_s1_agent_rsp_fifo_out_ready),                //         rf_sink.ready
		.rf_sink_valid           (brsensor_s1_agent_rsp_fifo_out_valid),                //                .valid
		.rf_sink_startofpacket   (brsensor_s1_agent_rsp_fifo_out_startofpacket),        //                .startofpacket
		.rf_sink_endofpacket     (brsensor_s1_agent_rsp_fifo_out_endofpacket),          //                .endofpacket
		.rf_sink_data            (brsensor_s1_agent_rsp_fifo_out_data),                 //                .data
		.rf_source_ready         (brsensor_s1_agent_rf_source_ready),                   //       rf_source.ready
		.rf_source_valid         (brsensor_s1_agent_rf_source_valid),                   //                .valid
		.rf_source_startofpacket (brsensor_s1_agent_rf_source_startofpacket),           //                .startofpacket
		.rf_source_endofpacket   (brsensor_s1_agent_rf_source_endofpacket),             //                .endofpacket
		.rf_source_data          (brsensor_s1_agent_rf_source_data),                    //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_012_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_012_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_012_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_012_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (brsensor_s1_agent_rdata_fifo_src_ready),              //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (brsensor_s1_agent_rdata_fifo_src_valid),              //                .valid
		.rdata_fifo_src_data     (brsensor_s1_agent_rdata_fifo_src_data),               //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) brsensor_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (brsensor_s1_agent_rf_source_data),                    //        in.data
		.in_valid          (brsensor_s1_agent_rf_source_valid),                   //          .valid
		.in_ready          (brsensor_s1_agent_rf_source_ready),                   //          .ready
		.in_startofpacket  (brsensor_s1_agent_rf_source_startofpacket),           //          .startofpacket
		.in_endofpacket    (brsensor_s1_agent_rf_source_endofpacket),             //          .endofpacket
		.out_data          (brsensor_s1_agent_rsp_fifo_out_data),                 //       out.data
		.out_valid         (brsensor_s1_agent_rsp_fifo_out_valid),                //          .valid
		.out_ready         (brsensor_s1_agent_rsp_fifo_out_ready),                //          .ready
		.out_startofpacket (brsensor_s1_agent_rsp_fifo_out_startofpacket),        //          .startofpacket
		.out_endofpacket   (brsensor_s1_agent_rsp_fifo_out_endofpacket),          //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) targetdirection_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (nios2_processor_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (targetdirection_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (targetdirection_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (targetdirection_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (targetdirection_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (targetdirection_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (targetdirection_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (targetdirection_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (targetdirection_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (targetdirection_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (targetdirection_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (targetdirection_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (targetdirection_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (targetdirection_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (targetdirection_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (targetdirection_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (targetdirection_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_013_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_013_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_013_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_013_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_013_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_013_src_channel),                             //                .channel
		.rf_sink_ready           (targetdirection_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (targetdirection_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (targetdirection_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (targetdirection_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (targetdirection_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (targetdirection_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (targetdirection_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (targetdirection_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (targetdirection_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (targetdirection_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_013_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_013_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_013_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_013_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (targetdirection_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (targetdirection_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (targetdirection_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) targetdirection_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (targetdirection_s1_agent_rf_source_data),             //        in.data
		.in_valid          (targetdirection_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (targetdirection_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (targetdirection_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (targetdirection_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (targetdirection_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (targetdirection_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (targetdirection_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (targetdirection_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (targetdirection_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) redlight_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (nios2_processor_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (redlight_s1_agent_m0_address),                        //              m0.address
		.m0_burstcount           (redlight_s1_agent_m0_burstcount),                     //                .burstcount
		.m0_byteenable           (redlight_s1_agent_m0_byteenable),                     //                .byteenable
		.m0_debugaccess          (redlight_s1_agent_m0_debugaccess),                    //                .debugaccess
		.m0_lock                 (redlight_s1_agent_m0_lock),                           //                .lock
		.m0_readdata             (redlight_s1_agent_m0_readdata),                       //                .readdata
		.m0_readdatavalid        (redlight_s1_agent_m0_readdatavalid),                  //                .readdatavalid
		.m0_read                 (redlight_s1_agent_m0_read),                           //                .read
		.m0_waitrequest          (redlight_s1_agent_m0_waitrequest),                    //                .waitrequest
		.m0_writedata            (redlight_s1_agent_m0_writedata),                      //                .writedata
		.m0_write                (redlight_s1_agent_m0_write),                          //                .write
		.rp_endofpacket          (redlight_s1_agent_rp_endofpacket),                    //              rp.endofpacket
		.rp_ready                (redlight_s1_agent_rp_ready),                          //                .ready
		.rp_valid                (redlight_s1_agent_rp_valid),                          //                .valid
		.rp_data                 (redlight_s1_agent_rp_data),                           //                .data
		.rp_startofpacket        (redlight_s1_agent_rp_startofpacket),                  //                .startofpacket
		.cp_ready                (cmd_mux_014_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_014_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_014_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_014_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_014_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_014_src_channel),                             //                .channel
		.rf_sink_ready           (redlight_s1_agent_rsp_fifo_out_ready),                //         rf_sink.ready
		.rf_sink_valid           (redlight_s1_agent_rsp_fifo_out_valid),                //                .valid
		.rf_sink_startofpacket   (redlight_s1_agent_rsp_fifo_out_startofpacket),        //                .startofpacket
		.rf_sink_endofpacket     (redlight_s1_agent_rsp_fifo_out_endofpacket),          //                .endofpacket
		.rf_sink_data            (redlight_s1_agent_rsp_fifo_out_data),                 //                .data
		.rf_source_ready         (redlight_s1_agent_rf_source_ready),                   //       rf_source.ready
		.rf_source_valid         (redlight_s1_agent_rf_source_valid),                   //                .valid
		.rf_source_startofpacket (redlight_s1_agent_rf_source_startofpacket),           //                .startofpacket
		.rf_source_endofpacket   (redlight_s1_agent_rf_source_endofpacket),             //                .endofpacket
		.rf_source_data          (redlight_s1_agent_rf_source_data),                    //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_014_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_014_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_014_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_014_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (redlight_s1_agent_rdata_fifo_src_ready),              //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (redlight_s1_agent_rdata_fifo_src_valid),              //                .valid
		.rdata_fifo_src_data     (redlight_s1_agent_rdata_fifo_src_data),               //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) redlight_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (redlight_s1_agent_rf_source_data),                    //        in.data
		.in_valid          (redlight_s1_agent_rf_source_valid),                   //          .valid
		.in_ready          (redlight_s1_agent_rf_source_ready),                   //          .ready
		.in_startofpacket  (redlight_s1_agent_rf_source_startofpacket),           //          .startofpacket
		.in_endofpacket    (redlight_s1_agent_rf_source_endofpacket),             //          .endofpacket
		.out_data          (redlight_s1_agent_rsp_fifo_out_data),                 //       out.data
		.out_valid         (redlight_s1_agent_rsp_fifo_out_valid),                //          .valid
		.out_ready         (redlight_s1_agent_rsp_fifo_out_ready),                //          .ready
		.out_startofpacket (redlight_s1_agent_rsp_fifo_out_startofpacket),        //          .startofpacket
		.out_endofpacket   (redlight_s1_agent_rsp_fifo_out_endofpacket),          //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) yellowlight_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (nios2_processor_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (yellowlight_s1_agent_m0_address),                     //              m0.address
		.m0_burstcount           (yellowlight_s1_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (yellowlight_s1_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (yellowlight_s1_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (yellowlight_s1_agent_m0_lock),                        //                .lock
		.m0_readdata             (yellowlight_s1_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (yellowlight_s1_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (yellowlight_s1_agent_m0_read),                        //                .read
		.m0_waitrequest          (yellowlight_s1_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (yellowlight_s1_agent_m0_writedata),                   //                .writedata
		.m0_write                (yellowlight_s1_agent_m0_write),                       //                .write
		.rp_endofpacket          (yellowlight_s1_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (yellowlight_s1_agent_rp_ready),                       //                .ready
		.rp_valid                (yellowlight_s1_agent_rp_valid),                       //                .valid
		.rp_data                 (yellowlight_s1_agent_rp_data),                        //                .data
		.rp_startofpacket        (yellowlight_s1_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (cmd_mux_015_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_015_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_015_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_015_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_015_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_015_src_channel),                             //                .channel
		.rf_sink_ready           (yellowlight_s1_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (yellowlight_s1_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (yellowlight_s1_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (yellowlight_s1_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (yellowlight_s1_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (yellowlight_s1_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (yellowlight_s1_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (yellowlight_s1_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (yellowlight_s1_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (yellowlight_s1_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_015_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_015_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_015_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_015_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (yellowlight_s1_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (yellowlight_s1_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (yellowlight_s1_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) yellowlight_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (yellowlight_s1_agent_rf_source_data),                 //        in.data
		.in_valid          (yellowlight_s1_agent_rf_source_valid),                //          .valid
		.in_ready          (yellowlight_s1_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (yellowlight_s1_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (yellowlight_s1_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (yellowlight_s1_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (yellowlight_s1_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (yellowlight_s1_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (yellowlight_s1_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (yellowlight_s1_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) greenlight_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (nios2_processor_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (greenlight_s1_agent_m0_address),                      //              m0.address
		.m0_burstcount           (greenlight_s1_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (greenlight_s1_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (greenlight_s1_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (greenlight_s1_agent_m0_lock),                         //                .lock
		.m0_readdata             (greenlight_s1_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (greenlight_s1_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (greenlight_s1_agent_m0_read),                         //                .read
		.m0_waitrequest          (greenlight_s1_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (greenlight_s1_agent_m0_writedata),                    //                .writedata
		.m0_write                (greenlight_s1_agent_m0_write),                        //                .write
		.rp_endofpacket          (greenlight_s1_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (greenlight_s1_agent_rp_ready),                        //                .ready
		.rp_valid                (greenlight_s1_agent_rp_valid),                        //                .valid
		.rp_data                 (greenlight_s1_agent_rp_data),                         //                .data
		.rp_startofpacket        (greenlight_s1_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (cmd_mux_016_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_016_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_016_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_016_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_016_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_016_src_channel),                             //                .channel
		.rf_sink_ready           (greenlight_s1_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (greenlight_s1_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (greenlight_s1_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (greenlight_s1_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (greenlight_s1_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (greenlight_s1_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (greenlight_s1_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (greenlight_s1_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (greenlight_s1_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (greenlight_s1_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_016_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_016_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_016_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_016_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (greenlight_s1_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (greenlight_s1_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (greenlight_s1_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) greenlight_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (greenlight_s1_agent_rf_source_data),                  //        in.data
		.in_valid          (greenlight_s1_agent_rf_source_valid),                 //          .valid
		.in_ready          (greenlight_s1_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (greenlight_s1_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (greenlight_s1_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (greenlight_s1_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (greenlight_s1_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (greenlight_s1_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (greenlight_s1_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (greenlight_s1_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) reverse_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (nios2_processor_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (reverse_s1_agent_m0_address),                         //              m0.address
		.m0_burstcount           (reverse_s1_agent_m0_burstcount),                      //                .burstcount
		.m0_byteenable           (reverse_s1_agent_m0_byteenable),                      //                .byteenable
		.m0_debugaccess          (reverse_s1_agent_m0_debugaccess),                     //                .debugaccess
		.m0_lock                 (reverse_s1_agent_m0_lock),                            //                .lock
		.m0_readdata             (reverse_s1_agent_m0_readdata),                        //                .readdata
		.m0_readdatavalid        (reverse_s1_agent_m0_readdatavalid),                   //                .readdatavalid
		.m0_read                 (reverse_s1_agent_m0_read),                            //                .read
		.m0_waitrequest          (reverse_s1_agent_m0_waitrequest),                     //                .waitrequest
		.m0_writedata            (reverse_s1_agent_m0_writedata),                       //                .writedata
		.m0_write                (reverse_s1_agent_m0_write),                           //                .write
		.rp_endofpacket          (reverse_s1_agent_rp_endofpacket),                     //              rp.endofpacket
		.rp_ready                (reverse_s1_agent_rp_ready),                           //                .ready
		.rp_valid                (reverse_s1_agent_rp_valid),                           //                .valid
		.rp_data                 (reverse_s1_agent_rp_data),                            //                .data
		.rp_startofpacket        (reverse_s1_agent_rp_startofpacket),                   //                .startofpacket
		.cp_ready                (cmd_mux_017_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_017_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_017_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_017_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_017_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_017_src_channel),                             //                .channel
		.rf_sink_ready           (reverse_s1_agent_rsp_fifo_out_ready),                 //         rf_sink.ready
		.rf_sink_valid           (reverse_s1_agent_rsp_fifo_out_valid),                 //                .valid
		.rf_sink_startofpacket   (reverse_s1_agent_rsp_fifo_out_startofpacket),         //                .startofpacket
		.rf_sink_endofpacket     (reverse_s1_agent_rsp_fifo_out_endofpacket),           //                .endofpacket
		.rf_sink_data            (reverse_s1_agent_rsp_fifo_out_data),                  //                .data
		.rf_source_ready         (reverse_s1_agent_rf_source_ready),                    //       rf_source.ready
		.rf_source_valid         (reverse_s1_agent_rf_source_valid),                    //                .valid
		.rf_source_startofpacket (reverse_s1_agent_rf_source_startofpacket),            //                .startofpacket
		.rf_source_endofpacket   (reverse_s1_agent_rf_source_endofpacket),              //                .endofpacket
		.rf_source_data          (reverse_s1_agent_rf_source_data),                     //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_017_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_017_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_017_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_017_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (reverse_s1_agent_rdata_fifo_src_ready),               //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (reverse_s1_agent_rdata_fifo_src_valid),               //                .valid
		.rdata_fifo_src_data     (reverse_s1_agent_rdata_fifo_src_data),                //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) reverse_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (reverse_s1_agent_rf_source_data),                     //        in.data
		.in_valid          (reverse_s1_agent_rf_source_valid),                    //          .valid
		.in_ready          (reverse_s1_agent_rf_source_ready),                    //          .ready
		.in_startofpacket  (reverse_s1_agent_rf_source_startofpacket),            //          .startofpacket
		.in_endofpacket    (reverse_s1_agent_rf_source_endofpacket),              //          .endofpacket
		.out_data          (reverse_s1_agent_rsp_fifo_out_data),                  //       out.data
		.out_valid         (reverse_s1_agent_rsp_fifo_out_valid),                 //          .valid
		.out_ready         (reverse_s1_agent_rsp_fifo_out_ready),                 //          .ready
		.out_startofpacket (reverse_s1_agent_rsp_fifo_out_startofpacket),         //          .startofpacket
		.out_endofpacket   (reverse_s1_agent_rsp_fifo_out_endofpacket),           //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) encoderreset_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (nios2_processor_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (encoderreset_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (encoderreset_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (encoderreset_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (encoderreset_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (encoderreset_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (encoderreset_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (encoderreset_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (encoderreset_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (encoderreset_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (encoderreset_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (encoderreset_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (encoderreset_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (encoderreset_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (encoderreset_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (encoderreset_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (encoderreset_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (cmd_mux_018_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_018_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_018_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_018_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_018_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_018_src_channel),                             //                .channel
		.rf_sink_ready           (encoderreset_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (encoderreset_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (encoderreset_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (encoderreset_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (encoderreset_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (encoderreset_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (encoderreset_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (encoderreset_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (encoderreset_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (encoderreset_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_018_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_018_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_018_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_018_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (encoderreset_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (encoderreset_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (encoderreset_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) encoderreset_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (encoderreset_s1_agent_rf_source_data),                //        in.data
		.in_valid          (encoderreset_s1_agent_rf_source_valid),               //          .valid
		.in_ready          (encoderreset_s1_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (encoderreset_s1_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (encoderreset_s1_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (encoderreset_s1_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (encoderreset_s1_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (encoderreset_s1_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (encoderreset_s1_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (encoderreset_s1_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) challengeselect_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (nios2_processor_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (challengeselect_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (challengeselect_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (challengeselect_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (challengeselect_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (challengeselect_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (challengeselect_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (challengeselect_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (challengeselect_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (challengeselect_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (challengeselect_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (challengeselect_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (challengeselect_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (challengeselect_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (challengeselect_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (challengeselect_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (challengeselect_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_019_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_019_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_019_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_019_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_019_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_019_src_channel),                             //                .channel
		.rf_sink_ready           (challengeselect_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (challengeselect_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (challengeselect_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (challengeselect_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (challengeselect_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (challengeselect_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (challengeselect_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (challengeselect_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (challengeselect_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (challengeselect_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_019_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_019_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_019_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_019_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (challengeselect_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (challengeselect_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (challengeselect_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) challengeselect_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (challengeselect_s1_agent_rf_source_data),             //        in.data
		.in_valid          (challengeselect_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (challengeselect_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (challengeselect_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (challengeselect_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (challengeselect_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (challengeselect_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (challengeselect_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (challengeselect_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (challengeselect_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	nios_system_mm_interconnect_0_router router (
		.sink_ready         (nios2_processor_data_master_agent_cp_ready),          //      sink.ready
		.sink_valid         (nios2_processor_data_master_agent_cp_valid),          //          .valid
		.sink_data          (nios2_processor_data_master_agent_cp_data),           //          .data
		.sink_startofpacket (nios2_processor_data_master_agent_cp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (nios2_processor_data_master_agent_cp_endofpacket),    //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                    //       src.ready
		.src_valid          (router_src_valid),                                    //          .valid
		.src_data           (router_src_data),                                     //          .data
		.src_channel        (router_src_channel),                                  //          .channel
		.src_startofpacket  (router_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                               //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (nios2_processor_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_processor_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (nios2_processor_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_processor_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_processor_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                             //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset),       // clk_reset.reset
		.src_ready          (router_001_src_ready),                                      //       src.ready
		.src_valid          (router_001_src_valid),                                      //          .valid
		.src_data           (router_001_src_data),                                       //          .data
		.src_channel        (router_001_src_channel),                                    //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                              //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                 //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (jtag_uart_avalon_jtag_slave_agent_rp_ready),          //      sink.ready
		.sink_valid         (jtag_uart_avalon_jtag_slave_agent_rp_valid),          //          .valid
		.sink_data          (jtag_uart_avalon_jtag_slave_agent_rp_data),           //          .data
		.sink_startofpacket (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),    //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                                //       src.ready
		.src_valid          (router_002_src_valid),                                //          .valid
		.src_data           (router_002_src_data),                                 //          .data
		.src_channel        (router_002_src_channel),                              //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                           //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (nios2_processor_jtag_debug_module_agent_rp_ready),         //      sink.ready
		.sink_valid         (nios2_processor_jtag_debug_module_agent_rp_valid),         //          .valid
		.sink_data          (nios2_processor_jtag_debug_module_agent_rp_data),          //          .data
		.sink_startofpacket (nios2_processor_jtag_debug_module_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_processor_jtag_debug_module_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                            //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_003_src_ready),                                     //       src.ready
		.src_valid          (router_003_src_valid),                                     //          .valid
		.src_data           (router_003_src_data),                                      //          .data
		.src_channel        (router_003_src_channel),                                   //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                             //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_003 router_004 (
		.sink_ready         (onchip_memory_s1_agent_rp_ready),                     //      sink.ready
		.sink_valid         (onchip_memory_s1_agent_rp_valid),                     //          .valid
		.sink_data          (onchip_memory_s1_agent_rp_data),                      //          .data
		.sink_startofpacket (onchip_memory_s1_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (onchip_memory_s1_agent_rp_endofpacket),               //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                                //       src.ready
		.src_valid          (router_004_src_valid),                                //          .valid
		.src_data           (router_004_src_data),                                 //          .data
		.src_channel        (router_004_src_channel),                              //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                           //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_002 router_005 (
		.sink_ready         (switches_s1_agent_rp_ready),                          //      sink.ready
		.sink_valid         (switches_s1_agent_rp_valid),                          //          .valid
		.sink_data          (switches_s1_agent_rp_data),                           //          .data
		.sink_startofpacket (switches_s1_agent_rp_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (switches_s1_agent_rp_endofpacket),                    //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                                //       src.ready
		.src_valid          (router_005_src_valid),                                //          .valid
		.src_data           (router_005_src_data),                                 //          .data
		.src_channel        (router_005_src_channel),                              //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                           //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_002 router_006 (
		.sink_ready         (leds_s1_agent_rp_ready),                              //      sink.ready
		.sink_valid         (leds_s1_agent_rp_valid),                              //          .valid
		.sink_data          (leds_s1_agent_rp_data),                               //          .data
		.sink_startofpacket (leds_s1_agent_rp_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (leds_s1_agent_rp_endofpacket),                        //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                                //       src.ready
		.src_valid          (router_006_src_valid),                                //          .valid
		.src_data           (router_006_src_data),                                 //          .data
		.src_channel        (router_006_src_channel),                              //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                           //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_002 router_007 (
		.sink_ready         (encoderincm_s1_agent_rp_ready),                       //      sink.ready
		.sink_valid         (encoderincm_s1_agent_rp_valid),                       //          .valid
		.sink_data          (encoderincm_s1_agent_rp_data),                        //          .data
		.sink_startofpacket (encoderincm_s1_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (encoderincm_s1_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                                //       src.ready
		.src_valid          (router_007_src_valid),                                //          .valid
		.src_data           (router_007_src_data),                                 //          .data
		.src_channel        (router_007_src_channel),                              //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                           //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_002 router_008 (
		.sink_ready         (frsensor_s1_agent_rp_ready),                          //      sink.ready
		.sink_valid         (frsensor_s1_agent_rp_valid),                          //          .valid
		.sink_data          (frsensor_s1_agent_rp_data),                           //          .data
		.sink_startofpacket (frsensor_s1_agent_rp_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (frsensor_s1_agent_rp_endofpacket),                    //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                                //       src.ready
		.src_valid          (router_008_src_valid),                                //          .valid
		.src_data           (router_008_src_data),                                 //          .data
		.src_channel        (router_008_src_channel),                              //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                           //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_002 router_009 (
		.sink_ready         (flsensor_s1_agent_rp_ready),                          //      sink.ready
		.sink_valid         (flsensor_s1_agent_rp_valid),                          //          .valid
		.sink_data          (flsensor_s1_agent_rp_data),                           //          .data
		.sink_startofpacket (flsensor_s1_agent_rp_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (flsensor_s1_agent_rp_endofpacket),                    //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                                //       src.ready
		.src_valid          (router_009_src_valid),                                //          .valid
		.src_data           (router_009_src_data),                                 //          .data
		.src_channel        (router_009_src_channel),                              //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                           //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_002 router_010 (
		.sink_ready         (lsensor_s1_agent_rp_ready),                           //      sink.ready
		.sink_valid         (lsensor_s1_agent_rp_valid),                           //          .valid
		.sink_data          (lsensor_s1_agent_rp_data),                            //          .data
		.sink_startofpacket (lsensor_s1_agent_rp_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (lsensor_s1_agent_rp_endofpacket),                     //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                                //       src.ready
		.src_valid          (router_010_src_valid),                                //          .valid
		.src_data           (router_010_src_data),                                 //          .data
		.src_channel        (router_010_src_channel),                              //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                           //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_002 router_011 (
		.sink_ready         (rsensor_s1_agent_rp_ready),                           //      sink.ready
		.sink_valid         (rsensor_s1_agent_rp_valid),                           //          .valid
		.sink_data          (rsensor_s1_agent_rp_data),                            //          .data
		.sink_startofpacket (rsensor_s1_agent_rp_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (rsensor_s1_agent_rp_endofpacket),                     //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                                //       src.ready
		.src_valid          (router_011_src_valid),                                //          .valid
		.src_data           (router_011_src_data),                                 //          .data
		.src_channel        (router_011_src_channel),                              //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                           //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_002 router_012 (
		.sink_ready         (blsensor_s1_agent_rp_ready),                          //      sink.ready
		.sink_valid         (blsensor_s1_agent_rp_valid),                          //          .valid
		.sink_data          (blsensor_s1_agent_rp_data),                           //          .data
		.sink_startofpacket (blsensor_s1_agent_rp_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (blsensor_s1_agent_rp_endofpacket),                    //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                                //       src.ready
		.src_valid          (router_012_src_valid),                                //          .valid
		.src_data           (router_012_src_data),                                 //          .data
		.src_channel        (router_012_src_channel),                              //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                           //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_002 router_013 (
		.sink_ready         (drivespeed_s1_agent_rp_ready),                        //      sink.ready
		.sink_valid         (drivespeed_s1_agent_rp_valid),                        //          .valid
		.sink_data          (drivespeed_s1_agent_rp_data),                         //          .data
		.sink_startofpacket (drivespeed_s1_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (drivespeed_s1_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                                //       src.ready
		.src_valid          (router_013_src_valid),                                //          .valid
		.src_data           (router_013_src_data),                                 //          .data
		.src_channel        (router_013_src_channel),                              //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                           //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_002 router_014 (
		.sink_ready         (brsensor_s1_agent_rp_ready),                          //      sink.ready
		.sink_valid         (brsensor_s1_agent_rp_valid),                          //          .valid
		.sink_data          (brsensor_s1_agent_rp_data),                           //          .data
		.sink_startofpacket (brsensor_s1_agent_rp_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (brsensor_s1_agent_rp_endofpacket),                    //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_014_src_ready),                                //       src.ready
		.src_valid          (router_014_src_valid),                                //          .valid
		.src_data           (router_014_src_data),                                 //          .data
		.src_channel        (router_014_src_channel),                              //          .channel
		.src_startofpacket  (router_014_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                           //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_002 router_015 (
		.sink_ready         (targetdirection_s1_agent_rp_ready),                   //      sink.ready
		.sink_valid         (targetdirection_s1_agent_rp_valid),                   //          .valid
		.sink_data          (targetdirection_s1_agent_rp_data),                    //          .data
		.sink_startofpacket (targetdirection_s1_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (targetdirection_s1_agent_rp_endofpacket),             //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_015_src_ready),                                //       src.ready
		.src_valid          (router_015_src_valid),                                //          .valid
		.src_data           (router_015_src_data),                                 //          .data
		.src_channel        (router_015_src_channel),                              //          .channel
		.src_startofpacket  (router_015_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                           //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_002 router_016 (
		.sink_ready         (redlight_s1_agent_rp_ready),                          //      sink.ready
		.sink_valid         (redlight_s1_agent_rp_valid),                          //          .valid
		.sink_data          (redlight_s1_agent_rp_data),                           //          .data
		.sink_startofpacket (redlight_s1_agent_rp_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (redlight_s1_agent_rp_endofpacket),                    //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_016_src_ready),                                //       src.ready
		.src_valid          (router_016_src_valid),                                //          .valid
		.src_data           (router_016_src_data),                                 //          .data
		.src_channel        (router_016_src_channel),                              //          .channel
		.src_startofpacket  (router_016_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                           //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_002 router_017 (
		.sink_ready         (yellowlight_s1_agent_rp_ready),                       //      sink.ready
		.sink_valid         (yellowlight_s1_agent_rp_valid),                       //          .valid
		.sink_data          (yellowlight_s1_agent_rp_data),                        //          .data
		.sink_startofpacket (yellowlight_s1_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (yellowlight_s1_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_017_src_ready),                                //       src.ready
		.src_valid          (router_017_src_valid),                                //          .valid
		.src_data           (router_017_src_data),                                 //          .data
		.src_channel        (router_017_src_channel),                              //          .channel
		.src_startofpacket  (router_017_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                           //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_002 router_018 (
		.sink_ready         (greenlight_s1_agent_rp_ready),                        //      sink.ready
		.sink_valid         (greenlight_s1_agent_rp_valid),                        //          .valid
		.sink_data          (greenlight_s1_agent_rp_data),                         //          .data
		.sink_startofpacket (greenlight_s1_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (greenlight_s1_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_018_src_ready),                                //       src.ready
		.src_valid          (router_018_src_valid),                                //          .valid
		.src_data           (router_018_src_data),                                 //          .data
		.src_channel        (router_018_src_channel),                              //          .channel
		.src_startofpacket  (router_018_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)                           //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_002 router_019 (
		.sink_ready         (reverse_s1_agent_rp_ready),                           //      sink.ready
		.sink_valid         (reverse_s1_agent_rp_valid),                           //          .valid
		.sink_data          (reverse_s1_agent_rp_data),                            //          .data
		.sink_startofpacket (reverse_s1_agent_rp_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (reverse_s1_agent_rp_endofpacket),                     //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_019_src_ready),                                //       src.ready
		.src_valid          (router_019_src_valid),                                //          .valid
		.src_data           (router_019_src_data),                                 //          .data
		.src_channel        (router_019_src_channel),                              //          .channel
		.src_startofpacket  (router_019_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_019_src_endofpacket)                           //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_002 router_020 (
		.sink_ready         (encoderreset_s1_agent_rp_ready),                      //      sink.ready
		.sink_valid         (encoderreset_s1_agent_rp_valid),                      //          .valid
		.sink_data          (encoderreset_s1_agent_rp_data),                       //          .data
		.sink_startofpacket (encoderreset_s1_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (encoderreset_s1_agent_rp_endofpacket),                //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_020_src_ready),                                //       src.ready
		.src_valid          (router_020_src_valid),                                //          .valid
		.src_data           (router_020_src_data),                                 //          .data
		.src_channel        (router_020_src_channel),                              //          .channel
		.src_startofpacket  (router_020_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_020_src_endofpacket)                           //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_002 router_021 (
		.sink_ready         (challengeselect_s1_agent_rp_ready),                   //      sink.ready
		.sink_valid         (challengeselect_s1_agent_rp_valid),                   //          .valid
		.sink_data          (challengeselect_s1_agent_rp_data),                    //          .data
		.sink_startofpacket (challengeselect_s1_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (challengeselect_s1_agent_rp_endofpacket),             //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_021_src_ready),                                //       src.ready
		.src_valid          (router_021_src_valid),                                //          .valid
		.src_data           (router_021_src_data),                                 //          .data
		.src_channel        (router_021_src_channel),                              //          .channel
		.src_startofpacket  (router_021_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_021_src_endofpacket)                           //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready          (router_src_ready),                                    //      sink.ready
		.sink_channel        (router_src_channel),                                  //          .channel
		.sink_data           (router_src_data),                                     //          .data
		.sink_startofpacket  (router_src_startofpacket),                            //          .startofpacket
		.sink_endofpacket    (router_src_endofpacket),                              //          .endofpacket
		.sink_valid          (router_src_valid),                                    //          .valid
		.src0_ready          (cmd_demux_src0_ready),                                //      src0.ready
		.src0_valid          (cmd_demux_src0_valid),                                //          .valid
		.src0_data           (cmd_demux_src0_data),                                 //          .data
		.src0_channel        (cmd_demux_src0_channel),                              //          .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),                        //          .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),                          //          .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                                //      src1.ready
		.src1_valid          (cmd_demux_src1_valid),                                //          .valid
		.src1_data           (cmd_demux_src1_data),                                 //          .data
		.src1_channel        (cmd_demux_src1_channel),                              //          .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),                        //          .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),                          //          .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                                //      src2.ready
		.src2_valid          (cmd_demux_src2_valid),                                //          .valid
		.src2_data           (cmd_demux_src2_data),                                 //          .data
		.src2_channel        (cmd_demux_src2_channel),                              //          .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),                        //          .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),                          //          .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                                //      src3.ready
		.src3_valid          (cmd_demux_src3_valid),                                //          .valid
		.src3_data           (cmd_demux_src3_data),                                 //          .data
		.src3_channel        (cmd_demux_src3_channel),                              //          .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),                        //          .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),                          //          .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                                //      src4.ready
		.src4_valid          (cmd_demux_src4_valid),                                //          .valid
		.src4_data           (cmd_demux_src4_data),                                 //          .data
		.src4_channel        (cmd_demux_src4_channel),                              //          .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),                        //          .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),                          //          .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                                //      src5.ready
		.src5_valid          (cmd_demux_src5_valid),                                //          .valid
		.src5_data           (cmd_demux_src5_data),                                 //          .data
		.src5_channel        (cmd_demux_src5_channel),                              //          .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),                        //          .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),                          //          .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                                //      src6.ready
		.src6_valid          (cmd_demux_src6_valid),                                //          .valid
		.src6_data           (cmd_demux_src6_data),                                 //          .data
		.src6_channel        (cmd_demux_src6_channel),                              //          .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),                        //          .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),                          //          .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                                //      src7.ready
		.src7_valid          (cmd_demux_src7_valid),                                //          .valid
		.src7_data           (cmd_demux_src7_data),                                 //          .data
		.src7_channel        (cmd_demux_src7_channel),                              //          .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),                        //          .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),                          //          .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                                //      src8.ready
		.src8_valid          (cmd_demux_src8_valid),                                //          .valid
		.src8_data           (cmd_demux_src8_data),                                 //          .data
		.src8_channel        (cmd_demux_src8_channel),                              //          .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),                        //          .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),                          //          .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                                //      src9.ready
		.src9_valid          (cmd_demux_src9_valid),                                //          .valid
		.src9_data           (cmd_demux_src9_data),                                 //          .data
		.src9_channel        (cmd_demux_src9_channel),                              //          .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),                        //          .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),                          //          .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                               //     src10.ready
		.src10_valid         (cmd_demux_src10_valid),                               //          .valid
		.src10_data          (cmd_demux_src10_data),                                //          .data
		.src10_channel       (cmd_demux_src10_channel),                             //          .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),                       //          .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket),                         //          .endofpacket
		.src11_ready         (cmd_demux_src11_ready),                               //     src11.ready
		.src11_valid         (cmd_demux_src11_valid),                               //          .valid
		.src11_data          (cmd_demux_src11_data),                                //          .data
		.src11_channel       (cmd_demux_src11_channel),                             //          .channel
		.src11_startofpacket (cmd_demux_src11_startofpacket),                       //          .startofpacket
		.src11_endofpacket   (cmd_demux_src11_endofpacket),                         //          .endofpacket
		.src12_ready         (cmd_demux_src12_ready),                               //     src12.ready
		.src12_valid         (cmd_demux_src12_valid),                               //          .valid
		.src12_data          (cmd_demux_src12_data),                                //          .data
		.src12_channel       (cmd_demux_src12_channel),                             //          .channel
		.src12_startofpacket (cmd_demux_src12_startofpacket),                       //          .startofpacket
		.src12_endofpacket   (cmd_demux_src12_endofpacket),                         //          .endofpacket
		.src13_ready         (cmd_demux_src13_ready),                               //     src13.ready
		.src13_valid         (cmd_demux_src13_valid),                               //          .valid
		.src13_data          (cmd_demux_src13_data),                                //          .data
		.src13_channel       (cmd_demux_src13_channel),                             //          .channel
		.src13_startofpacket (cmd_demux_src13_startofpacket),                       //          .startofpacket
		.src13_endofpacket   (cmd_demux_src13_endofpacket),                         //          .endofpacket
		.src14_ready         (cmd_demux_src14_ready),                               //     src14.ready
		.src14_valid         (cmd_demux_src14_valid),                               //          .valid
		.src14_data          (cmd_demux_src14_data),                                //          .data
		.src14_channel       (cmd_demux_src14_channel),                             //          .channel
		.src14_startofpacket (cmd_demux_src14_startofpacket),                       //          .startofpacket
		.src14_endofpacket   (cmd_demux_src14_endofpacket),                         //          .endofpacket
		.src15_ready         (cmd_demux_src15_ready),                               //     src15.ready
		.src15_valid         (cmd_demux_src15_valid),                               //          .valid
		.src15_data          (cmd_demux_src15_data),                                //          .data
		.src15_channel       (cmd_demux_src15_channel),                             //          .channel
		.src15_startofpacket (cmd_demux_src15_startofpacket),                       //          .startofpacket
		.src15_endofpacket   (cmd_demux_src15_endofpacket),                         //          .endofpacket
		.src16_ready         (cmd_demux_src16_ready),                               //     src16.ready
		.src16_valid         (cmd_demux_src16_valid),                               //          .valid
		.src16_data          (cmd_demux_src16_data),                                //          .data
		.src16_channel       (cmd_demux_src16_channel),                             //          .channel
		.src16_startofpacket (cmd_demux_src16_startofpacket),                       //          .startofpacket
		.src16_endofpacket   (cmd_demux_src16_endofpacket),                         //          .endofpacket
		.src17_ready         (cmd_demux_src17_ready),                               //     src17.ready
		.src17_valid         (cmd_demux_src17_valid),                               //          .valid
		.src17_data          (cmd_demux_src17_data),                                //          .data
		.src17_channel       (cmd_demux_src17_channel),                             //          .channel
		.src17_startofpacket (cmd_demux_src17_startofpacket),                       //          .startofpacket
		.src17_endofpacket   (cmd_demux_src17_endofpacket),                         //          .endofpacket
		.src18_ready         (cmd_demux_src18_ready),                               //     src18.ready
		.src18_valid         (cmd_demux_src18_valid),                               //          .valid
		.src18_data          (cmd_demux_src18_data),                                //          .data
		.src18_channel       (cmd_demux_src18_channel),                             //          .channel
		.src18_startofpacket (cmd_demux_src18_startofpacket),                       //          .startofpacket
		.src18_endofpacket   (cmd_demux_src18_endofpacket),                         //          .endofpacket
		.src19_ready         (cmd_demux_src19_ready),                               //     src19.ready
		.src19_valid         (cmd_demux_src19_valid),                               //          .valid
		.src19_data          (cmd_demux_src19_data),                                //          .data
		.src19_channel       (cmd_demux_src19_channel),                             //          .channel
		.src19_startofpacket (cmd_demux_src19_startofpacket),                       //          .startofpacket
		.src19_endofpacket   (cmd_demux_src19_endofpacket)                          //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                                //      sink.ready
		.sink_channel       (router_001_src_channel),                              //          .channel
		.sink_data          (router_001_src_data),                                 //          .data
		.sink_startofpacket (router_001_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_001_src_valid),                                //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                            //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                            //          .valid
		.src0_data          (cmd_demux_001_src0_data),                             //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                          //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                            //      src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                            //          .valid
		.src1_data          (cmd_demux_001_src1_data),                             //          .data
		.src1_channel       (cmd_demux_001_src1_channel),                          //          .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket)                       //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                   //       src.ready
		.src_valid           (cmd_mux_src_valid),                                   //          .valid
		.src_data            (cmd_mux_src_data),                                    //          .data
		.src_channel         (cmd_mux_src_channel),                                 //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                              //          .channel
		.sink0_data          (cmd_demux_src0_data),                                 //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                           //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_001 cmd_mux_001 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                               //          .valid
		.src_data            (cmd_mux_001_src_data),                                //          .data
		.src_channel         (cmd_mux_001_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                                //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                                //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                              //          .channel
		.sink0_data          (cmd_demux_src1_data),                                 //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket),                          //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                            //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                            //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                          //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                             //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),                    //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                       //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_001 cmd_mux_002 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                               //          .valid
		.src_data            (cmd_mux_002_src_data),                                //          .data
		.src_channel         (cmd_mux_002_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                                //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                                //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                              //          .channel
		.sink0_data          (cmd_demux_src2_data),                                 //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket),                          //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                            //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                            //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                          //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                             //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),                    //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)                       //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux cmd_mux_003 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                               //          .valid
		.src_data            (cmd_mux_003_src_data),                                //          .data
		.src_channel         (cmd_mux_003_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                                //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                                //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                              //          .channel
		.sink0_data          (cmd_demux_src3_data),                                 //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket)                           //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux cmd_mux_004 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                               //          .valid
		.src_data            (cmd_mux_004_src_data),                                //          .data
		.src_channel         (cmd_mux_004_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                                //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                                //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                              //          .channel
		.sink0_data          (cmd_demux_src4_data),                                 //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket)                           //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux cmd_mux_005 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                               //          .valid
		.src_data            (cmd_mux_005_src_data),                                //          .data
		.src_channel         (cmd_mux_005_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                                //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                                //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                              //          .channel
		.sink0_data          (cmd_demux_src5_data),                                 //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket)                           //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux cmd_mux_006 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                               //          .valid
		.src_data            (cmd_mux_006_src_data),                                //          .data
		.src_channel         (cmd_mux_006_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                                //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                                //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                              //          .channel
		.sink0_data          (cmd_demux_src6_data),                                 //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket)                           //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux cmd_mux_007 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                               //          .valid
		.src_data            (cmd_mux_007_src_data),                                //          .data
		.src_channel         (cmd_mux_007_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                                //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                                //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                              //          .channel
		.sink0_data          (cmd_demux_src7_data),                                 //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket)                           //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux cmd_mux_008 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                               //          .valid
		.src_data            (cmd_mux_008_src_data),                                //          .data
		.src_channel         (cmd_mux_008_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                                //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                                //          .valid
		.sink0_channel       (cmd_demux_src8_channel),                              //          .channel
		.sink0_data          (cmd_demux_src8_data),                                 //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket)                           //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux cmd_mux_009 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                               //          .valid
		.src_data            (cmd_mux_009_src_data),                                //          .data
		.src_channel         (cmd_mux_009_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_src9_ready),                                //     sink0.ready
		.sink0_valid         (cmd_demux_src9_valid),                                //          .valid
		.sink0_channel       (cmd_demux_src9_channel),                              //          .channel
		.sink0_data          (cmd_demux_src9_data),                                 //          .data
		.sink0_startofpacket (cmd_demux_src9_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src9_endofpacket)                           //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux cmd_mux_010 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                               //          .valid
		.src_data            (cmd_mux_010_src_data),                                //          .data
		.src_channel         (cmd_mux_010_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_src10_ready),                               //     sink0.ready
		.sink0_valid         (cmd_demux_src10_valid),                               //          .valid
		.sink0_channel       (cmd_demux_src10_channel),                             //          .channel
		.sink0_data          (cmd_demux_src10_data),                                //          .data
		.sink0_startofpacket (cmd_demux_src10_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src10_endofpacket)                          //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux cmd_mux_011 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                               //          .valid
		.src_data            (cmd_mux_011_src_data),                                //          .data
		.src_channel         (cmd_mux_011_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_src11_ready),                               //     sink0.ready
		.sink0_valid         (cmd_demux_src11_valid),                               //          .valid
		.sink0_channel       (cmd_demux_src11_channel),                             //          .channel
		.sink0_data          (cmd_demux_src11_data),                                //          .data
		.sink0_startofpacket (cmd_demux_src11_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src11_endofpacket)                          //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux cmd_mux_012 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                               //          .valid
		.src_data            (cmd_mux_012_src_data),                                //          .data
		.src_channel         (cmd_mux_012_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_src12_ready),                               //     sink0.ready
		.sink0_valid         (cmd_demux_src12_valid),                               //          .valid
		.sink0_channel       (cmd_demux_src12_channel),                             //          .channel
		.sink0_data          (cmd_demux_src12_data),                                //          .data
		.sink0_startofpacket (cmd_demux_src12_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src12_endofpacket)                          //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux cmd_mux_013 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                               //          .valid
		.src_data            (cmd_mux_013_src_data),                                //          .data
		.src_channel         (cmd_mux_013_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_src13_ready),                               //     sink0.ready
		.sink0_valid         (cmd_demux_src13_valid),                               //          .valid
		.sink0_channel       (cmd_demux_src13_channel),                             //          .channel
		.sink0_data          (cmd_demux_src13_data),                                //          .data
		.sink0_startofpacket (cmd_demux_src13_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src13_endofpacket)                          //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux cmd_mux_014 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_014_src_valid),                               //          .valid
		.src_data            (cmd_mux_014_src_data),                                //          .data
		.src_channel         (cmd_mux_014_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_src14_ready),                               //     sink0.ready
		.sink0_valid         (cmd_demux_src14_valid),                               //          .valid
		.sink0_channel       (cmd_demux_src14_channel),                             //          .channel
		.sink0_data          (cmd_demux_src14_data),                                //          .data
		.sink0_startofpacket (cmd_demux_src14_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src14_endofpacket)                          //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux cmd_mux_015 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_015_src_valid),                               //          .valid
		.src_data            (cmd_mux_015_src_data),                                //          .data
		.src_channel         (cmd_mux_015_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_src15_ready),                               //     sink0.ready
		.sink0_valid         (cmd_demux_src15_valid),                               //          .valid
		.sink0_channel       (cmd_demux_src15_channel),                             //          .channel
		.sink0_data          (cmd_demux_src15_data),                                //          .data
		.sink0_startofpacket (cmd_demux_src15_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src15_endofpacket)                          //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux cmd_mux_016 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_016_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_016_src_valid),                               //          .valid
		.src_data            (cmd_mux_016_src_data),                                //          .data
		.src_channel         (cmd_mux_016_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_016_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_016_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_src16_ready),                               //     sink0.ready
		.sink0_valid         (cmd_demux_src16_valid),                               //          .valid
		.sink0_channel       (cmd_demux_src16_channel),                             //          .channel
		.sink0_data          (cmd_demux_src16_data),                                //          .data
		.sink0_startofpacket (cmd_demux_src16_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src16_endofpacket)                          //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux cmd_mux_017 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_017_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_017_src_valid),                               //          .valid
		.src_data            (cmd_mux_017_src_data),                                //          .data
		.src_channel         (cmd_mux_017_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_017_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_017_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_src17_ready),                               //     sink0.ready
		.sink0_valid         (cmd_demux_src17_valid),                               //          .valid
		.sink0_channel       (cmd_demux_src17_channel),                             //          .channel
		.sink0_data          (cmd_demux_src17_data),                                //          .data
		.sink0_startofpacket (cmd_demux_src17_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src17_endofpacket)                          //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux cmd_mux_018 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_018_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_018_src_valid),                               //          .valid
		.src_data            (cmd_mux_018_src_data),                                //          .data
		.src_channel         (cmd_mux_018_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_018_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_018_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_src18_ready),                               //     sink0.ready
		.sink0_valid         (cmd_demux_src18_valid),                               //          .valid
		.sink0_channel       (cmd_demux_src18_channel),                             //          .channel
		.sink0_data          (cmd_demux_src18_data),                                //          .data
		.sink0_startofpacket (cmd_demux_src18_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src18_endofpacket)                          //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux cmd_mux_019 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_019_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_019_src_valid),                               //          .valid
		.src_data            (cmd_mux_019_src_data),                                //          .data
		.src_channel         (cmd_mux_019_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_019_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_019_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_src19_ready),                               //     sink0.ready
		.sink0_valid         (cmd_demux_src19_valid),                               //          .valid
		.sink0_channel       (cmd_demux_src19_channel),                             //          .channel
		.sink0_data          (cmd_demux_src19_data),                                //          .data
		.sink0_startofpacket (cmd_demux_src19_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src19_endofpacket)                          //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                                //      sink.ready
		.sink_channel       (router_002_src_channel),                              //          .channel
		.sink_data          (router_002_src_data),                                 //          .data
		.sink_startofpacket (router_002_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_002_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                //          .valid
		.src0_data          (rsp_demux_src0_data),                                 //          .data
		.src0_channel       (rsp_demux_src0_channel),                              //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                        //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                           //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_demux_001 rsp_demux_001 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                                //      sink.ready
		.sink_channel       (router_003_src_channel),                              //          .channel
		.sink_data          (router_003_src_data),                                 //          .data
		.sink_startofpacket (router_003_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_003_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_001_src0_data),                             //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_001_src1_data),                             //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)                       //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_demux_001 rsp_demux_002 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                                //      sink.ready
		.sink_channel       (router_004_src_channel),                              //          .channel
		.sink_data          (router_004_src_data),                                 //          .data
		.sink_startofpacket (router_004_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_004_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_002_src0_data),                             //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_002_src1_data),                             //          .data
		.src1_channel       (rsp_demux_002_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)                       //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux rsp_demux_003 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                                //      sink.ready
		.sink_channel       (router_005_src_channel),                              //          .channel
		.sink_data          (router_005_src_data),                                 //          .data
		.sink_startofpacket (router_005_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_005_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_003_src0_data),                             //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                       //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux rsp_demux_004 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                                //      sink.ready
		.sink_channel       (router_006_src_channel),                              //          .channel
		.sink_data          (router_006_src_data),                                 //          .data
		.sink_startofpacket (router_006_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_006_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_004_src0_data),                             //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                       //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux rsp_demux_005 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                                //      sink.ready
		.sink_channel       (router_007_src_channel),                              //          .channel
		.sink_data          (router_007_src_data),                                 //          .data
		.sink_startofpacket (router_007_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_007_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_005_src0_data),                             //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                       //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux rsp_demux_006 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                                //      sink.ready
		.sink_channel       (router_008_src_channel),                              //          .channel
		.sink_data          (router_008_src_data),                                 //          .data
		.sink_startofpacket (router_008_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_008_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_006_src0_data),                             //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)                       //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux rsp_demux_007 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                                //      sink.ready
		.sink_channel       (router_009_src_channel),                              //          .channel
		.sink_data          (router_009_src_data),                                 //          .data
		.sink_startofpacket (router_009_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_009_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_007_src0_data),                             //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)                       //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux rsp_demux_008 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                                //      sink.ready
		.sink_channel       (router_010_src_channel),                              //          .channel
		.sink_data          (router_010_src_data),                                 //          .data
		.sink_startofpacket (router_010_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_010_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_008_src0_data),                             //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket)                       //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux rsp_demux_009 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                                //      sink.ready
		.sink_channel       (router_011_src_channel),                              //          .channel
		.sink_data          (router_011_src_data),                                 //          .data
		.sink_startofpacket (router_011_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_011_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_009_src0_data),                             //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket)                       //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux rsp_demux_010 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                                //      sink.ready
		.sink_channel       (router_012_src_channel),                              //          .channel
		.sink_data          (router_012_src_data),                                 //          .data
		.sink_startofpacket (router_012_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_012_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_010_src0_data),                             //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket)                       //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux rsp_demux_011 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                                //      sink.ready
		.sink_channel       (router_013_src_channel),                              //          .channel
		.sink_data          (router_013_src_data),                                 //          .data
		.sink_startofpacket (router_013_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_013_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_011_src0_data),                             //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket)                       //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux rsp_demux_012 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                                //      sink.ready
		.sink_channel       (router_014_src_channel),                              //          .channel
		.sink_data          (router_014_src_data),                                 //          .data
		.sink_startofpacket (router_014_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_014_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_012_src0_data),                             //          .data
		.src0_channel       (rsp_demux_012_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket)                       //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux rsp_demux_013 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                                //      sink.ready
		.sink_channel       (router_015_src_channel),                              //          .channel
		.sink_data          (router_015_src_data),                                 //          .data
		.sink_startofpacket (router_015_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_015_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_013_src0_data),                             //          .data
		.src0_channel       (rsp_demux_013_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket)                       //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux rsp_demux_014 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_016_src_ready),                                //      sink.ready
		.sink_channel       (router_016_src_channel),                              //          .channel
		.sink_data          (router_016_src_data),                                 //          .data
		.sink_startofpacket (router_016_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_016_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_014_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_014_src0_data),                             //          .data
		.src0_channel       (rsp_demux_014_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket)                       //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux rsp_demux_015 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_017_src_ready),                                //      sink.ready
		.sink_channel       (router_017_src_channel),                              //          .channel
		.sink_data          (router_017_src_data),                                 //          .data
		.sink_startofpacket (router_017_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_017_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_015_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_015_src0_data),                             //          .data
		.src0_channel       (rsp_demux_015_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket)                       //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux rsp_demux_016 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_018_src_ready),                                //      sink.ready
		.sink_channel       (router_018_src_channel),                              //          .channel
		.sink_data          (router_018_src_data),                                 //          .data
		.sink_startofpacket (router_018_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_018_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_016_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_016_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_016_src0_data),                             //          .data
		.src0_channel       (rsp_demux_016_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_016_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_016_src0_endofpacket)                       //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux rsp_demux_017 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_019_src_ready),                                //      sink.ready
		.sink_channel       (router_019_src_channel),                              //          .channel
		.sink_data          (router_019_src_data),                                 //          .data
		.sink_startofpacket (router_019_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_019_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_019_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_017_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_017_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_017_src0_data),                             //          .data
		.src0_channel       (rsp_demux_017_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_017_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_017_src0_endofpacket)                       //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux rsp_demux_018 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_020_src_ready),                                //      sink.ready
		.sink_channel       (router_020_src_channel),                              //          .channel
		.sink_data          (router_020_src_data),                                 //          .data
		.sink_startofpacket (router_020_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_020_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_020_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_018_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_018_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_018_src0_data),                             //          .data
		.src0_channel       (rsp_demux_018_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_018_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_018_src0_endofpacket)                       //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux rsp_demux_019 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_021_src_ready),                                //      sink.ready
		.sink_channel       (router_021_src_channel),                              //          .channel
		.sink_data          (router_021_src_data),                                 //          .data
		.sink_startofpacket (router_021_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_021_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_021_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_019_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_019_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_019_src0_data),                             //          .data
		.src0_channel       (rsp_demux_019_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_019_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_019_src0_endofpacket)                       //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                  (clk_0_clk_clk),                                       //       clk.clk
		.reset                (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                                   //       src.ready
		.src_valid            (rsp_mux_src_valid),                                   //          .valid
		.src_data             (rsp_mux_src_data),                                    //          .data
		.src_channel          (rsp_mux_src_channel),                                 //          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),                           //          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),                             //          .endofpacket
		.sink0_ready          (rsp_demux_src0_ready),                                //     sink0.ready
		.sink0_valid          (rsp_demux_src0_valid),                                //          .valid
		.sink0_channel        (rsp_demux_src0_channel),                              //          .channel
		.sink0_data           (rsp_demux_src0_data),                                 //          .data
		.sink0_startofpacket  (rsp_demux_src0_startofpacket),                        //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src0_endofpacket),                          //          .endofpacket
		.sink1_ready          (rsp_demux_001_src0_ready),                            //     sink1.ready
		.sink1_valid          (rsp_demux_001_src0_valid),                            //          .valid
		.sink1_channel        (rsp_demux_001_src0_channel),                          //          .channel
		.sink1_data           (rsp_demux_001_src0_data),                             //          .data
		.sink1_startofpacket  (rsp_demux_001_src0_startofpacket),                    //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src0_endofpacket),                      //          .endofpacket
		.sink2_ready          (rsp_demux_002_src0_ready),                            //     sink2.ready
		.sink2_valid          (rsp_demux_002_src0_valid),                            //          .valid
		.sink2_channel        (rsp_demux_002_src0_channel),                          //          .channel
		.sink2_data           (rsp_demux_002_src0_data),                             //          .data
		.sink2_startofpacket  (rsp_demux_002_src0_startofpacket),                    //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src0_endofpacket),                      //          .endofpacket
		.sink3_ready          (rsp_demux_003_src0_ready),                            //     sink3.ready
		.sink3_valid          (rsp_demux_003_src0_valid),                            //          .valid
		.sink3_channel        (rsp_demux_003_src0_channel),                          //          .channel
		.sink3_data           (rsp_demux_003_src0_data),                             //          .data
		.sink3_startofpacket  (rsp_demux_003_src0_startofpacket),                    //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src0_endofpacket),                      //          .endofpacket
		.sink4_ready          (rsp_demux_004_src0_ready),                            //     sink4.ready
		.sink4_valid          (rsp_demux_004_src0_valid),                            //          .valid
		.sink4_channel        (rsp_demux_004_src0_channel),                          //          .channel
		.sink4_data           (rsp_demux_004_src0_data),                             //          .data
		.sink4_startofpacket  (rsp_demux_004_src0_startofpacket),                    //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src0_endofpacket),                      //          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),                            //     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),                            //          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),                          //          .channel
		.sink5_data           (rsp_demux_005_src0_data),                             //          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),                    //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),                      //          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),                            //     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),                            //          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),                          //          .channel
		.sink6_data           (rsp_demux_006_src0_data),                             //          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),                    //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),                      //          .endofpacket
		.sink7_ready          (rsp_demux_007_src0_ready),                            //     sink7.ready
		.sink7_valid          (rsp_demux_007_src0_valid),                            //          .valid
		.sink7_channel        (rsp_demux_007_src0_channel),                          //          .channel
		.sink7_data           (rsp_demux_007_src0_data),                             //          .data
		.sink7_startofpacket  (rsp_demux_007_src0_startofpacket),                    //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src0_endofpacket),                      //          .endofpacket
		.sink8_ready          (rsp_demux_008_src0_ready),                            //     sink8.ready
		.sink8_valid          (rsp_demux_008_src0_valid),                            //          .valid
		.sink8_channel        (rsp_demux_008_src0_channel),                          //          .channel
		.sink8_data           (rsp_demux_008_src0_data),                             //          .data
		.sink8_startofpacket  (rsp_demux_008_src0_startofpacket),                    //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src0_endofpacket),                      //          .endofpacket
		.sink9_ready          (rsp_demux_009_src0_ready),                            //     sink9.ready
		.sink9_valid          (rsp_demux_009_src0_valid),                            //          .valid
		.sink9_channel        (rsp_demux_009_src0_channel),                          //          .channel
		.sink9_data           (rsp_demux_009_src0_data),                             //          .data
		.sink9_startofpacket  (rsp_demux_009_src0_startofpacket),                    //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src0_endofpacket),                      //          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),                            //    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),                            //          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),                          //          .channel
		.sink10_data          (rsp_demux_010_src0_data),                             //          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),                    //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket),                      //          .endofpacket
		.sink11_ready         (rsp_demux_011_src0_ready),                            //    sink11.ready
		.sink11_valid         (rsp_demux_011_src0_valid),                            //          .valid
		.sink11_channel       (rsp_demux_011_src0_channel),                          //          .channel
		.sink11_data          (rsp_demux_011_src0_data),                             //          .data
		.sink11_startofpacket (rsp_demux_011_src0_startofpacket),                    //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src0_endofpacket),                      //          .endofpacket
		.sink12_ready         (rsp_demux_012_src0_ready),                            //    sink12.ready
		.sink12_valid         (rsp_demux_012_src0_valid),                            //          .valid
		.sink12_channel       (rsp_demux_012_src0_channel),                          //          .channel
		.sink12_data          (rsp_demux_012_src0_data),                             //          .data
		.sink12_startofpacket (rsp_demux_012_src0_startofpacket),                    //          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src0_endofpacket),                      //          .endofpacket
		.sink13_ready         (rsp_demux_013_src0_ready),                            //    sink13.ready
		.sink13_valid         (rsp_demux_013_src0_valid),                            //          .valid
		.sink13_channel       (rsp_demux_013_src0_channel),                          //          .channel
		.sink13_data          (rsp_demux_013_src0_data),                             //          .data
		.sink13_startofpacket (rsp_demux_013_src0_startofpacket),                    //          .startofpacket
		.sink13_endofpacket   (rsp_demux_013_src0_endofpacket),                      //          .endofpacket
		.sink14_ready         (rsp_demux_014_src0_ready),                            //    sink14.ready
		.sink14_valid         (rsp_demux_014_src0_valid),                            //          .valid
		.sink14_channel       (rsp_demux_014_src0_channel),                          //          .channel
		.sink14_data          (rsp_demux_014_src0_data),                             //          .data
		.sink14_startofpacket (rsp_demux_014_src0_startofpacket),                    //          .startofpacket
		.sink14_endofpacket   (rsp_demux_014_src0_endofpacket),                      //          .endofpacket
		.sink15_ready         (rsp_demux_015_src0_ready),                            //    sink15.ready
		.sink15_valid         (rsp_demux_015_src0_valid),                            //          .valid
		.sink15_channel       (rsp_demux_015_src0_channel),                          //          .channel
		.sink15_data          (rsp_demux_015_src0_data),                             //          .data
		.sink15_startofpacket (rsp_demux_015_src0_startofpacket),                    //          .startofpacket
		.sink15_endofpacket   (rsp_demux_015_src0_endofpacket),                      //          .endofpacket
		.sink16_ready         (rsp_demux_016_src0_ready),                            //    sink16.ready
		.sink16_valid         (rsp_demux_016_src0_valid),                            //          .valid
		.sink16_channel       (rsp_demux_016_src0_channel),                          //          .channel
		.sink16_data          (rsp_demux_016_src0_data),                             //          .data
		.sink16_startofpacket (rsp_demux_016_src0_startofpacket),                    //          .startofpacket
		.sink16_endofpacket   (rsp_demux_016_src0_endofpacket),                      //          .endofpacket
		.sink17_ready         (rsp_demux_017_src0_ready),                            //    sink17.ready
		.sink17_valid         (rsp_demux_017_src0_valid),                            //          .valid
		.sink17_channel       (rsp_demux_017_src0_channel),                          //          .channel
		.sink17_data          (rsp_demux_017_src0_data),                             //          .data
		.sink17_startofpacket (rsp_demux_017_src0_startofpacket),                    //          .startofpacket
		.sink17_endofpacket   (rsp_demux_017_src0_endofpacket),                      //          .endofpacket
		.sink18_ready         (rsp_demux_018_src0_ready),                            //    sink18.ready
		.sink18_valid         (rsp_demux_018_src0_valid),                            //          .valid
		.sink18_channel       (rsp_demux_018_src0_channel),                          //          .channel
		.sink18_data          (rsp_demux_018_src0_data),                             //          .data
		.sink18_startofpacket (rsp_demux_018_src0_startofpacket),                    //          .startofpacket
		.sink18_endofpacket   (rsp_demux_018_src0_endofpacket),                      //          .endofpacket
		.sink19_ready         (rsp_demux_019_src0_ready),                            //    sink19.ready
		.sink19_valid         (rsp_demux_019_src0_valid),                            //          .valid
		.sink19_channel       (rsp_demux_019_src0_channel),                          //          .channel
		.sink19_data          (rsp_demux_019_src0_data),                             //          .data
		.sink19_startofpacket (rsp_demux_019_src0_startofpacket),                    //          .startofpacket
		.sink19_endofpacket   (rsp_demux_019_src0_endofpacket)                       //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                               //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                               //          .valid
		.src_data            (rsp_mux_001_src_data),                                //          .data
		.src_channel         (rsp_mux_001_src_channel),                             //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (rsp_demux_001_src1_ready),                            //     sink0.ready
		.sink0_valid         (rsp_demux_001_src1_valid),                            //          .valid
		.sink0_channel       (rsp_demux_001_src1_channel),                          //          .channel
		.sink0_data          (rsp_demux_001_src1_data),                             //          .data
		.sink0_startofpacket (rsp_demux_001_src1_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (rsp_demux_001_src1_endofpacket),                      //          .endofpacket
		.sink1_ready         (rsp_demux_002_src1_ready),                            //     sink1.ready
		.sink1_valid         (rsp_demux_002_src1_valid),                            //          .valid
		.sink1_channel       (rsp_demux_002_src1_channel),                          //          .channel
		.sink1_data          (rsp_demux_002_src1_data),                             //          .data
		.sink1_startofpacket (rsp_demux_002_src1_startofpacket),                    //          .startofpacket
		.sink1_endofpacket   (rsp_demux_002_src1_endofpacket)                       //          .endofpacket
	);

	nios_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_0_clk_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (nios2_processor_reset_n_reset_bridge_in_reset_reset),    // in_rst_0.reset
		.in_0_data      (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                           //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                          //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                          //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                           //         .error
	);

	nios_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                // in_clk_0.clk
		.in_rst_0_reset (nios2_processor_reset_n_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (nios2_processor_jtag_debug_module_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (nios2_processor_jtag_debug_module_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (nios2_processor_jtag_debug_module_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                             //         .error
	);

	nios_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (nios2_processor_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (onchip_memory_s1_agent_rdata_fifo_src_data),          //     in_0.data
		.in_0_valid     (onchip_memory_s1_agent_rdata_fifo_src_valid),         //         .valid
		.in_0_ready     (onchip_memory_s1_agent_rdata_fifo_src_ready),         //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                    //         .error
	);

	nios_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (nios2_processor_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (switches_s1_agent_rdata_fifo_src_data),               //     in_0.data
		.in_0_valid     (switches_s1_agent_rdata_fifo_src_valid),              //         .valid
		.in_0_ready     (switches_s1_agent_rdata_fifo_src_ready),              //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                    //         .error
	);

	nios_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (nios2_processor_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (leds_s1_agent_rdata_fifo_src_data),                   //     in_0.data
		.in_0_valid     (leds_s1_agent_rdata_fifo_src_valid),                  //         .valid
		.in_0_ready     (leds_s1_agent_rdata_fifo_src_ready),                  //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                    //         .error
	);

	nios_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (nios2_processor_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (encoderincm_s1_agent_rdata_fifo_src_data),            //     in_0.data
		.in_0_valid     (encoderincm_s1_agent_rdata_fifo_src_valid),           //         .valid
		.in_0_ready     (encoderincm_s1_agent_rdata_fifo_src_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                    //         .error
	);

	nios_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (nios2_processor_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (frsensor_s1_agent_rdata_fifo_src_data),               //     in_0.data
		.in_0_valid     (frsensor_s1_agent_rdata_fifo_src_valid),              //         .valid
		.in_0_ready     (frsensor_s1_agent_rdata_fifo_src_ready),              //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)                    //         .error
	);

	nios_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (nios2_processor_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (flsensor_s1_agent_rdata_fifo_src_data),               //     in_0.data
		.in_0_valid     (flsensor_s1_agent_rdata_fifo_src_valid),              //         .valid
		.in_0_ready     (flsensor_s1_agent_rdata_fifo_src_ready),              //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)                    //         .error
	);

	nios_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (nios2_processor_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (lsensor_s1_agent_rdata_fifo_src_data),                //     in_0.data
		.in_0_valid     (lsensor_s1_agent_rdata_fifo_src_valid),               //         .valid
		.in_0_ready     (lsensor_s1_agent_rdata_fifo_src_ready),               //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)                    //         .error
	);

	nios_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (nios2_processor_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (rsensor_s1_agent_rdata_fifo_src_data),                //     in_0.data
		.in_0_valid     (rsensor_s1_agent_rdata_fifo_src_valid),               //         .valid
		.in_0_ready     (rsensor_s1_agent_rdata_fifo_src_ready),               //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)                    //         .error
	);

	nios_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (nios2_processor_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (blsensor_s1_agent_rdata_fifo_src_data),               //     in_0.data
		.in_0_valid     (blsensor_s1_agent_rdata_fifo_src_valid),              //         .valid
		.in_0_ready     (blsensor_s1_agent_rdata_fifo_src_ready),              //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)                    //         .error
	);

	nios_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (nios2_processor_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (drivespeed_s1_agent_rdata_fifo_src_data),             //     in_0.data
		.in_0_valid     (drivespeed_s1_agent_rdata_fifo_src_valid),            //         .valid
		.in_0_ready     (drivespeed_s1_agent_rdata_fifo_src_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)                    //         .error
	);

	nios_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_012 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (nios2_processor_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (brsensor_s1_agent_rdata_fifo_src_data),               //     in_0.data
		.in_0_valid     (brsensor_s1_agent_rdata_fifo_src_valid),              //         .valid
		.in_0_ready     (brsensor_s1_agent_rdata_fifo_src_ready),              //         .ready
		.out_0_data     (avalon_st_adapter_012_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_012_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_012_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_012_out_0_error)                    //         .error
	);

	nios_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_013 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (nios2_processor_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (targetdirection_s1_agent_rdata_fifo_src_data),        //     in_0.data
		.in_0_valid     (targetdirection_s1_agent_rdata_fifo_src_valid),       //         .valid
		.in_0_ready     (targetdirection_s1_agent_rdata_fifo_src_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_013_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_013_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_013_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_013_out_0_error)                    //         .error
	);

	nios_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_014 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (nios2_processor_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (redlight_s1_agent_rdata_fifo_src_data),               //     in_0.data
		.in_0_valid     (redlight_s1_agent_rdata_fifo_src_valid),              //         .valid
		.in_0_ready     (redlight_s1_agent_rdata_fifo_src_ready),              //         .ready
		.out_0_data     (avalon_st_adapter_014_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_014_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_014_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_014_out_0_error)                    //         .error
	);

	nios_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_015 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (nios2_processor_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (yellowlight_s1_agent_rdata_fifo_src_data),            //     in_0.data
		.in_0_valid     (yellowlight_s1_agent_rdata_fifo_src_valid),           //         .valid
		.in_0_ready     (yellowlight_s1_agent_rdata_fifo_src_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_015_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_015_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_015_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_015_out_0_error)                    //         .error
	);

	nios_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_016 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (nios2_processor_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (greenlight_s1_agent_rdata_fifo_src_data),             //     in_0.data
		.in_0_valid     (greenlight_s1_agent_rdata_fifo_src_valid),            //         .valid
		.in_0_ready     (greenlight_s1_agent_rdata_fifo_src_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_016_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_016_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_016_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_016_out_0_error)                    //         .error
	);

	nios_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_017 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (nios2_processor_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (reverse_s1_agent_rdata_fifo_src_data),                //     in_0.data
		.in_0_valid     (reverse_s1_agent_rdata_fifo_src_valid),               //         .valid
		.in_0_ready     (reverse_s1_agent_rdata_fifo_src_ready),               //         .ready
		.out_0_data     (avalon_st_adapter_017_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_017_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_017_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_017_out_0_error)                    //         .error
	);

	nios_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_018 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (nios2_processor_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (encoderreset_s1_agent_rdata_fifo_src_data),           //     in_0.data
		.in_0_valid     (encoderreset_s1_agent_rdata_fifo_src_valid),          //         .valid
		.in_0_ready     (encoderreset_s1_agent_rdata_fifo_src_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_018_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_018_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_018_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_018_out_0_error)                    //         .error
	);

	nios_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_019 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (nios2_processor_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (challengeselect_s1_agent_rdata_fifo_src_data),        //     in_0.data
		.in_0_valid     (challengeselect_s1_agent_rdata_fifo_src_valid),       //         .valid
		.in_0_ready     (challengeselect_s1_agent_rdata_fifo_src_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_019_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_019_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_019_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_019_out_0_error)                    //         .error
	);

endmodule
